
MainStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000092c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  0000092c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000499  00802004  00802004  000009c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006270  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002df8  00000000  00000000  00006edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001118  00000000  00000000  00009cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000648  00000000  00000000  0000adec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003bcd  00000000  00000000  0000b434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001090  00000000  00000000  0000f001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00010091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_14>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_20>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_25>
  68:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_26>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_28>
  74:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_29>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_58>
  ec:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_59>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ec e2       	ldi	r30, 0x2C	; 44
 21c:	f9 e0       	ldi	r31, 0x09	; 9
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a4 30       	cpi	r26, 0x04	; 4
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	24 e2       	ldi	r18, 0x24	; 36
 232:	a4 e0       	ldi	r26, 0x04	; 4
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	ad 39       	cpi	r26, 0x9D	; 157
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
 244:	0c 94 94 04 	jmp	0x928	; 0x928 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <setUp_RFM_USART>:
{
	while (*text)
	{
		sendCharRFM(*text++);
	}
}
 24c:	e0 e4       	ldi	r30, 0x40	; 64
 24e:	f6 e0       	ldi	r31, 0x06	; 6
 250:	88 e0       	ldi	r24, 0x08	; 8
 252:	81 83       	std	Z+1, r24	; 0x01
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	82 83       	std	Z+2, r24	; 0x02
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	81 83       	std	Z+1, r24	; 0x01
 25c:	86 83       	std	Z+6, r24	; 0x06
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	81 83       	std	Z+1, r24	; 0x01
 262:	86 83       	std	Z+6, r24	; 0x06
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	60 ea       	ldi	r22, 0xA0	; 160
 268:	78 e0       	ldi	r23, 0x08	; 8
 26a:	87 e0       	ldi	r24, 0x07	; 7
 26c:	91 e2       	ldi	r25, 0x21	; 33
 26e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <USART_InterruptDriver_Initialize>
 272:	e0 ea       	ldi	r30, 0xA0	; 160
 274:	f8 e0       	ldi	r31, 0x08	; 8
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	85 83       	std	Z+5, r24	; 0x05
 27a:	83 81       	ldd	r24, Z+3	; 0x03
 27c:	8f 7c       	andi	r24, 0xCF	; 207
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	83 83       	std	Z+3, r24	; 0x03
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	86 83       	std	Z+6, r24	; 0x06
 286:	17 82       	std	Z+7, r1	; 0x07
 288:	84 81       	ldd	r24, Z+4	; 0x04
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	84 83       	std	Z+4, r24	; 0x04
 28e:	84 81       	ldd	r24, Z+4	; 0x04
 290:	88 60       	ori	r24, 0x08	; 8
 292:	84 83       	std	Z+4, r24	; 0x04
 294:	08 95       	ret

00000296 <setUp_BLT_USART>:
 296:	ef 92       	push	r14
 298:	0f 93       	push	r16
 29a:	e0 e4       	ldi	r30, 0x40	; 64
 29c:	f6 e0       	ldi	r31, 0x06	; 6
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	81 83       	std	Z+1, r24	; 0x01
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	82 83       	std	Z+2, r24	; 0x02
 2a6:	ee 24       	eor	r14, r14
 2a8:	e3 94       	inc	r14
 2aa:	08 e1       	ldi	r16, 0x18	; 24
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	60 e2       	ldi	r22, 0x20	; 32
 2b2:	80 e4       	ldi	r24, 0x40	; 64
 2b4:	96 e0       	ldi	r25, 0x06	; 6
 2b6:	0e 94 cc 03 	call	0x798	; 0x798 <PORT_ConfigurePins>
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	60 eb       	ldi	r22, 0xB0	; 176
 2be:	78 e0       	ldi	r23, 0x08	; 8
 2c0:	86 e9       	ldi	r24, 0x96	; 150
 2c2:	93 e2       	ldi	r25, 0x23	; 35
 2c4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <USART_InterruptDriver_Initialize>
 2c8:	e0 eb       	ldi	r30, 0xB0	; 176
 2ca:	f8 e0       	ldi	r31, 0x08	; 8
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	85 83       	std	Z+5, r24	; 0x05
 2d0:	83 81       	ldd	r24, Z+3	; 0x03
 2d2:	8f 7c       	andi	r24, 0xCF	; 207
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	83 83       	std	Z+3, r24	; 0x03
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	86 83       	std	Z+6, r24	; 0x06
 2dc:	17 82       	std	Z+7, r1	; 0x07
 2de:	84 81       	ldd	r24, Z+4	; 0x04
 2e0:	80 61       	ori	r24, 0x10	; 16
 2e2:	84 83       	std	Z+4, r24	; 0x04
 2e4:	84 81       	ldd	r24, Z+4	; 0x04
 2e6:	88 60       	ori	r24, 0x08	; 8
 2e8:	84 83       	std	Z+4, r24	; 0x04
 2ea:	0f 91       	pop	r16
 2ec:	ef 90       	pop	r14
 2ee:	08 95       	ret

000002f0 <setTimer_Beacon>:
 2f0:	80 e1       	ldi	r24, 0x10	; 16
 2f2:	97 e2       	ldi	r25, 0x27	; 39
 2f4:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 2f8:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	98 e0       	ldi	r25, 0x08	; 8
 302:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <TC0_SetOverflowIntLevel>
 306:	67 e0       	ldi	r22, 0x07	; 7
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	98 e0       	ldi	r25, 0x08	; 8
 30c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <TC0_ConfigClockSource>
 310:	08 95       	ret

00000312 <setTimer_Tally>:
 312:	80 e9       	ldi	r24, 0x90	; 144
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
 31a:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	80 e4       	ldi	r24, 0x40	; 64
 322:	98 e0       	ldi	r25, 0x08	; 8
 324:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TC1_SetOverflowIntLevel>
 328:	67 e0       	ldi	r22, 0x07	; 7
 32a:	80 e4       	ldi	r24, 0x40	; 64
 32c:	98 e0       	ldi	r25, 0x08	; 8
 32e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <TC1_ConfigClockSource>
 332:	08 95       	ret

00000334 <sendBLT2RFM>:

void sendBLT2RFM(void)
{
 334:	cf 93       	push	r28
	TC_Restart(&TCC0);
 336:	88 e0       	ldi	r24, 0x08	; 8
 338:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>

	uint8_t i = 0;
 33c:	c0 e0       	ldi	r28, 0x00	; 0
	while (i <= RX_BLT_index)
	{
		bool byteToBuffer;
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data_RFM, RX_BLT_data[i]);
 33e:	ec 2f       	mov	r30, r28
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ea 5e       	subi	r30, 0xEA	; 234
 344:	fc 4d       	sbci	r31, 0xDC	; 220
 346:	60 81       	ld	r22, Z
 348:	87 e0       	ldi	r24, 0x07	; 7
 34a:	91 e2       	ldi	r25, 0x21	; 33
 34c:	0e 94 18 04 	call	0x830	; 0x830 <USART_TXBuffer_PutByte>
		if (byteToBuffer)
 350:	81 11       	cpse	r24, r1
		{
			i++;
 352:	cf 5f       	subi	r28, 0xFF	; 255
void sendBLT2RFM(void)
{
	TC_Restart(&TCC0);

	uint8_t i = 0;
	while (i <= RX_BLT_index)
 354:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 358:	8c 17       	cp	r24, r28
 35a:	88 f7       	brcc	.-30     	; 0x33e <sendBLT2RFM+0xa>
		if (byteToBuffer)
		{
			i++;
		}
	}
	RX_BLT_index = 0;
 35c:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <__data_end>
}
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <sendRFM2BLT>:

void sendRFM2BLT(void)
{
 364:	cf 93       	push	r28

	uint8_t i = 0;
 366:	c0 e0       	ldi	r28, 0x00	; 0
	while (i <= RX_RFM_index)
	{
		bool byteToBuffer;
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data_BLT, RX_RFM_data[i]);
 368:	ec 2f       	mov	r30, r28
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	e9 5f       	subi	r30, 0xF9	; 249
 36e:	ff 4d       	sbci	r31, 0xDF	; 223
 370:	60 81       	ld	r22, Z
 372:	86 e9       	ldi	r24, 0x96	; 150
 374:	93 e2       	ldi	r25, 0x23	; 35
 376:	0e 94 18 04 	call	0x830	; 0x830 <USART_TXBuffer_PutByte>
		if (byteToBuffer)
 37a:	81 11       	cpse	r24, r1
		{
			i++;
 37c:	cf 5f       	subi	r28, 0xFF	; 255

void sendRFM2BLT(void)
{

	uint8_t i = 0;
	while (i <= RX_RFM_index)
 37e:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <RX_RFM_index>
 382:	8c 17       	cp	r24, r28
 384:	88 f7       	brcc	.-30     	; 0x368 <sendRFM2BLT+0x4>
		if (byteToBuffer)
		{
			i++;
		}
	}
	RX_RFM_index = 0;
 386:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <RX_RFM_index>
}
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <sendSTATUS2RFM>:

void sendSTATUS2RFM(void)
{
 38e:	cf 93       	push	r28
	TC_Restart(&TCC0);
 390:	88 e0       	ldi	r24, 0x08	; 8
 392:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
	
	uint8_t	i = 0;
 396:	c0 e0       	ldi	r28, 0x00	; 0
	while (i < 4) {
		bool byteToBuffer;
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data_RFM, cameraStatus[i]);
 398:	ec 2f       	mov	r30, r28
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	e0 50       	subi	r30, 0x00	; 0
 39e:	f0 4e       	sbci	r31, 0xE0	; 224
 3a0:	60 81       	ld	r22, Z
 3a2:	87 e0       	ldi	r24, 0x07	; 7
 3a4:	91 e2       	ldi	r25, 0x21	; 33
 3a6:	0e 94 18 04 	call	0x830	; 0x830 <USART_TXBuffer_PutByte>
		if(byteToBuffer){
 3aa:	81 11       	cpse	r24, r1
			i++;
 3ac:	cf 5f       	subi	r28, 0xFF	; 255
void sendSTATUS2RFM(void)
{
	TC_Restart(&TCC0);
	
	uint8_t	i = 0;
	while (i < 4) {
 3ae:	c4 30       	cpi	r28, 0x04	; 4
 3b0:	98 f3       	brcs	.-26     	; 0x398 <sendSTATUS2RFM+0xa>
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data_RFM, cameraStatus[i]);
		if(byteToBuffer){
			i++;
		}
	}
}
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <main>:

int main(void)
{
	setUp_RFM_USART();
 3b6:	0e 94 26 01 	call	0x24c	; 0x24c <setUp_RFM_USART>

	//setUp_PC_USART();
	
	setUp_BLT_USART();
 3ba:	0e 94 4b 01 	call	0x296	; 0x296 <setUp_BLT_USART>

	setTimer_Beacon();
 3be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <setTimer_Beacon>

	setTimer_Tally();
 3c2:	0e 94 89 01 	call	0x312	; 0x312 <setTimer_Tally>

	// Enable all interrupt levels in PMIC and enable global interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 3c6:	e0 ea       	ldi	r30, 0xA0	; 160
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	87 60       	ori	r24, 0x07	; 7
 3ce:	82 83       	std	Z+2, r24	; 0x02
	sei();
 3d0:	78 94       	sei

	while (1)
	{

		if(cameraStatus[0] != NORMAL)
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e2       	ldi	r17, 0x20	; 32
 3d6:	f8 01       	movw	r30, r16
 3d8:	80 81       	ld	r24, Z
 3da:	88 23       	and	r24, r24
 3dc:	f1 f0       	breq	.+60     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			sendSTATUS2RFM();
 3de:	0e 94 c7 01 	call	0x38e	; 0x38e <sendSTATUS2RFM>
			cameraStatus[0] = NORMAL;
 3e2:	f8 01       	movw	r30, r16
 3e4:	10 82       	st	Z, r1
 3e6:	19 c0       	rjmp	.+50     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}

		//Preposielanie Bluetooth prijatych dat na RF komunikacny kanal
		while (USART_RXBufferData_Available(&USART_data_BLT))
		{
			RX_BLT_data[RX_BLT_index] = USART_RXBuffer_GetByte(&USART_data_BLT);
 3e8:	c0 91 04 20 	lds	r28, 0x2004	; 0x802004 <__data_end>
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
 3ee:	86 e9       	ldi	r24, 0x96	; 150
 3f0:	93 e2       	ldi	r25, 0x23	; 35
 3f2:	0e 94 44 04 	call	0x888	; 0x888 <USART_RXBuffer_GetByte>
 3f6:	ca 5e       	subi	r28, 0xEA	; 234
 3f8:	dc 4d       	sbci	r29, 0xDC	; 220
 3fa:	88 83       	st	Y, r24
			if (RX_BLT_data[RX_BLT_index] == USART_END_CHAR)
 3fc:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 400:	e8 2f       	mov	r30, r24
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	ea 5e       	subi	r30, 0xEA	; 234
 406:	fc 4d       	sbci	r31, 0xDC	; 220
 408:	90 81       	ld	r25, Z
 40a:	91 36       	cpi	r25, 0x61	; 97
 40c:	19 f4       	brne	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			{
				sendBLT2RFM();
 40e:	0e 94 9a 01 	call	0x334	; 0x334 <sendBLT2RFM>
 412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			}
			else
			{
				RX_BLT_index++;
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <__data_end>
			sendSTATUS2RFM();
			cameraStatus[0] = NORMAL;
		}

		//Preposielanie Bluetooth prijatych dat na RF komunikacny kanal
		while (USART_RXBufferData_Available(&USART_data_BLT))
 41a:	86 e9       	ldi	r24, 0x96	; 150
 41c:	93 e2       	ldi	r25, 0x23	; 35
 41e:	0e 94 39 04 	call	0x872	; 0x872 <USART_RXBufferData_Available>
 422:	81 11       	cpse	r24, r1
 424:	e1 cf       	rjmp	.-62     	; 0x3e8 <main+0x32>
 426:	1a c0       	rjmp	.+52     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		}
	
		//Preposielanie RF komunikacie na BLT
		while (USART_RXBufferData_Available(&USART_data_RFM))
		{
			RX_RFM_data[RX_RFM_index] = USART_RXBuffer_GetByte(&USART_data_RFM);
 428:	c0 91 05 20 	lds	r28, 0x2005	; 0x802005 <RX_RFM_index>
 42c:	d0 e0       	ldi	r29, 0x00	; 0
 42e:	87 e0       	ldi	r24, 0x07	; 7
 430:	91 e2       	ldi	r25, 0x21	; 33
 432:	0e 94 44 04 	call	0x888	; 0x888 <USART_RXBuffer_GetByte>
 436:	c9 5f       	subi	r28, 0xF9	; 249
 438:	df 4d       	sbci	r29, 0xDF	; 223
 43a:	88 83       	st	Y, r24
			if (RX_RFM_data[RX_RFM_index] == USART_END_CHAR)
 43c:	e0 91 05 20 	lds	r30, 0x2005	; 0x802005 <RX_RFM_index>
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	e9 5f       	subi	r30, 0xF9	; 249
 444:	ff 4d       	sbci	r31, 0xDF	; 223
 446:	80 81       	ld	r24, Z
 448:	81 36       	cpi	r24, 0x61	; 97
 44a:	19 f4       	brne	.+6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			{
				sendRFM2BLT();
 44c:	0e 94 b2 01 	call	0x364	; 0x364 <sendRFM2BLT>
 450:	05 c0       	rjmp	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			}
			else
			{
				RX_BLT_index++;
 452:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <__data_end>
				RX_BLT_index++;
			}
		}
	
		//Preposielanie RF komunikacie na BLT
		while (USART_RXBufferData_Available(&USART_data_RFM))
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	91 e2       	ldi	r25, 0x21	; 33
 460:	0e 94 39 04 	call	0x872	; 0x872 <USART_RXBufferData_Available>
 464:	81 11       	cpse	r24, r1
 466:	e0 cf       	rjmp	.-64     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	87 e8       	ldi	r24, 0x87	; 135
 46a:	93 e1       	ldi	r25, 0x13	; 19
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop
 474:	b0 cf       	rjmp	.-160    	; 0x3d6 <main+0x20>

00000476 <__vector_25>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	08 b6       	in	r0, 0x38	; 56
 482:	0f 92       	push	r0
 484:	18 be       	out	0x38, r1	; 56
 486:	09 b6       	in	r0, 0x39	; 57
 488:	0f 92       	push	r0
 48a:	19 be       	out	0x39, r1	; 57
 48c:	0b b6       	in	r0, 0x3b	; 59
 48e:	0f 92       	push	r0
 490:	1b be       	out	0x3b, r1	; 59
 492:	2f 93       	push	r18
 494:	3f 93       	push	r19
 496:	4f 93       	push	r20
 498:	5f 93       	push	r21
 49a:	6f 93       	push	r22
 49c:	7f 93       	push	r23
 49e:	8f 93       	push	r24
 4a0:	9f 93       	push	r25
 4a2:	af 93       	push	r26
 4a4:	bf 93       	push	r27
 4a6:	ef 93       	push	r30
 4a8:	ff 93       	push	r31
	USART_RXComplete(&USART_data_RFM);
 4aa:	87 e0       	ldi	r24, 0x07	; 7
 4ac:	91 e2       	ldi	r25, 0x21	; 33
 4ae:	0e 94 52 04 	call	0x8a4	; 0x8a4 <USART_RXComplete>
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0b be       	out	0x3b, r0	; 59
 4ce:	0f 90       	pop	r0
 4d0:	09 be       	out	0x39, r0	; 57
 4d2:	0f 90       	pop	r0
 4d4:	08 be       	out	0x38, r0	; 56
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_58>:

ISR(USARTE0_RXC_vect)
{
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	08 b6       	in	r0, 0x38	; 56
 4ec:	0f 92       	push	r0
 4ee:	18 be       	out	0x38, r1	; 56
 4f0:	09 b6       	in	r0, 0x39	; 57
 4f2:	0f 92       	push	r0
 4f4:	19 be       	out	0x39, r1	; 57
 4f6:	0b b6       	in	r0, 0x3b	; 59
 4f8:	0f 92       	push	r0
 4fa:	1b be       	out	0x3b, r1	; 59
 4fc:	2f 93       	push	r18
 4fe:	3f 93       	push	r19
 500:	4f 93       	push	r20
 502:	5f 93       	push	r21
 504:	6f 93       	push	r22
 506:	7f 93       	push	r23
 508:	8f 93       	push	r24
 50a:	9f 93       	push	r25
 50c:	af 93       	push	r26
 50e:	bf 93       	push	r27
 510:	ef 93       	push	r30
 512:	ff 93       	push	r31
	USART_RXComplete(&USART_data_PC);
 514:	8f e0       	ldi	r24, 0x0F	; 15
 516:	92 e2       	ldi	r25, 0x22	; 34
 518:	0e 94 52 04 	call	0x8a4	; 0x8a4 <USART_RXComplete>
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0b be       	out	0x3b, r0	; 59
 538:	0f 90       	pop	r0
 53a:	09 be       	out	0x39, r0	; 57
 53c:	0f 90       	pop	r0
 53e:	08 be       	out	0x38, r0	; 56
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_28>:

ISR(USARTC1_RXC_vect)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	08 b6       	in	r0, 0x38	; 56
 556:	0f 92       	push	r0
 558:	18 be       	out	0x38, r1	; 56
 55a:	09 b6       	in	r0, 0x39	; 57
 55c:	0f 92       	push	r0
 55e:	19 be       	out	0x39, r1	; 57
 560:	0b b6       	in	r0, 0x3b	; 59
 562:	0f 92       	push	r0
 564:	1b be       	out	0x3b, r1	; 59
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	USART_RXComplete(&USART_data_BLT);
 57e:	86 e9       	ldi	r24, 0x96	; 150
 580:	93 e2       	ldi	r25, 0x23	; 35
 582:	0e 94 52 04 	call	0x8a4	; 0x8a4 <USART_RXComplete>
}
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	bf 91       	pop	r27
 58c:	af 91       	pop	r26
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	7f 91       	pop	r23
 594:	6f 91       	pop	r22
 596:	5f 91       	pop	r21
 598:	4f 91       	pop	r20
 59a:	3f 91       	pop	r19
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	0b be       	out	0x3b, r0	; 59
 5a2:	0f 90       	pop	r0
 5a4:	09 be       	out	0x39, r0	; 57
 5a6:	0f 90       	pop	r0
 5a8:	08 be       	out	0x38, r0	; 56
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <__vector_26>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect)
{
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	08 b6       	in	r0, 0x38	; 56
 5c0:	0f 92       	push	r0
 5c2:	18 be       	out	0x38, r1	; 56
 5c4:	09 b6       	in	r0, 0x39	; 57
 5c6:	0f 92       	push	r0
 5c8:	19 be       	out	0x39, r1	; 57
 5ca:	0b b6       	in	r0, 0x3b	; 59
 5cc:	0f 92       	push	r0
 5ce:	1b be       	out	0x3b, r1	; 59
 5d0:	2f 93       	push	r18
 5d2:	3f 93       	push	r19
 5d4:	4f 93       	push	r20
 5d6:	5f 93       	push	r21
 5d8:	6f 93       	push	r22
 5da:	7f 93       	push	r23
 5dc:	8f 93       	push	r24
 5de:	9f 93       	push	r25
 5e0:	af 93       	push	r26
 5e2:	bf 93       	push	r27
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data_RFM);
 5e8:	87 e0       	ldi	r24, 0x07	; 7
 5ea:	91 e2       	ldi	r25, 0x21	; 33
 5ec:	0e 94 6e 04 	call	0x8dc	; 0x8dc <USART_DataRegEmpty>
}
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	bf 91       	pop	r27
 5f6:	af 91       	pop	r26
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	7f 91       	pop	r23
 5fe:	6f 91       	pop	r22
 600:	5f 91       	pop	r21
 602:	4f 91       	pop	r20
 604:	3f 91       	pop	r19
 606:	2f 91       	pop	r18
 608:	0f 90       	pop	r0
 60a:	0b be       	out	0x3b, r0	; 59
 60c:	0f 90       	pop	r0
 60e:	09 be       	out	0x39, r0	; 57
 610:	0f 90       	pop	r0
 612:	08 be       	out	0x38, r0	; 56
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <__vector_59>:

ISR(USARTE0_DRE_vect)
{
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	08 b6       	in	r0, 0x38	; 56
 62a:	0f 92       	push	r0
 62c:	18 be       	out	0x38, r1	; 56
 62e:	09 b6       	in	r0, 0x39	; 57
 630:	0f 92       	push	r0
 632:	19 be       	out	0x39, r1	; 57
 634:	0b b6       	in	r0, 0x3b	; 59
 636:	0f 92       	push	r0
 638:	1b be       	out	0x3b, r1	; 59
 63a:	2f 93       	push	r18
 63c:	3f 93       	push	r19
 63e:	4f 93       	push	r20
 640:	5f 93       	push	r21
 642:	6f 93       	push	r22
 644:	7f 93       	push	r23
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data_PC);
 652:	8f e0       	ldi	r24, 0x0F	; 15
 654:	92 e2       	ldi	r25, 0x22	; 34
 656:	0e 94 6e 04 	call	0x8dc	; 0x8dc <USART_DataRegEmpty>
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0b be       	out	0x3b, r0	; 59
 676:	0f 90       	pop	r0
 678:	09 be       	out	0x39, r0	; 57
 67a:	0f 90       	pop	r0
 67c:	08 be       	out	0x38, r0	; 56
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <__vector_29>:

ISR(USARTC1_DRE_vect)
{
 688:	1f 92       	push	r1
 68a:	0f 92       	push	r0
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	0f 92       	push	r0
 690:	11 24       	eor	r1, r1
 692:	08 b6       	in	r0, 0x38	; 56
 694:	0f 92       	push	r0
 696:	18 be       	out	0x38, r1	; 56
 698:	09 b6       	in	r0, 0x39	; 57
 69a:	0f 92       	push	r0
 69c:	19 be       	out	0x39, r1	; 57
 69e:	0b b6       	in	r0, 0x3b	; 59
 6a0:	0f 92       	push	r0
 6a2:	1b be       	out	0x3b, r1	; 59
 6a4:	2f 93       	push	r18
 6a6:	3f 93       	push	r19
 6a8:	4f 93       	push	r20
 6aa:	5f 93       	push	r21
 6ac:	6f 93       	push	r22
 6ae:	7f 93       	push	r23
 6b0:	8f 93       	push	r24
 6b2:	9f 93       	push	r25
 6b4:	af 93       	push	r26
 6b6:	bf 93       	push	r27
 6b8:	ef 93       	push	r30
 6ba:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data_BLT);
 6bc:	86 e9       	ldi	r24, 0x96	; 150
 6be:	93 e2       	ldi	r25, 0x23	; 35
 6c0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <USART_DataRegEmpty>
}
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	bf 91       	pop	r27
 6ca:	af 91       	pop	r26
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	7f 91       	pop	r23
 6d2:	6f 91       	pop	r22
 6d4:	5f 91       	pop	r21
 6d6:	4f 91       	pop	r20
 6d8:	3f 91       	pop	r19
 6da:	2f 91       	pop	r18
 6dc:	0f 90       	pop	r0
 6de:	0b be       	out	0x3b, r0	; 59
 6e0:	0f 90       	pop	r0
 6e2:	09 be       	out	0x39, r0	; 57
 6e4:	0f 90       	pop	r0
 6e6:	08 be       	out	0x38, r0	; 56
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <__vector_20>:


// Tell compiler to associate this interrupt handler with the TCC0_OVF_vect vector.
ISR(TCC1_OVF_vect) // TALLY
{
 6f2:	1f 92       	push	r1
 6f4:	0f 92       	push	r0
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	0f 92       	push	r0
 6fa:	11 24       	eor	r1, r1
 6fc:	08 b6       	in	r0, 0x38	; 56
 6fe:	0f 92       	push	r0
 700:	18 be       	out	0x38, r1	; 56
 702:	0b b6       	in	r0, 0x3b	; 59
 704:	0f 92       	push	r0
 706:	1b be       	out	0x3b, r1	; 59
 708:	2f 93       	push	r18
 70a:	8f 93       	push	r24
 70c:	9f 93       	push	r25
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
	uint8_t port_A_temp = PORT_GetPortValue(&PORTA);
 712:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	uint8_t port_B_temp = PORT_GetPortValue(&PORTB);
 716:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>

	if (port_A_temp != port_A || port_B_temp != port_B)
 71a:	20 91 0e 22 	lds	r18, 0x220E	; 0x80220e <port_A>
 71e:	82 13       	cpse	r24, r18
 720:	04 c0       	rjmp	.+8      	; 0x72a <__vector_20+0x38>
 722:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <port_B>
 726:	92 17       	cp	r25, r18
 728:	a9 f0       	breq	.+42     	; 0x754 <__vector_20+0x62>
	{
		port_A = port_A_temp;
 72a:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <port_A>
		port_B = port_B_temp;
 72e:	90 93 06 20 	sts	0x2006, r25	; 0x802006 <port_B>

		cameraStatus[1] = ((port_A & 0xC0) >> 2) + port_B; 	//LIVE CAMERA
 732:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <port_A>
 736:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <port_B>
 73a:	e0 e0       	ldi	r30, 0x00	; 0
 73c:	f0 e2       	ldi	r31, 0x20	; 32
 73e:	80 7c       	andi	r24, 0xC0	; 192
 740:	86 95       	lsr	r24
 742:	86 95       	lsr	r24
 744:	89 0f       	add	r24, r25
 746:	81 83       	std	Z+1, r24	; 0x01
		cameraStatus[2] = port_A & 0x3F;					//READY CAMERA
 748:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <port_A>
 74c:	8f 73       	andi	r24, 0x3F	; 63
 74e:	82 83       	std	Z+2, r24	; 0x02

		cameraStatus[0] = CHANGED; //Odoslanie dat pri zmene na portoch
 750:	82 e0       	ldi	r24, 0x02	; 2
 752:	80 83       	st	Z, r24
	}
}
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	9f 91       	pop	r25
 75a:	8f 91       	pop	r24
 75c:	2f 91       	pop	r18
 75e:	0f 90       	pop	r0
 760:	0b be       	out	0x3b, r0	; 59
 762:	0f 90       	pop	r0
 764:	08 be       	out	0x38, r0	; 56
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_14>:

ISR(TCC0_OVF_vect) // BEACON
{
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	08 b6       	in	r0, 0x38	; 56
 77c:	0f 92       	push	r0
 77e:	18 be       	out	0x38, r1	; 56
 780:	8f 93       	push	r24
	cameraStatus[0] = REFRESH; //Pravidelne zasielanie dat
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 788:	8f 91       	pop	r24
 78a:	0f 90       	pop	r0
 78c:	08 be       	out	0x38, r0	; 56
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
 798:	ef 92       	push	r14
 79a:	0f 93       	push	r16
 79c:	fc 01       	movw	r30, r24
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
 79e:	0e 29       	or	r16, r14
 7a0:	41 11       	cpse	r20, r1
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <PORT_ConfigurePins+0x10>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <PORT_ConfigurePins+0x12>
 7a8:	80 e8       	ldi	r24, 0x80	; 128
 7aa:	08 2b       	or	r16, r24
 7ac:	21 11       	cpse	r18, r1
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <PORT_ConfigurePins+0x1c>
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <PORT_ConfigurePins+0x1e>
 7b4:	80 e4       	ldi	r24, 0x40	; 64
 7b6:	08 2b       	or	r16, r24
	               (invertEnable ? PORT_INVEN_bm : 0);

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
 7b8:	9f b7       	in	r25, 0x3f	; 63

	cli();
 7ba:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
 7bc:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	port->PIN0CTRL = temp;
 7c0:	00 8b       	std	Z+16, r16	; 0x10

	/* Restore status register. */
	SREG = sreg;
 7c2:	9f bf       	out	0x3f, r25	; 63
}
 7c4:	0f 91       	pop	r16
 7c6:	ef 90       	pop	r14
 7c8:	08 95       	ret

000007ca <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
 7ca:	fc 01       	movw	r30, r24
 7cc:	90 81       	ld	r25, Z
 7ce:	90 7f       	andi	r25, 0xF0	; 240
 7d0:	69 2b       	or	r22, r25
 7d2:	60 83       	st	Z, r22
 7d4:	08 95       	ret

000007d6 <TC1_ConfigClockSource>:
 7d6:	fc 01       	movw	r30, r24
 7d8:	90 81       	ld	r25, Z
 7da:	90 7f       	andi	r25, 0xF0	; 240
 7dc:	69 2b       	or	r22, r25
 7de:	60 83       	st	Z, r22
 7e0:	08 95       	ret

000007e2 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
 7e2:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
 7e4:	96 81       	ldd	r25, Z+6	; 0x06
 7e6:	9c 7f       	andi	r25, 0xFC	; 252
 7e8:	69 2b       	or	r22, r25
 7ea:	66 83       	std	Z+6, r22	; 0x06
 7ec:	08 95       	ret

000007ee <TC1_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
 7ee:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
 7f0:	96 81       	ldd	r25, Z+6	; 0x06
 7f2:	9c 7f       	andi	r25, 0xFC	; 252
 7f4:	69 2b       	or	r22, r25
 7f6:	66 83       	std	Z+6, r22	; 0x06
 7f8:	08 95       	ret

000007fa <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 7fa:	fc 01       	movw	r30, r24
 7fc:	60 83       	st	Z, r22
 7fe:	71 83       	std	Z+1, r23	; 0x01
 800:	42 83       	std	Z+2, r20	; 0x02
 802:	ec 5f       	subi	r30, 0xFC	; 252
 804:	fe 4f       	sbci	r31, 0xFE	; 254
 806:	10 82       	st	Z, r1
 808:	31 97       	sbiw	r30, 0x01	; 1
 80a:	10 82       	st	Z, r1
 80c:	33 96       	adiw	r30, 0x03	; 3
 80e:	10 82       	st	Z, r1
 810:	31 97       	sbiw	r30, 0x01	; 1
 812:	10 82       	st	Z, r1
 814:	08 95       	ret

00000816 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 816:	fc 01       	movw	r30, r24
 818:	eb 5f       	subi	r30, 0xFB	; 251
 81a:	fe 4f       	sbci	r31, 0xFE	; 254
 81c:	90 81       	ld	r25, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 81e:	31 96       	adiw	r30, 0x01	; 1
 820:	20 81       	ld	r18, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 822:	9f 5f       	subi	r25, 0xFF	; 255
 824:	9f 77       	andi	r25, 0x7F	; 127
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	92 13       	cpse	r25, r18
 82a:	01 c0       	rjmp	.+2      	; 0x82e <USART_TXBuffer_FreeSpace+0x18>
 82c:	80 e0       	ldi	r24, 0x00	; 0
}
 82e:	08 95       	ret

00000830 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 830:	1f 93       	push	r17
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	ec 01       	movw	r28, r24
 838:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 83a:	0e 94 0b 04 	call	0x816	; 0x816 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 83e:	88 23       	and	r24, r24
 840:	a1 f0       	breq	.+40     	; 0x86a <USART_TXBuffer_PutByte+0x3a>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 842:	de 01       	movw	r26, r28
 844:	ab 5f       	subi	r26, 0xFB	; 251
 846:	be 4f       	sbci	r27, 0xFE	; 254
 848:	9c 91       	ld	r25, X
	  	TXbufPtr->TX[tempTX_Head]= data;
 84a:	fe 01       	movw	r30, r28
 84c:	e9 0f       	add	r30, r25
 84e:	f1 1d       	adc	r31, r1
 850:	ed 57       	subi	r30, 0x7D	; 125
 852:	ff 4f       	sbci	r31, 0xFF	; 255
 854:	10 83       	st	Z, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 856:	9f 5f       	subi	r25, 0xFF	; 255
 858:	9f 77       	andi	r25, 0x7F	; 127
 85a:	9c 93       	st	X, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 85c:	e8 81       	ld	r30, Y
 85e:	f9 81       	ldd	r31, Y+1	; 0x01
 860:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 862:	9c 7f       	andi	r25, 0xFC	; 252
 864:	2a 81       	ldd	r18, Y+2	; 0x02
 866:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 868:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	1f 91       	pop	r17
 870:	08 95       	ret

00000872 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 872:	fc 01       	movw	r30, r24
 874:	ed 5f       	subi	r30, 0xFD	; 253
 876:	fe 4f       	sbci	r31, 0xFE	; 254
 878:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 87a:	31 96       	adiw	r30, 0x01	; 1
 87c:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	29 13       	cpse	r18, r25
 882:	01 c0       	rjmp	.+2      	; 0x886 <USART_RXBufferData_Available+0x14>
 884:	80 e0       	ldi	r24, 0x00	; 0
}
 886:	08 95       	ret

00000888 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 888:	fc 01       	movw	r30, r24
 88a:	ec 5f       	subi	r30, 0xFC	; 252
 88c:	fe 4f       	sbci	r31, 0xFE	; 254
 88e:	20 81       	ld	r18, Z
 890:	dc 01       	movw	r26, r24
 892:	a2 0f       	add	r26, r18
 894:	b1 1d       	adc	r27, r1
 896:	13 96       	adiw	r26, 0x03	; 3
 898:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 89a:	90 81       	ld	r25, Z
 89c:	9f 5f       	subi	r25, 0xFF	; 255
 89e:	9f 77       	andi	r25, 0x7F	; 127
 8a0:	90 83       	st	Z, r25

	return ans;
}
 8a2:	08 95       	ret

000008a4 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 8a4:	fc 01       	movw	r30, r24
 8a6:	ed 5f       	subi	r30, 0xFD	; 253
 8a8:	fe 4f       	sbci	r31, 0xFE	; 254
 8aa:	20 81       	ld	r18, Z
 8ac:	2f 5f       	subi	r18, 0xFF	; 255
 8ae:	2f 77       	andi	r18, 0x7F	; 127

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 8b0:	31 96       	adiw	r30, 0x01	; 1
 8b2:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
 8b4:	dc 01       	movw	r26, r24
 8b6:	ed 91       	ld	r30, X+
 8b8:	fc 91       	ld	r31, X
 8ba:	11 97       	sbiw	r26, 0x01	; 1
 8bc:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
 8be:	23 17       	cp	r18, r19
 8c0:	59 f0       	breq	.+22     	; 0x8d8 <USART_RXComplete+0x34>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 8c2:	fc 01       	movw	r30, r24
 8c4:	ed 5f       	subi	r30, 0xFD	; 253
 8c6:	fe 4f       	sbci	r31, 0xFE	; 254
 8c8:	30 81       	ld	r19, Z
 8ca:	a3 0f       	add	r26, r19
 8cc:	b1 1d       	adc	r27, r1
 8ce:	13 96       	adiw	r26, 0x03	; 3
 8d0:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
 8d2:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 8d8:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 8da:	08 95       	ret

000008dc <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 8e0:	fc 01       	movw	r30, r24
 8e2:	ea 5f       	subi	r30, 0xFA	; 250
 8e4:	fe 4f       	sbci	r31, 0xFE	; 254
 8e6:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
 8e8:	31 97       	sbiw	r30, 0x01	; 1
 8ea:	20 81       	ld	r18, Z
 8ec:	32 13       	cpse	r19, r18
 8ee:	07 c0       	rjmp	.+14     	; 0x8fe <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 8f0:	dc 01       	movw	r26, r24
 8f2:	ed 91       	ld	r30, X+
 8f4:	fc 91       	ld	r31, X
 8f6:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 8f8:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 8fa:	83 83       	std	Z+3, r24	; 0x03
 8fc:	12 c0       	rjmp	.+36     	; 0x922 <USART_DataRegEmpty+0x46>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 8fe:	fc 01       	movw	r30, r24
 900:	ea 5f       	subi	r30, 0xFA	; 250
 902:	fe 4f       	sbci	r31, 0xFE	; 254
 904:	20 81       	ld	r18, Z
 906:	dc 01       	movw	r26, r24
 908:	a2 0f       	add	r26, r18
 90a:	b1 1d       	adc	r27, r1
 90c:	ad 57       	subi	r26, 0x7D	; 125
 90e:	bf 4f       	sbci	r27, 0xFF	; 255
 910:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
 912:	ec 01       	movw	r28, r24
 914:	a8 81       	ld	r26, Y
 916:	b9 81       	ldd	r27, Y+1	; 0x01
 918:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 91a:	80 81       	ld	r24, Z
 91c:	8f 5f       	subi	r24, 0xFF	; 255
 91e:	8f 77       	andi	r24, 0x7F	; 127
 920:	80 83       	st	Z, r24
	}
}
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	08 95       	ret

00000928 <_exit>:
 928:	f8 94       	cli

0000092a <__stop_program>:
 92a:	ff cf       	rjmp	.-2      	; 0x92a <__stop_program>
