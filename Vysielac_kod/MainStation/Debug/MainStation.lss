
MainStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031a  00802000  00802000  0000073a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000607b  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002dd6  00000000  00000000  00006a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001147  00000000  00000000  00009825  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  0000a96c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b4b  00000000  00000000  0000aea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d46  00000000  00000000  0000e9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000f735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_14>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_20>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_25>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_28>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_58>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	23 e2       	ldi	r18, 0x23	; 35
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	aa 31       	cpi	r26, 0x1A	; 26
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 b8 01 	call	0x370	; 0x370 <main>
 228:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <setUp_RFM_USART>:
{
	while (*text)
	{
		sendCharRFM(*text++);
	}
}
 230:	e0 e4       	ldi	r30, 0x40	; 64
 232:	f6 e0       	ldi	r31, 0x06	; 6
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	81 83       	std	Z+1, r24	; 0x01
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	81 83       	std	Z+1, r24	; 0x01
 240:	86 83       	std	Z+6, r24	; 0x06
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	81 83       	std	Z+1, r24	; 0x01
 246:	86 83       	std	Z+6, r24	; 0x06
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	60 ea       	ldi	r22, 0xA0	; 160
 24c:	78 e0       	ldi	r23, 0x08	; 8
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	90 e2       	ldi	r25, 0x20	; 32
 252:	0e 94 1e 03 	call	0x63c	; 0x63c <USART_InterruptDriver_Initialize>
 256:	e0 ea       	ldi	r30, 0xA0	; 160
 258:	f8 e0       	ldi	r31, 0x08	; 8
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	85 83       	std	Z+5, r24	; 0x05
 25e:	83 81       	ldd	r24, Z+3	; 0x03
 260:	8f 7c       	andi	r24, 0xCF	; 207
 262:	80 61       	ori	r24, 0x10	; 16
 264:	83 83       	std	Z+3, r24	; 0x03
 266:	8c e0       	ldi	r24, 0x0C	; 12
 268:	86 83       	std	Z+6, r24	; 0x06
 26a:	17 82       	std	Z+7, r1	; 0x07
 26c:	84 81       	ldd	r24, Z+4	; 0x04
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	84 83       	std	Z+4, r24	; 0x04
 272:	84 81       	ldd	r24, Z+4	; 0x04
 274:	88 60       	ori	r24, 0x08	; 8
 276:	84 83       	std	Z+4, r24	; 0x04
 278:	08 95       	ret

0000027a <setUp_BLT_USART>:
 27a:	ef 92       	push	r14
 27c:	0f 93       	push	r16
 27e:	e0 e4       	ldi	r30, 0x40	; 64
 280:	f6 e0       	ldi	r31, 0x06	; 6
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	81 83       	std	Z+1, r24	; 0x01
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	82 83       	std	Z+2, r24	; 0x02
 28a:	ee 24       	eor	r14, r14
 28c:	e3 94       	inc	r14
 28e:	08 e1       	ldi	r16, 0x18	; 24
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	60 e2       	ldi	r22, 0x20	; 32
 296:	80 e4       	ldi	r24, 0x40	; 64
 298:	96 e0       	ldi	r25, 0x06	; 6
 29a:	0e 94 ed 02 	call	0x5da	; 0x5da <PORT_ConfigurePins>
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	60 eb       	ldi	r22, 0xB0	; 176
 2a2:	78 e0       	ldi	r23, 0x08	; 8
 2a4:	83 e1       	ldi	r24, 0x13	; 19
 2a6:	92 e2       	ldi	r25, 0x22	; 34
 2a8:	0e 94 1e 03 	call	0x63c	; 0x63c <USART_InterruptDriver_Initialize>
 2ac:	e0 eb       	ldi	r30, 0xB0	; 176
 2ae:	f8 e0       	ldi	r31, 0x08	; 8
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	85 83       	std	Z+5, r24	; 0x05
 2b4:	83 81       	ldd	r24, Z+3	; 0x03
 2b6:	8f 7c       	andi	r24, 0xCF	; 207
 2b8:	80 61       	ori	r24, 0x10	; 16
 2ba:	83 83       	std	Z+3, r24	; 0x03
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	86 83       	std	Z+6, r24	; 0x06
 2c0:	17 82       	std	Z+7, r1	; 0x07
 2c2:	84 81       	ldd	r24, Z+4	; 0x04
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	84 83       	std	Z+4, r24	; 0x04
 2c8:	84 81       	ldd	r24, Z+4	; 0x04
 2ca:	88 60       	ori	r24, 0x08	; 8
 2cc:	84 83       	std	Z+4, r24	; 0x04
 2ce:	0f 91       	pop	r16
 2d0:	ef 90       	pop	r14
 2d2:	08 95       	ret

000002d4 <setTimer_Beacon>:
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	97 e2       	ldi	r25, 0x27	; 39
 2d8:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 2dc:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	98 e0       	ldi	r25, 0x08	; 8
 2e6:	0e 94 12 03 	call	0x624	; 0x624 <TC0_SetOverflowIntLevel>
 2ea:	67 e0       	ldi	r22, 0x07	; 7
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	98 e0       	ldi	r25, 0x08	; 8
 2f0:	0e 94 06 03 	call	0x60c	; 0x60c <TC0_ConfigClockSource>
 2f4:	08 95       	ret

000002f6 <setTimer_Tally>:
 2f6:	80 e9       	ldi	r24, 0x90	; 144
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
 2fe:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	80 e4       	ldi	r24, 0x40	; 64
 306:	98 e0       	ldi	r25, 0x08	; 8
 308:	0e 94 18 03 	call	0x630	; 0x630 <TC1_SetOverflowIntLevel>
 30c:	67 e0       	ldi	r22, 0x07	; 7
 30e:	80 e4       	ldi	r24, 0x40	; 64
 310:	98 e0       	ldi	r25, 0x08	; 8
 312:	0e 94 0c 03 	call	0x618	; 0x618 <TC1_ConfigClockSource>
 316:	08 95       	ret

00000318 <sendStatus_RFM>:
 318:	e1 ea       	ldi	r30, 0xA1	; 161
 31a:	f8 e0       	ldi	r31, 0x08	; 8
 31c:	80 81       	ld	r24, Z
 31e:	85 ff       	sbrs	r24, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <sendStatus_RFM+0x4>
 322:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <STATE>
 326:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 32a:	e1 ea       	ldi	r30, 0xA1	; 161
 32c:	f8 e0       	ldi	r31, 0x08	; 8
 32e:	80 81       	ld	r24, Z
 330:	85 ff       	sbrs	r24, 5
 332:	fd cf       	rjmp	.-6      	; 0x32e <sendStatus_RFM+0x16>
 334:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 338:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 33c:	e1 ea       	ldi	r30, 0xA1	; 161
 33e:	f8 e0       	ldi	r31, 0x08	; 8
 340:	80 81       	ld	r24, Z
 342:	85 ff       	sbrs	r24, 5
 344:	fd cf       	rjmp	.-6      	; 0x340 <sendStatus_RFM+0x28>
 346:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <CAM_READY>
 34a:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 34e:	e1 ea       	ldi	r30, 0xA1	; 161
 350:	f8 e0       	ldi	r31, 0x08	; 8
 352:	80 81       	ld	r24, Z
 354:	85 ff       	sbrs	r24, 5
 356:	fd cf       	rjmp	.-6      	; 0x352 <sendStatus_RFM+0x3a>
 358:	81 e6       	ldi	r24, 0x61	; 97
 35a:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 35e:	08 95       	ret

00000360 <sendCharBLT>:
 360:	e1 eb       	ldi	r30, 0xB1	; 177
 362:	f8 e0       	ldi	r31, 0x08	; 8
 364:	90 81       	ld	r25, Z
 366:	95 ff       	sbrs	r25, 5
 368:	fd cf       	rjmp	.-6      	; 0x364 <sendCharBLT+0x4>
 36a:	80 93 b0 08 	sts	0x08B0, r24	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
 36e:	08 95       	ret

00000370 <main>:

int main(void)
{
	setUp_RFM_USART();
 370:	0e 94 18 01 	call	0x230	; 0x230 <setUp_RFM_USART>

	//setUp_PC_USART();
	
	setUp_BLT_USART();
 374:	0e 94 3d 01 	call	0x27a	; 0x27a <setUp_BLT_USART>

	setTimer_Beacon();
 378:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setTimer_Beacon>

	setTimer_Tally();
 37c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <setTimer_Tally>

	// Enable all interrupt levels in PMIC and enable global interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 380:	e0 ea       	ldi	r30, 0xA0	; 160
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	82 81       	ldd	r24, Z+2	; 0x02
 386:	87 60       	ori	r24, 0x07	; 7
 388:	82 83       	std	Z+2, r24	; 0x02
	sei();
 38a:	78 94       	sei

	while (1)
	{
		if (STATE == REFRESH || STATE == CHANGED)
 38c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <STATE>
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	21 f0       	breq	.+8      	; 0x39c <main+0x2c>
 394:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <STATE>
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	21 f4       	brne	.+8      	; 0x3a4 <main+0x34>
		{
			sendStatus_RFM();
 39c:	0e 94 8c 01 	call	0x318	; 0x318 <sendStatus_RFM>
			//sendStatus_BLT();
			STATE = NORMAL;
 3a0:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <STATE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	8f e0       	ldi	r24, 0x0F	; 15
 3a6:	97 e2       	ldi	r25, 0x27	; 39
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x38>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x3e>
 3ae:	00 00       	nop
 3b0:	ed cf       	rjmp	.-38     	; 0x38c <main+0x1c>

000003b2 <__vector_25>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	08 b6       	in	r0, 0x38	; 56
 3be:	0f 92       	push	r0
 3c0:	18 be       	out	0x38, r1	; 56
 3c2:	09 b6       	in	r0, 0x39	; 57
 3c4:	0f 92       	push	r0
 3c6:	19 be       	out	0x39, r1	; 57
 3c8:	0b b6       	in	r0, 0x3b	; 59
 3ca:	0f 92       	push	r0
 3cc:	1b be       	out	0x3b, r1	; 59
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	USART_RXComplete(&USART_data_RFM);
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	90 e2       	ldi	r25, 0x20	; 32
 3ea:	0e 94 45 03 	call	0x68a	; 0x68a <USART_RXComplete>
	
	while(USART_RXBufferData_Available(&USART_data_RFM)){
 3ee:	06 c0       	rjmp	.+12     	; 0x3fc <__vector_25+0x4a>
		sendCharBLT(USART_RXBuffer_GetByte(&USART_data_RFM));
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	90 e2       	ldi	r25, 0x20	; 32
 3f4:	0e 94 37 03 	call	0x66e	; 0x66e <USART_RXBuffer_GetByte>
 3f8:	0e 94 b0 01 	call	0x360	; 0x360 <sendCharBLT>
 */
ISR(USARTC0_RXC_vect)
{
	USART_RXComplete(&USART_data_RFM);
	
	while(USART_RXBufferData_Available(&USART_data_RFM)){
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	90 e2       	ldi	r25, 0x20	; 32
 400:	0e 94 2c 03 	call	0x658	; 0x658 <USART_RXBufferData_Available>
 404:	81 11       	cpse	r24, r1
 406:	f4 cf       	rjmp	.-24     	; 0x3f0 <__vector_25+0x3e>
		sendCharBLT(USART_RXBuffer_GetByte(&USART_data_RFM));
	}
}
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0b be       	out	0x3b, r0	; 59
 424:	0f 90       	pop	r0
 426:	09 be       	out	0x39, r0	; 57
 428:	0f 90       	pop	r0
 42a:	08 be       	out	0x38, r0	; 56
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <__vector_58>:

ISR(USARTE0_RXC_vect)
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	08 b6       	in	r0, 0x38	; 56
 442:	0f 92       	push	r0
 444:	18 be       	out	0x38, r1	; 56
 446:	09 b6       	in	r0, 0x39	; 57
 448:	0f 92       	push	r0
 44a:	19 be       	out	0x39, r1	; 57
 44c:	0b b6       	in	r0, 0x3b	; 59
 44e:	0f 92       	push	r0
 450:	1b be       	out	0x3b, r1	; 59
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	USART_RXComplete(&USART_data_PC);
 46a:	8c e0       	ldi	r24, 0x0C	; 12
 46c:	91 e2       	ldi	r25, 0x21	; 33
 46e:	0e 94 45 03 	call	0x68a	; 0x68a <USART_RXComplete>
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0b be       	out	0x3b, r0	; 59
 48e:	0f 90       	pop	r0
 490:	09 be       	out	0x39, r0	; 57
 492:	0f 90       	pop	r0
 494:	08 be       	out	0x38, r0	; 56
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <__vector_28>:

ISR(USARTC1_RXC_vect)
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	08 b6       	in	r0, 0x38	; 56
 4ac:	0f 92       	push	r0
 4ae:	18 be       	out	0x38, r1	; 56
 4b0:	09 b6       	in	r0, 0x39	; 57
 4b2:	0f 92       	push	r0
 4b4:	19 be       	out	0x39, r1	; 57
 4b6:	0a b6       	in	r0, 0x3a	; 58
 4b8:	0f 92       	push	r0
 4ba:	1a be       	out	0x3a, r1	; 58
 4bc:	0b b6       	in	r0, 0x3b	; 59
 4be:	0f 92       	push	r0
 4c0:	1b be       	out	0x3b, r1	; 59
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
	USART_RXComplete(&USART_data_BLT);
 4de:	83 e1       	ldi	r24, 0x13	; 19
 4e0:	92 e2       	ldi	r25, 0x22	; 34
 4e2:	0e 94 45 03 	call	0x68a	; 0x68a <USART_RXComplete>

	while(USART_RXBufferData_Available(&USART_data_BLT)){

		while (!(USART_IsTXDataRegisterEmpty(&USART_LORA)))
 4e6:	c0 ea       	ldi	r28, 0xA0	; 160
 4e8:	d8 e0       	ldi	r29, 0x08	; 8

ISR(USARTC1_RXC_vect)
{
	USART_RXComplete(&USART_data_BLT);

	while(USART_RXBufferData_Available(&USART_data_BLT)){
 4ea:	08 c0       	rjmp	.+16     	; 0x4fc <__vector_28+0x5c>

		while (!(USART_IsTXDataRegisterEmpty(&USART_LORA)))
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	85 ff       	sbrs	r24, 5
 4f0:	fd cf       	rjmp	.-6      	; 0x4ec <__vector_28+0x4c>
		; //Wait until DATA buffer is empty

		USART_PutChar(&USART_LORA, USART_RXBuffer_GetByte(&USART_data_BLT) );
 4f2:	83 e1       	ldi	r24, 0x13	; 19
 4f4:	92 e2       	ldi	r25, 0x22	; 34
 4f6:	0e 94 37 03 	call	0x66e	; 0x66e <USART_RXBuffer_GetByte>
 4fa:	88 83       	st	Y, r24

ISR(USARTC1_RXC_vect)
{
	USART_RXComplete(&USART_data_BLT);

	while(USART_RXBufferData_Available(&USART_data_BLT)){
 4fc:	83 e1       	ldi	r24, 0x13	; 19
 4fe:	92 e2       	ldi	r25, 0x22	; 34
 500:	0e 94 2c 03 	call	0x658	; 0x658 <USART_RXBufferData_Available>
 504:	81 11       	cpse	r24, r1
 506:	f2 cf       	rjmp	.-28     	; 0x4ec <__vector_28+0x4c>
		; //Wait until DATA buffer is empty

		USART_PutChar(&USART_LORA, USART_RXBuffer_GetByte(&USART_data_BLT) );
		}
	
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	bf 91       	pop	r27
 512:	af 91       	pop	r26
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	7f 91       	pop	r23
 51a:	6f 91       	pop	r22
 51c:	5f 91       	pop	r21
 51e:	4f 91       	pop	r20
 520:	3f 91       	pop	r19
 522:	2f 91       	pop	r18
 524:	0f 90       	pop	r0
 526:	0b be       	out	0x3b, r0	; 59
 528:	0f 90       	pop	r0
 52a:	0a be       	out	0x3a, r0	; 58
 52c:	0f 90       	pop	r0
 52e:	09 be       	out	0x39, r0	; 57
 530:	0f 90       	pop	r0
 532:	08 be       	out	0x38, r0	; 56
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <__vector_20>:
}
*/

// Tell compiler to associate this interrupt handler with the TCC0_OVF_vect vector.
ISR(TCC1_OVF_vect) // TALLY
{
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	08 b6       	in	r0, 0x38	; 56
 54a:	0f 92       	push	r0
 54c:	18 be       	out	0x38, r1	; 56
 54e:	2f 93       	push	r18
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
	uint8_t port_A_temp = PORT_GetPortValue(&PORTA);
 554:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	uint8_t port_B_temp = PORT_GetPortValue(&PORTB);
 558:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>

	if (port_A_temp != port_A || port_B_temp != port_B)
 55c:	20 91 0b 21 	lds	r18, 0x210B	; 0x80210b <port_A>
 560:	82 13       	cpse	r24, r18
 562:	04 c0       	rjmp	.+8      	; 0x56c <__vector_20+0x2e>
 564:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <port_B>
 568:	92 17       	cp	r25, r18
 56a:	c9 f0       	breq	.+50     	; 0x59e <__vector_20+0x60>
	{
		port_A = port_A_temp;
 56c:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <port_A>
		port_B = port_B_temp;
 570:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <port_B>

		CAM_LIVE = ((port_A & 0xC0) >> 2) + port_B;
 574:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <port_A>
 578:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <port_B>
 57c:	80 7c       	andi	r24, 0xC0	; 192
 57e:	86 95       	lsr	r24
 580:	86 95       	lsr	r24
 582:	89 0f       	add	r24, r25
 584:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
		CAM_READY = port_A & 0x3F;
 588:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <port_A>
 58c:	8f 73       	andi	r24, 0x3F	; 63
 58e:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <CAM_READY>

		STATE = CHANGED; //Odoslanie dat pri zmene na portoch
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <STATE>
		TC_Restart(&TCC0);
 598:	88 e0       	ldi	r24, 0x08	; 8
 59a:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
	}
}
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	08 be       	out	0x38, r0	; 56
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <__vector_14>:

ISR(TCC0_OVF_vect) // BEACON
{
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	08 b6       	in	r0, 0x38	; 56
 5be:	0f 92       	push	r0
 5c0:	18 be       	out	0x38, r1	; 56
 5c2:	8f 93       	push	r24
	STATE = REFRESH; //Pravidelne zasielanie dat
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <STATE>
 5ca:	8f 91       	pop	r24
 5cc:	0f 90       	pop	r0
 5ce:	08 be       	out	0x38, r0	; 56
 5d0:	0f 90       	pop	r0
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	0f 90       	pop	r0
 5d6:	1f 90       	pop	r1
 5d8:	18 95       	reti

000005da <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
 5da:	ef 92       	push	r14
 5dc:	0f 93       	push	r16
 5de:	fc 01       	movw	r30, r24
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
 5e0:	0e 29       	or	r16, r14
 5e2:	41 11       	cpse	r20, r1
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <PORT_ConfigurePins+0x10>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <PORT_ConfigurePins+0x12>
 5ea:	80 e8       	ldi	r24, 0x80	; 128
 5ec:	08 2b       	or	r16, r24
 5ee:	21 11       	cpse	r18, r1
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <PORT_ConfigurePins+0x1c>
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <PORT_ConfigurePins+0x1e>
 5f6:	80 e4       	ldi	r24, 0x40	; 64
 5f8:	08 2b       	or	r16, r24
	               (invertEnable ? PORT_INVEN_bm : 0);

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
 5fa:	9f b7       	in	r25, 0x3f	; 63

	cli();
 5fc:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
 5fe:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	port->PIN0CTRL = temp;
 602:	00 8b       	std	Z+16, r16	; 0x10

	/* Restore status register. */
	SREG = sreg;
 604:	9f bf       	out	0x3f, r25	; 63
}
 606:	0f 91       	pop	r16
 608:	ef 90       	pop	r14
 60a:	08 95       	ret

0000060c <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
 60c:	fc 01       	movw	r30, r24
 60e:	90 81       	ld	r25, Z
 610:	90 7f       	andi	r25, 0xF0	; 240
 612:	69 2b       	or	r22, r25
 614:	60 83       	st	Z, r22
 616:	08 95       	ret

00000618 <TC1_ConfigClockSource>:
 618:	fc 01       	movw	r30, r24
 61a:	90 81       	ld	r25, Z
 61c:	90 7f       	andi	r25, 0xF0	; 240
 61e:	69 2b       	or	r22, r25
 620:	60 83       	st	Z, r22
 622:	08 95       	ret

00000624 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
 624:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
 626:	96 81       	ldd	r25, Z+6	; 0x06
 628:	9c 7f       	andi	r25, 0xFC	; 252
 62a:	69 2b       	or	r22, r25
 62c:	66 83       	std	Z+6, r22	; 0x06
 62e:	08 95       	ret

00000630 <TC1_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
 630:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
 632:	96 81       	ldd	r25, Z+6	; 0x06
 634:	9c 7f       	andi	r25, 0xFC	; 252
 636:	69 2b       	or	r22, r25
 638:	66 83       	std	Z+6, r22	; 0x06
 63a:	08 95       	ret

0000063c <USART_InterruptDriver_Initialize>:
		tempCTRLA = usart_data->usart->CTRLA;
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
		usart_data->usart->CTRLA = tempCTRLA;
	}
	return TXBuffer_FreeSpace;
}
 63c:	fc 01       	movw	r30, r24
 63e:	60 83       	st	Z, r22
 640:	71 83       	std	Z+1, r23	; 0x01
 642:	42 83       	std	Z+2, r20	; 0x02
 644:	ec 5f       	subi	r30, 0xFC	; 252
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	10 82       	st	Z, r1
 64a:	31 97       	sbiw	r30, 0x01	; 1
 64c:	10 82       	st	Z, r1
 64e:	33 96       	adiw	r30, 0x03	; 3
 650:	10 82       	st	Z, r1
 652:	31 97       	sbiw	r30, 0x01	; 1
 654:	10 82       	st	Z, r1
 656:	08 95       	ret

00000658 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 658:	fc 01       	movw	r30, r24
 65a:	ed 5f       	subi	r30, 0xFD	; 253
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
 65e:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 660:	31 96       	adiw	r30, 0x01	; 1
 662:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	29 13       	cpse	r18, r25
 668:	01 c0       	rjmp	.+2      	; 0x66c <USART_RXBufferData_Available+0x14>
 66a:	80 e0       	ldi	r24, 0x00	; 0
}
 66c:	08 95       	ret

0000066e <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 66e:	fc 01       	movw	r30, r24
 670:	ec 5f       	subi	r30, 0xFC	; 252
 672:	fe 4f       	sbci	r31, 0xFE	; 254
 674:	20 81       	ld	r18, Z
 676:	dc 01       	movw	r26, r24
 678:	a2 0f       	add	r26, r18
 67a:	b1 1d       	adc	r27, r1
 67c:	13 96       	adiw	r26, 0x03	; 3
 67e:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 680:	90 81       	ld	r25, Z
 682:	9f 5f       	subi	r25, 0xFF	; 255
 684:	9f 77       	andi	r25, 0x7F	; 127
 686:	90 83       	st	Z, r25

	return ans;
}
 688:	08 95       	ret

0000068a <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 68a:	fc 01       	movw	r30, r24
 68c:	ed 5f       	subi	r30, 0xFD	; 253
 68e:	fe 4f       	sbci	r31, 0xFE	; 254
 690:	20 81       	ld	r18, Z
 692:	2f 5f       	subi	r18, 0xFF	; 255
 694:	2f 77       	andi	r18, 0x7F	; 127

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 696:	31 96       	adiw	r30, 0x01	; 1
 698:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
 69a:	dc 01       	movw	r26, r24
 69c:	ed 91       	ld	r30, X+
 69e:	fc 91       	ld	r31, X
 6a0:	11 97       	sbiw	r26, 0x01	; 1
 6a2:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
 6a4:	23 17       	cp	r18, r19
 6a6:	59 f0       	breq	.+22     	; 0x6be <USART_RXComplete+0x34>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 6a8:	fc 01       	movw	r30, r24
 6aa:	ed 5f       	subi	r30, 0xFD	; 253
 6ac:	fe 4f       	sbci	r31, 0xFE	; 254
 6ae:	30 81       	ld	r19, Z
 6b0:	a3 0f       	add	r26, r19
 6b2:	b1 1d       	adc	r27, r1
 6b4:	13 96       	adiw	r26, 0x03	; 3
 6b6:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
 6b8:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 6be:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 6c0:	08 95       	ret

000006c2 <_exit>:
 6c2:	f8 94       	cli

000006c4 <__stop_program>:
 6c4:	ff cf       	rjmp	.-2      	; 0x6c4 <__stop_program>
