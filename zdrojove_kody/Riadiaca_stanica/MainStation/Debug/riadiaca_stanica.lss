
riadiaca_stanica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  0000093e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000499  00802004  00802004  000009d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000623e  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e1d  00000000  00000000  00006ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001152  00000000  00000000  00009ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000658  00000000  00000000  0000ae38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c44  00000000  00000000  0000b490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001090  00000000  00000000  0000f0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00010164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_14>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_20>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_25>
  68:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_26>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_28>
  74:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_29>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_58>
  ec:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_59>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e3       	ldi	r30, 0x3E	; 62
 21c:	f9 e0       	ldi	r31, 0x09	; 9
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a4 30       	cpi	r26, 0x04	; 4
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	24 e2       	ldi	r18, 0x24	; 36
 232:	a4 e0       	ldi	r26, 0x04	; 4
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	ad 39       	cpi	r26, 0x9D	; 157
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
 244:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <init_RFM_UART>:
{
	while (*text)
	{
		RFM_sendChar(*text++);
	}
}
 24c:	e0 e4       	ldi	r30, 0x40	; 64
 24e:	f6 e0       	ldi	r31, 0x06	; 6
 250:	88 e0       	ldi	r24, 0x08	; 8
 252:	81 83       	std	Z+1, r24	; 0x01
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	82 83       	std	Z+2, r24	; 0x02
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	81 83       	std	Z+1, r24	; 0x01
 25c:	86 83       	std	Z+6, r24	; 0x06
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	81 83       	std	Z+1, r24	; 0x01
 262:	86 83       	std	Z+6, r24	; 0x06
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	60 ea       	ldi	r22, 0xA0	; 160
 268:	78 e0       	ldi	r23, 0x08	; 8
 26a:	87 e0       	ldi	r24, 0x07	; 7
 26c:	91 e2       	ldi	r25, 0x21	; 33
 26e:	0e 94 06 04 	call	0x80c	; 0x80c <USART_InterruptDriver_Initialize>
 272:	e0 ea       	ldi	r30, 0xA0	; 160
 274:	f8 e0       	ldi	r31, 0x08	; 8
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	85 83       	std	Z+5, r24	; 0x05
 27a:	83 81       	ldd	r24, Z+3	; 0x03
 27c:	8f 7c       	andi	r24, 0xCF	; 207
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	83 83       	std	Z+3, r24	; 0x03
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	86 83       	std	Z+6, r24	; 0x06
 286:	17 82       	std	Z+7, r1	; 0x07
 288:	84 81       	ldd	r24, Z+4	; 0x04
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	84 83       	std	Z+4, r24	; 0x04
 28e:	84 81       	ldd	r24, Z+4	; 0x04
 290:	88 60       	ori	r24, 0x08	; 8
 292:	84 83       	std	Z+4, r24	; 0x04
 294:	08 95       	ret

00000296 <init_BLT_UART>:
 296:	ef 92       	push	r14
 298:	0f 93       	push	r16
 29a:	e0 e4       	ldi	r30, 0x40	; 64
 29c:	f6 e0       	ldi	r31, 0x06	; 6
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	81 83       	std	Z+1, r24	; 0x01
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	82 83       	std	Z+2, r24	; 0x02
 2a6:	ee 24       	eor	r14, r14
 2a8:	e3 94       	inc	r14
 2aa:	08 e1       	ldi	r16, 0x18	; 24
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	60 e2       	ldi	r22, 0x20	; 32
 2b2:	80 e4       	ldi	r24, 0x40	; 64
 2b4:	96 e0       	ldi	r25, 0x06	; 6
 2b6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <PORT_ConfigurePins>
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	60 eb       	ldi	r22, 0xB0	; 176
 2be:	78 e0       	ldi	r23, 0x08	; 8
 2c0:	86 e9       	ldi	r24, 0x96	; 150
 2c2:	93 e2       	ldi	r25, 0x23	; 35
 2c4:	0e 94 06 04 	call	0x80c	; 0x80c <USART_InterruptDriver_Initialize>
 2c8:	e0 eb       	ldi	r30, 0xB0	; 176
 2ca:	f8 e0       	ldi	r31, 0x08	; 8
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	85 83       	std	Z+5, r24	; 0x05
 2d0:	83 81       	ldd	r24, Z+3	; 0x03
 2d2:	8f 7c       	andi	r24, 0xCF	; 207
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	83 83       	std	Z+3, r24	; 0x03
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	86 83       	std	Z+6, r24	; 0x06
 2dc:	17 82       	std	Z+7, r1	; 0x07
 2de:	84 81       	ldd	r24, Z+4	; 0x04
 2e0:	80 61       	ori	r24, 0x10	; 16
 2e2:	84 83       	std	Z+4, r24	; 0x04
 2e4:	84 81       	ldd	r24, Z+4	; 0x04
 2e6:	88 60       	ori	r24, 0x08	; 8
 2e8:	84 83       	std	Z+4, r24	; 0x04
 2ea:	0f 91       	pop	r16
 2ec:	ef 90       	pop	r14
 2ee:	08 95       	ret

000002f0 <init_beaconMessageTimer>:
 2f0:	80 e1       	ldi	r24, 0x10	; 16
 2f2:	97 e2       	ldi	r25, 0x27	; 39
 2f4:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 2f8:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	98 e0       	ldi	r25, 0x08	; 8
 302:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <TC0_SetOverflowIntLevel>
 306:	67 e0       	ldi	r22, 0x07	; 7
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	98 e0       	ldi	r25, 0x08	; 8
 30c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <TC0_ConfigClockSource>
 310:	08 95       	ret

00000312 <init_gpiControlTimer>:
 312:	80 e9       	ldi	r24, 0x90	; 144
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
 31a:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	80 e4       	ldi	r24, 0x40	; 64
 322:	98 e0       	ldi	r25, 0x08	; 8
 324:	0e 94 00 04 	call	0x800	; 0x800 <TC1_SetOverflowIntLevel>
 328:	67 e0       	ldi	r22, 0x07	; 7
 32a:	80 e4       	ldi	r24, 0x40	; 64
 32c:	98 e0       	ldi	r25, 0x08	; 8
 32e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TC1_ConfigClockSource>
 332:	08 95       	ret

00000334 <sendBuffer_fromBleutoothToRfm>:

/************************************************************************/
/* Forward message from Bluetooth module to RF communication module     */
/************************************************************************/
void sendBuffer_fromBleutoothToRfm(void)
{
 334:	cf 93       	push	r28
	TC_Restart(&TCC0);  //Restart timer for refresh messages
 336:	88 e0       	ldi	r24, 0x08	; 8
 338:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>

	uint8_t i = 0;
 33c:	c0 e0       	ldi	r28, 0x00	; 0
	bool byteToBuffer;
	
	while (i <= RX_BLT_index)	//Send all data from Bluetooth buffer
	{	
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data_RFM, RX_BLT_data[i]); //put data to buffer and get action status
 33e:	ec 2f       	mov	r30, r28
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ea 5e       	subi	r30, 0xEA	; 234
 344:	fc 4d       	sbci	r31, 0xDC	; 220
 346:	60 81       	ld	r22, Z
 348:	87 e0       	ldi	r24, 0x07	; 7
 34a:	91 e2       	ldi	r25, 0x21	; 33
 34c:	0e 94 21 04 	call	0x842	; 0x842 <USART_TXBuffer_PutByte>
		if (byteToBuffer)		//Validation to correct sending
 350:	81 11       	cpse	r24, r1
		{
			i++;				//go to next char
 352:	cf 5f       	subi	r28, 0xFF	; 255
	TC_Restart(&TCC0);  //Restart timer for refresh messages

	uint8_t i = 0;
	bool byteToBuffer;
	
	while (i <= RX_BLT_index)	//Send all data from Bluetooth buffer
 354:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 358:	8c 17       	cp	r24, r28
 35a:	88 f7       	brcc	.-30     	; 0x33e <sendBuffer_fromBleutoothToRfm+0xa>
		if (byteToBuffer)		//Validation to correct sending
		{
			i++;				//go to next char
		}
	}
	RX_BLT_index = 0;			//reset Bluetooh buffer
 35c:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <__data_end>
}
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <sendBuffer_fromRfmToBleutooth>:

/************************************************************************/
/* Forward message from RF communication module to Bluetooth module     */
/************************************************************************/
void sendBuffer_fromRfmToBleutooth(void)
{
 364:	cf 93       	push	r28
	uint8_t i = 0;
 366:	c0 e0       	ldi	r28, 0x00	; 0
	bool byteToBuffer;
	
	while (i <= RX_RFM_index)	//Send all data from RFM buffer
	{
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data_BLT, RX_RFM_data[i]); //put data to buffer and get action status
 368:	ec 2f       	mov	r30, r28
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	e9 5f       	subi	r30, 0xF9	; 249
 36e:	ff 4d       	sbci	r31, 0xDF	; 223
 370:	60 81       	ld	r22, Z
 372:	86 e9       	ldi	r24, 0x96	; 150
 374:	93 e2       	ldi	r25, 0x23	; 35
 376:	0e 94 21 04 	call	0x842	; 0x842 <USART_TXBuffer_PutByte>
		if (byteToBuffer)		//Validation to correct sending
 37a:	81 11       	cpse	r24, r1
		{
			i++;				//go to next char
 37c:	cf 5f       	subi	r28, 0xFF	; 255
void sendBuffer_fromRfmToBleutooth(void)
{
	uint8_t i = 0;
	bool byteToBuffer;
	
	while (i <= RX_RFM_index)	//Send all data from RFM buffer
 37e:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <RX_RFM_index>
 382:	8c 17       	cp	r24, r28
 384:	88 f7       	brcc	.-30     	; 0x368 <sendBuffer_fromRfmToBleutooth+0x4>
		if (byteToBuffer)		//Validation to correct sending
		{
			i++;				//go to next char
		}
	}
	RX_RFM_index = 0;			//reset Bluetooh buffer
 386:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <RX_RFM_index>
}
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <sendMessage_RFM>:
/************************************************************************/
/* Send REFRESH/CHANGE message to signalization unit via RF module   	*/
/************************************************************************/
void sendMessage_RFM(void)
{
 38e:	cf 93       	push	r28
	TC_Restart(&TCC0);			//Restart timer for refresh messages
 390:	88 e0       	ldi	r24, 0x08	; 8
 392:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
	
	uint8_t	i = 0;
 396:	c0 e0       	ldi	r28, 0x00	; 0
	bool byteToBuffer;
	
	while (i < 4) {				//send message_cameraStatus
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data_RFM, message_cameraStatus[i]); //put data to buffer and get action status
 398:	ec 2f       	mov	r30, r28
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	e0 50       	subi	r30, 0x00	; 0
 39e:	f0 4e       	sbci	r31, 0xE0	; 224
 3a0:	60 81       	ld	r22, Z
 3a2:	87 e0       	ldi	r24, 0x07	; 7
 3a4:	91 e2       	ldi	r25, 0x21	; 33
 3a6:	0e 94 21 04 	call	0x842	; 0x842 <USART_TXBuffer_PutByte>
		if(byteToBuffer){
 3aa:	81 11       	cpse	r24, r1
			i++;				//go to next char
 3ac:	cf 5f       	subi	r28, 0xFF	; 255
	TC_Restart(&TCC0);			//Restart timer for refresh messages
	
	uint8_t	i = 0;
	bool byteToBuffer;
	
	while (i < 4) {				//send message_cameraStatus
 3ae:	c4 30       	cpi	r28, 0x04	; 4
 3b0:	98 f3       	brcs	.-26     	; 0x398 <sendMessage_RFM+0xa>
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data_RFM, message_cameraStatus[i]); //put data to buffer and get action status
		if(byteToBuffer){
			i++;				//go to next char
		}
	}
}
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <main>:
/* Main                                                                 */
/************************************************************************/
int main(void)
{		
	//Initialization
	init_RFM_UART();
 3b6:	0e 94 26 01 	call	0x24c	; 0x24c <init_RFM_UART>
	init_BLT_UART();
 3ba:	0e 94 4b 01 	call	0x296	; 0x296 <init_BLT_UART>
	init_beaconMessageTimer();
 3be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <init_beaconMessageTimer>
	init_gpiControlTimer();
 3c2:	0e 94 89 01 	call	0x312	; 0x312 <init_gpiControlTimer>
	
	// Enable all interrupt levels in PMIC and enable global interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 3c6:	e0 ea       	ldi	r30, 0xA0	; 160
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	87 60       	ori	r24, 0x07	; 7
 3ce:	82 83       	std	Z+2, r24	; 0x02
	sei();
 3d0:	78 94       	sei
	
	//Main infinity loop
	while (1)
	{
		//Send Tally camera status or refresh message
		if(message_cameraStatus[0] != NORMAL)  //Control to changed status - REFRESH or CHANGED
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e2       	ldi	r17, 0x20	; 32
 3d6:	f8 01       	movw	r30, r16
 3d8:	80 81       	ld	r24, Z
 3da:	88 23       	and	r24, r24
 3dc:	11 f1       	breq	.+68     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			sendMessage_RFM();				   //send status to cameraman
 3de:	0e 94 c7 01 	call	0x38e	; 0x38e <sendMessage_RFM>
			message_cameraStatus[0] = NORMAL;  //set system status to NORMAL
 3e2:	f8 01       	movw	r30, r16
 3e4:	10 82       	st	Z, r1
 3e6:	1d c0       	rjmp	.+58     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}

		//Forward BLT received data to RF communication module
		while (USART_RXBufferData_Available(&USART_data_BLT)) //Process all available received data from Bluetooth module
		{
			RX_BLT_data[RX_BLT_index] = USART_RXBuffer_GetByte(&USART_data_BLT); //save data in software buffer
 3e8:	c0 91 04 20 	lds	r28, 0x2004	; 0x802004 <__data_end>
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
 3ee:	86 e9       	ldi	r24, 0x96	; 150
 3f0:	93 e2       	ldi	r25, 0x23	; 35
 3f2:	0e 94 4d 04 	call	0x89a	; 0x89a <USART_RXBuffer_GetByte>
 3f6:	ca 5e       	subi	r28, 0xEA	; 234
 3f8:	dc 4d       	sbci	r29, 0xDC	; 220
 3fa:	88 83       	st	Y, r24
			if (RX_BLT_data[RX_BLT_index] == UART_END_CHAR)  //test received data to end of message
 3fc:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 400:	e8 2f       	mov	r30, r24
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	ea 5e       	subi	r30, 0xEA	; 234
 406:	fc 4d       	sbci	r31, 0xDC	; 220
 408:	90 81       	ld	r25, Z
 40a:	9f 3f       	cpi	r25, 0xFF	; 255
 40c:	19 f4       	brne	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			{
				sendBuffer_fromBleutoothToRfm();			//forward message to RFM module
 40e:	0e 94 9a 01 	call	0x334	; 0x334 <sendBuffer_fromBleutoothToRfm>
 412:	07 c0       	rjmp	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			}
			else
			{
				RX_BLT_index++;				
 414:	8f 5f       	subi	r24, 0xFF	; 255
				if(RX_BLT_index >= RX_NUM_BYTES) //control to overflow buffer
 416:	1a f0       	brmi	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			{
				sendBuffer_fromBleutoothToRfm();			//forward message to RFM module
			}
			else
			{
				RX_BLT_index++;				
 418:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <__data_end>
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
				if(RX_BLT_index >= RX_NUM_BYTES) //control to overflow buffer
				{
					RX_BLT_index = 0;
 41e:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <__data_end>
			sendMessage_RFM();				   //send status to cameraman
			message_cameraStatus[0] = NORMAL;  //set system status to NORMAL
		}

		//Forward BLT received data to RF communication module
		while (USART_RXBufferData_Available(&USART_data_BLT)) //Process all available received data from Bluetooth module
 422:	86 e9       	ldi	r24, 0x96	; 150
 424:	93 e2       	ldi	r25, 0x23	; 35
 426:	0e 94 42 04 	call	0x884	; 0x884 <USART_RXBufferData_Available>
 42a:	81 11       	cpse	r24, r1
 42c:	dd cf       	rjmp	.-70     	; 0x3e8 <main+0x32>
 42e:	1f c0       	rjmp	.+62     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		}
	
		//Forward RFM received data to Bluetooth module
		while (USART_RXBufferData_Available(&USART_data_RFM))	//Process all available received data from RFM module
		{
			RX_RFM_data[RX_RFM_index] = USART_RXBuffer_GetByte(&USART_data_RFM); //save data in software buffer
 430:	c0 91 05 20 	lds	r28, 0x2005	; 0x802005 <RX_RFM_index>
 434:	d0 e0       	ldi	r29, 0x00	; 0
 436:	87 e0       	ldi	r24, 0x07	; 7
 438:	91 e2       	ldi	r25, 0x21	; 33
 43a:	0e 94 4d 04 	call	0x89a	; 0x89a <USART_RXBuffer_GetByte>
 43e:	c9 5f       	subi	r28, 0xF9	; 249
 440:	df 4d       	sbci	r29, 0xDF	; 223
 442:	88 83       	st	Y, r24
			if (RX_RFM_data[RX_RFM_index] == UART_END_CHAR)		//test received data to end of message
 444:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <RX_RFM_index>
 448:	e8 2f       	mov	r30, r24
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	e9 5f       	subi	r30, 0xF9	; 249
 44e:	ff 4d       	sbci	r31, 0xDF	; 223
 450:	90 81       	ld	r25, Z
 452:	9f 3f       	cpi	r25, 0xFF	; 255
 454:	19 f4       	brne	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			{
				sendBuffer_fromRfmToBleutooth();				//forward message to Bluetooth module
 456:	0e 94 b2 01 	call	0x364	; 0x364 <sendBuffer_fromRfmToBleutooth>
 45a:	09 c0       	rjmp	.+18     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			}
			else
			{
				RX_RFM_index++;
 45c:	8f 5f       	subi	r24, 0xFF	; 255
 45e:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <RX_RFM_index>
				if(RX_BLT_index >= RX_NUM_BYTES)				//control to overflow buffer
 462:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 466:	88 23       	and	r24, r24
 468:	14 f4       	brge	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
				{
					RX_BLT_index = 0;
 46a:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <__data_end>
				}						
			}
		}
	
		//Forward RFM received data to Bluetooth module
		while (USART_RXBufferData_Available(&USART_data_RFM))	//Process all available received data from RFM module
 46e:	87 e0       	ldi	r24, 0x07	; 7
 470:	91 e2       	ldi	r25, 0x21	; 33
 472:	0e 94 42 04 	call	0x884	; 0x884 <USART_RXBufferData_Available>
 476:	81 11       	cpse	r24, r1
 478:	db cf       	rjmp	.-74     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47a:	87 e8       	ldi	r24, 0x87	; 135
 47c:	93 e1       	ldi	r25, 0x13	; 19
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 484:	00 00       	nop
 486:	a7 cf       	rjmp	.-178    	; 0x3d6 <main+0x20>

00000488 <__vector_25>:

/************************************************************************/
/* UART RFM - Receive complete interrupt service routine				*/
/************************************************************************/
ISR(USARTC0_RXC_vect)
{
 488:	1f 92       	push	r1
 48a:	0f 92       	push	r0
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	0f 92       	push	r0
 490:	11 24       	eor	r1, r1
 492:	08 b6       	in	r0, 0x38	; 56
 494:	0f 92       	push	r0
 496:	18 be       	out	0x38, r1	; 56
 498:	09 b6       	in	r0, 0x39	; 57
 49a:	0f 92       	push	r0
 49c:	19 be       	out	0x39, r1	; 57
 49e:	0b b6       	in	r0, 0x3b	; 59
 4a0:	0f 92       	push	r0
 4a2:	1b be       	out	0x3b, r1	; 59
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	USART_RXComplete(&USART_data_RFM);	//move received data from hardware buffer to software buffer
 4bc:	87 e0       	ldi	r24, 0x07	; 7
 4be:	91 e2       	ldi	r25, 0x21	; 33
 4c0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <USART_RXComplete>
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0b be       	out	0x3b, r0	; 59
 4e0:	0f 90       	pop	r0
 4e2:	09 be       	out	0x39, r0	; 57
 4e4:	0f 90       	pop	r0
 4e6:	08 be       	out	0x38, r0	; 56
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <__vector_58>:

/************************************************************************/
/* UART PC - Receive complete interrupt service routine					*/
/************************************************************************/
ISR(USARTE0_RXC_vect)
{
 4f2:	1f 92       	push	r1
 4f4:	0f 92       	push	r0
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	0f 92       	push	r0
 4fa:	11 24       	eor	r1, r1
 4fc:	08 b6       	in	r0, 0x38	; 56
 4fe:	0f 92       	push	r0
 500:	18 be       	out	0x38, r1	; 56
 502:	09 b6       	in	r0, 0x39	; 57
 504:	0f 92       	push	r0
 506:	19 be       	out	0x39, r1	; 57
 508:	0b b6       	in	r0, 0x3b	; 59
 50a:	0f 92       	push	r0
 50c:	1b be       	out	0x3b, r1	; 59
 50e:	2f 93       	push	r18
 510:	3f 93       	push	r19
 512:	4f 93       	push	r20
 514:	5f 93       	push	r21
 516:	6f 93       	push	r22
 518:	7f 93       	push	r23
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25
 51e:	af 93       	push	r26
 520:	bf 93       	push	r27
 522:	ef 93       	push	r30
 524:	ff 93       	push	r31
	USART_RXComplete(&USART_data_PC);  //move received data from hardware buffer to software buffer
 526:	8f e0       	ldi	r24, 0x0F	; 15
 528:	92 e2       	ldi	r25, 0x22	; 34
 52a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <USART_RXComplete>
}
 52e:	ff 91       	pop	r31
 530:	ef 91       	pop	r30
 532:	bf 91       	pop	r27
 534:	af 91       	pop	r26
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	7f 91       	pop	r23
 53c:	6f 91       	pop	r22
 53e:	5f 91       	pop	r21
 540:	4f 91       	pop	r20
 542:	3f 91       	pop	r19
 544:	2f 91       	pop	r18
 546:	0f 90       	pop	r0
 548:	0b be       	out	0x3b, r0	; 59
 54a:	0f 90       	pop	r0
 54c:	09 be       	out	0x39, r0	; 57
 54e:	0f 90       	pop	r0
 550:	08 be       	out	0x38, r0	; 56
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
 558:	1f 90       	pop	r1
 55a:	18 95       	reti

0000055c <__vector_28>:

/************************************************************************/
/* UART BLT - Receive complete interrupt service routine			    */
/************************************************************************/
ISR(USARTC1_RXC_vect)
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	08 b6       	in	r0, 0x38	; 56
 568:	0f 92       	push	r0
 56a:	18 be       	out	0x38, r1	; 56
 56c:	09 b6       	in	r0, 0x39	; 57
 56e:	0f 92       	push	r0
 570:	19 be       	out	0x39, r1	; 57
 572:	0b b6       	in	r0, 0x3b	; 59
 574:	0f 92       	push	r0
 576:	1b be       	out	0x3b, r1	; 59
 578:	2f 93       	push	r18
 57a:	3f 93       	push	r19
 57c:	4f 93       	push	r20
 57e:	5f 93       	push	r21
 580:	6f 93       	push	r22
 582:	7f 93       	push	r23
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
 588:	af 93       	push	r26
 58a:	bf 93       	push	r27
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
	USART_RXComplete(&USART_data_BLT);  //move received data from hardware buffer to software buffer
 590:	86 e9       	ldi	r24, 0x96	; 150
 592:	93 e2       	ldi	r25, 0x23	; 35
 594:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <USART_RXComplete>
}
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	bf 91       	pop	r27
 59e:	af 91       	pop	r26
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	7f 91       	pop	r23
 5a6:	6f 91       	pop	r22
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0b be       	out	0x3b, r0	; 59
 5b4:	0f 90       	pop	r0
 5b6:	09 be       	out	0x39, r0	; 57
 5b8:	0f 90       	pop	r0
 5ba:	08 be       	out	0x38, r0	; 56
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <__vector_26>:

/************************************************************************/
/* UART RFM - Data register empty interrupt service routine				*/
/************************************************************************/
ISR(USARTC0_DRE_vect)
{
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	08 b6       	in	r0, 0x38	; 56
 5d2:	0f 92       	push	r0
 5d4:	18 be       	out	0x38, r1	; 56
 5d6:	09 b6       	in	r0, 0x39	; 57
 5d8:	0f 92       	push	r0
 5da:	19 be       	out	0x39, r1	; 57
 5dc:	0b b6       	in	r0, 0x3b	; 59
 5de:	0f 92       	push	r0
 5e0:	1b be       	out	0x3b, r1	; 59
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data_RFM);
 5fa:	87 e0       	ldi	r24, 0x07	; 7
 5fc:	91 e2       	ldi	r25, 0x21	; 33
 5fe:	0e 94 77 04 	call	0x8ee	; 0x8ee <USART_DataRegEmpty>
}
 602:	ff 91       	pop	r31
 604:	ef 91       	pop	r30
 606:	bf 91       	pop	r27
 608:	af 91       	pop	r26
 60a:	9f 91       	pop	r25
 60c:	8f 91       	pop	r24
 60e:	7f 91       	pop	r23
 610:	6f 91       	pop	r22
 612:	5f 91       	pop	r21
 614:	4f 91       	pop	r20
 616:	3f 91       	pop	r19
 618:	2f 91       	pop	r18
 61a:	0f 90       	pop	r0
 61c:	0b be       	out	0x3b, r0	; 59
 61e:	0f 90       	pop	r0
 620:	09 be       	out	0x39, r0	; 57
 622:	0f 90       	pop	r0
 624:	08 be       	out	0x38, r0	; 56
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <__vector_59>:

/************************************************************************/
/* UART PC - Data register empty interrupt service routine				*/
/************************************************************************/
ISR(USARTE0_DRE_vect)
{
 630:	1f 92       	push	r1
 632:	0f 92       	push	r0
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	08 b6       	in	r0, 0x38	; 56
 63c:	0f 92       	push	r0
 63e:	18 be       	out	0x38, r1	; 56
 640:	09 b6       	in	r0, 0x39	; 57
 642:	0f 92       	push	r0
 644:	19 be       	out	0x39, r1	; 57
 646:	0b b6       	in	r0, 0x3b	; 59
 648:	0f 92       	push	r0
 64a:	1b be       	out	0x3b, r1	; 59
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data_PC);
 664:	8f e0       	ldi	r24, 0x0F	; 15
 666:	92 e2       	ldi	r25, 0x22	; 34
 668:	0e 94 77 04 	call	0x8ee	; 0x8ee <USART_DataRegEmpty>
}
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	bf 91       	pop	r27
 672:	af 91       	pop	r26
 674:	9f 91       	pop	r25
 676:	8f 91       	pop	r24
 678:	7f 91       	pop	r23
 67a:	6f 91       	pop	r22
 67c:	5f 91       	pop	r21
 67e:	4f 91       	pop	r20
 680:	3f 91       	pop	r19
 682:	2f 91       	pop	r18
 684:	0f 90       	pop	r0
 686:	0b be       	out	0x3b, r0	; 59
 688:	0f 90       	pop	r0
 68a:	09 be       	out	0x39, r0	; 57
 68c:	0f 90       	pop	r0
 68e:	08 be       	out	0x38, r0	; 56
 690:	0f 90       	pop	r0
 692:	0f be       	out	0x3f, r0	; 63
 694:	0f 90       	pop	r0
 696:	1f 90       	pop	r1
 698:	18 95       	reti

0000069a <__vector_29>:

/************************************************************************/
/* UART BLT - Data register empty interrupt service routine			    */
/************************************************************************/
ISR(USARTC1_DRE_vect)
{
 69a:	1f 92       	push	r1
 69c:	0f 92       	push	r0
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	0f 92       	push	r0
 6a2:	11 24       	eor	r1, r1
 6a4:	08 b6       	in	r0, 0x38	; 56
 6a6:	0f 92       	push	r0
 6a8:	18 be       	out	0x38, r1	; 56
 6aa:	09 b6       	in	r0, 0x39	; 57
 6ac:	0f 92       	push	r0
 6ae:	19 be       	out	0x39, r1	; 57
 6b0:	0b b6       	in	r0, 0x3b	; 59
 6b2:	0f 92       	push	r0
 6b4:	1b be       	out	0x3b, r1	; 59
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data_BLT);
 6ce:	86 e9       	ldi	r24, 0x96	; 150
 6d0:	93 e2       	ldi	r25, 0x23	; 35
 6d2:	0e 94 77 04 	call	0x8ee	; 0x8ee <USART_DataRegEmpty>
}
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	bf 91       	pop	r27
 6dc:	af 91       	pop	r26
 6de:	9f 91       	pop	r25
 6e0:	8f 91       	pop	r24
 6e2:	7f 91       	pop	r23
 6e4:	6f 91       	pop	r22
 6e6:	5f 91       	pop	r21
 6e8:	4f 91       	pop	r20
 6ea:	3f 91       	pop	r19
 6ec:	2f 91       	pop	r18
 6ee:	0f 90       	pop	r0
 6f0:	0b be       	out	0x3b, r0	; 59
 6f2:	0f 90       	pop	r0
 6f4:	09 be       	out	0x39, r0	; 57
 6f6:	0f 90       	pop	r0
 6f8:	08 be       	out	0x38, r0	; 56
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <__vector_20>:

/************************************************************************/
/* Interrupt handling for TIMER 1 - check GPI connector changed - TALLY */
/************************************************************************/
ISR(TCC1_OVF_vect) // TALLY
{
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	08 b6       	in	r0, 0x38	; 56
 710:	0f 92       	push	r0
 712:	18 be       	out	0x38, r1	; 56
 714:	0b b6       	in	r0, 0x3b	; 59
 716:	0f 92       	push	r0
 718:	1b be       	out	0x3b, r1	; 59
 71a:	2f 93       	push	r18
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	ef 93       	push	r30
 722:	ff 93       	push	r31
	uint8_t port_A_temp = PORT_GetPortValue(&PORTA);	//read value on port
 724:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	uint8_t port_B_temp = PORT_GetPortValue(&PORTB);	//read value on port
 728:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>

	if (port_A_temp != port_A || port_B_temp != port_B) //compare to change value
 72c:	20 91 0e 22 	lds	r18, 0x220E	; 0x80220e <port_A>
 730:	82 13       	cpse	r24, r18
 732:	04 c0       	rjmp	.+8      	; 0x73c <__vector_20+0x38>
 734:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <port_B>
 738:	92 17       	cp	r25, r18
 73a:	a9 f0       	breq	.+42     	; 0x766 <__vector_20+0x62>
	{
		port_A = port_A_temp;		//save actual state of port
 73c:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <port_A>
		port_B = port_B_temp;		//save actual state of port
 740:	90 93 06 20 	sts	0x2006, r25	; 0x802006 <port_B>

		message_cameraStatus[1] = ((port_A & 0xC0) >> 2) + port_B; 	//set LIVE camera to message with mask - last 2 bits from port A and first 4 bits from port B
 744:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <port_A>
 748:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <port_B>
 74c:	e0 e0       	ldi	r30, 0x00	; 0
 74e:	f0 e2       	ldi	r31, 0x20	; 32
 750:	80 7c       	andi	r24, 0xC0	; 192
 752:	86 95       	lsr	r24
 754:	86 95       	lsr	r24
 756:	89 0f       	add	r24, r25
 758:	81 83       	std	Z+1, r24	; 0x01
		message_cameraStatus[2] = port_A & 0x3F;					//set READY camera to message with mask - just first six port A are for READY signal
 75a:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <port_A>
 75e:	8f 73       	andi	r24, 0x3F	; 63
 760:	82 83       	std	Z+2, r24	; 0x02

		message_cameraStatus[0] = CHANGED; //set message/system status
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	80 83       	st	Z, r24
	}
}
 766:	ff 91       	pop	r31
 768:	ef 91       	pop	r30
 76a:	9f 91       	pop	r25
 76c:	8f 91       	pop	r24
 76e:	2f 91       	pop	r18
 770:	0f 90       	pop	r0
 772:	0b be       	out	0x3b, r0	; 59
 774:	0f 90       	pop	r0
 776:	08 be       	out	0x38, r0	; 56
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_14>:

/************************************************************************/
/* Interrupt handling for TIMER 0 - send refresh message			    */
/************************************************************************/
ISR(TCC0_OVF_vect) 
{
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	08 b6       	in	r0, 0x38	; 56
 78e:	0f 92       	push	r0
 790:	18 be       	out	0x38, r1	; 56
 792:	8f 93       	push	r24
	message_cameraStatus[0] = REFRESH; //set message/system status
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 79a:	8f 91       	pop	r24
 79c:	0f 90       	pop	r0
 79e:	08 be       	out	0x38, r0	; 56
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
 7aa:	ef 92       	push	r14
 7ac:	0f 93       	push	r16
 7ae:	fc 01       	movw	r30, r24
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
 7b0:	0e 29       	or	r16, r14
 7b2:	41 11       	cpse	r20, r1
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <PORT_ConfigurePins+0x10>
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <PORT_ConfigurePins+0x12>
 7ba:	80 e8       	ldi	r24, 0x80	; 128
 7bc:	08 2b       	or	r16, r24
 7be:	21 11       	cpse	r18, r1
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <PORT_ConfigurePins+0x1c>
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <PORT_ConfigurePins+0x1e>
 7c6:	80 e4       	ldi	r24, 0x40	; 64
 7c8:	08 2b       	or	r16, r24
	               (invertEnable ? PORT_INVEN_bm : 0);

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
 7ca:	9f b7       	in	r25, 0x3f	; 63

	cli();
 7cc:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
 7ce:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	port->PIN0CTRL = temp;
 7d2:	00 8b       	std	Z+16, r16	; 0x10

	/* Restore status register. */
	SREG = sreg;
 7d4:	9f bf       	out	0x3f, r25	; 63
}
 7d6:	0f 91       	pop	r16
 7d8:	ef 90       	pop	r14
 7da:	08 95       	ret

000007dc <TC0_ConfigClockSource>:
 7dc:	fc 01       	movw	r30, r24
 7de:	90 81       	ld	r25, Z
 7e0:	90 7f       	andi	r25, 0xF0	; 240
 7e2:	69 2b       	or	r22, r25
 7e4:	60 83       	st	Z, r22
 7e6:	08 95       	ret

000007e8 <TC1_ConfigClockSource>:
 7e8:	fc 01       	movw	r30, r24
 7ea:	90 81       	ld	r25, Z
 7ec:	90 7f       	andi	r25, 0xF0	; 240
 7ee:	69 2b       	or	r22, r25
 7f0:	60 83       	st	Z, r22
 7f2:	08 95       	ret

000007f4 <TC0_SetOverflowIntLevel>:
 7f4:	fc 01       	movw	r30, r24
 7f6:	96 81       	ldd	r25, Z+6	; 0x06
 7f8:	9c 7f       	andi	r25, 0xFC	; 252
 7fa:	69 2b       	or	r22, r25
 7fc:	66 83       	std	Z+6, r22	; 0x06
 7fe:	08 95       	ret

00000800 <TC1_SetOverflowIntLevel>:
 800:	fc 01       	movw	r30, r24
 802:	96 81       	ldd	r25, Z+6	; 0x06
 804:	9c 7f       	andi	r25, 0xFC	; 252
 806:	69 2b       	or	r22, r25
 808:	66 83       	std	Z+6, r22	; 0x06
 80a:	08 95       	ret

0000080c <USART_InterruptDriver_Initialize>:
 80c:	fc 01       	movw	r30, r24
 80e:	60 83       	st	Z, r22
 810:	71 83       	std	Z+1, r23	; 0x01
 812:	42 83       	std	Z+2, r20	; 0x02
 814:	ec 5f       	subi	r30, 0xFC	; 252
 816:	fe 4f       	sbci	r31, 0xFE	; 254
 818:	10 82       	st	Z, r1
 81a:	31 97       	sbiw	r30, 0x01	; 1
 81c:	10 82       	st	Z, r1
 81e:	33 96       	adiw	r30, 0x03	; 3
 820:	10 82       	st	Z, r1
 822:	31 97       	sbiw	r30, 0x01	; 1
 824:	10 82       	st	Z, r1
 826:	08 95       	ret

00000828 <USART_TXBuffer_FreeSpace>:
 828:	fc 01       	movw	r30, r24
 82a:	eb 5f       	subi	r30, 0xFB	; 251
 82c:	fe 4f       	sbci	r31, 0xFE	; 254
 82e:	90 81       	ld	r25, Z
 830:	31 96       	adiw	r30, 0x01	; 1
 832:	20 81       	ld	r18, Z
 834:	9f 5f       	subi	r25, 0xFF	; 255
 836:	9f 77       	andi	r25, 0x7F	; 127
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	92 13       	cpse	r25, r18
 83c:	01 c0       	rjmp	.+2      	; 0x840 <USART_TXBuffer_FreeSpace+0x18>
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	08 95       	ret

00000842 <USART_TXBuffer_PutByte>:
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	ec 01       	movw	r28, r24
 84a:	16 2f       	mov	r17, r22
 84c:	0e 94 14 04 	call	0x828	; 0x828 <USART_TXBuffer_FreeSpace>
 850:	88 23       	and	r24, r24
 852:	a1 f0       	breq	.+40     	; 0x87c <USART_TXBuffer_PutByte+0x3a>
 854:	de 01       	movw	r26, r28
 856:	ab 5f       	subi	r26, 0xFB	; 251
 858:	be 4f       	sbci	r27, 0xFE	; 254
 85a:	9c 91       	ld	r25, X
 85c:	fe 01       	movw	r30, r28
 85e:	e9 0f       	add	r30, r25
 860:	f1 1d       	adc	r31, r1
 862:	ed 57       	subi	r30, 0x7D	; 125
 864:	ff 4f       	sbci	r31, 0xFF	; 255
 866:	10 83       	st	Z, r17
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	9f 77       	andi	r25, 0x7F	; 127
 86c:	9c 93       	st	X, r25
 86e:	e8 81       	ld	r30, Y
 870:	f9 81       	ldd	r31, Y+1	; 0x01
 872:	93 81       	ldd	r25, Z+3	; 0x03
 874:	9c 7f       	andi	r25, 0xFC	; 252
 876:	2a 81       	ldd	r18, Y+2	; 0x02
 878:	92 2b       	or	r25, r18
 87a:	93 83       	std	Z+3, r25	; 0x03
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	08 95       	ret

00000884 <USART_RXBufferData_Available>:
 884:	fc 01       	movw	r30, r24
 886:	ed 5f       	subi	r30, 0xFD	; 253
 888:	fe 4f       	sbci	r31, 0xFE	; 254
 88a:	20 81       	ld	r18, Z
 88c:	31 96       	adiw	r30, 0x01	; 1
 88e:	90 81       	ld	r25, Z
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	29 13       	cpse	r18, r25
 894:	01 c0       	rjmp	.+2      	; 0x898 <USART_RXBufferData_Available+0x14>
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	08 95       	ret

0000089a <USART_RXBuffer_GetByte>:
 89a:	fc 01       	movw	r30, r24
 89c:	ec 5f       	subi	r30, 0xFC	; 252
 89e:	fe 4f       	sbci	r31, 0xFE	; 254
 8a0:	20 81       	ld	r18, Z
 8a2:	dc 01       	movw	r26, r24
 8a4:	a2 0f       	add	r26, r18
 8a6:	b1 1d       	adc	r27, r1
 8a8:	13 96       	adiw	r26, 0x03	; 3
 8aa:	8c 91       	ld	r24, X
 8ac:	90 81       	ld	r25, Z
 8ae:	9f 5f       	subi	r25, 0xFF	; 255
 8b0:	9f 77       	andi	r25, 0x7F	; 127
 8b2:	90 83       	st	Z, r25
 8b4:	08 95       	ret

000008b6 <USART_RXComplete>:
 8b6:	fc 01       	movw	r30, r24
 8b8:	ed 5f       	subi	r30, 0xFD	; 253
 8ba:	fe 4f       	sbci	r31, 0xFE	; 254
 8bc:	20 81       	ld	r18, Z
 8be:	2f 5f       	subi	r18, 0xFF	; 255
 8c0:	2f 77       	andi	r18, 0x7F	; 127
 8c2:	31 96       	adiw	r30, 0x01	; 1
 8c4:	30 81       	ld	r19, Z
 8c6:	dc 01       	movw	r26, r24
 8c8:	ed 91       	ld	r30, X+
 8ca:	fc 91       	ld	r31, X
 8cc:	11 97       	sbiw	r26, 0x01	; 1
 8ce:	40 81       	ld	r20, Z
 8d0:	23 17       	cp	r18, r19
 8d2:	59 f0       	breq	.+22     	; 0x8ea <USART_RXComplete+0x34>
 8d4:	fc 01       	movw	r30, r24
 8d6:	ed 5f       	subi	r30, 0xFD	; 253
 8d8:	fe 4f       	sbci	r31, 0xFE	; 254
 8da:	30 81       	ld	r19, Z
 8dc:	a3 0f       	add	r26, r19
 8de:	b1 1d       	adc	r27, r1
 8e0:	13 96       	adiw	r26, 0x03	; 3
 8e2:	4c 93       	st	X, r20
 8e4:	20 83       	st	Z, r18
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	08 95       	ret
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	08 95       	ret

000008ee <USART_DataRegEmpty>:
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	fc 01       	movw	r30, r24
 8f4:	ea 5f       	subi	r30, 0xFA	; 250
 8f6:	fe 4f       	sbci	r31, 0xFE	; 254
 8f8:	30 81       	ld	r19, Z
 8fa:	31 97       	sbiw	r30, 0x01	; 1
 8fc:	20 81       	ld	r18, Z
 8fe:	32 13       	cpse	r19, r18
 900:	07 c0       	rjmp	.+14     	; 0x910 <USART_DataRegEmpty+0x22>
 902:	dc 01       	movw	r26, r24
 904:	ed 91       	ld	r30, X+
 906:	fc 91       	ld	r31, X
 908:	83 81       	ldd	r24, Z+3	; 0x03
 90a:	8c 7f       	andi	r24, 0xFC	; 252
 90c:	83 83       	std	Z+3, r24	; 0x03
 90e:	12 c0       	rjmp	.+36     	; 0x934 <USART_DataRegEmpty+0x46>
 910:	fc 01       	movw	r30, r24
 912:	ea 5f       	subi	r30, 0xFA	; 250
 914:	fe 4f       	sbci	r31, 0xFE	; 254
 916:	20 81       	ld	r18, Z
 918:	dc 01       	movw	r26, r24
 91a:	a2 0f       	add	r26, r18
 91c:	b1 1d       	adc	r27, r1
 91e:	ad 57       	subi	r26, 0x7D	; 125
 920:	bf 4f       	sbci	r27, 0xFF	; 255
 922:	2c 91       	ld	r18, X
 924:	ec 01       	movw	r28, r24
 926:	a8 81       	ld	r26, Y
 928:	b9 81       	ldd	r27, Y+1	; 0x01
 92a:	2c 93       	st	X, r18
 92c:	80 81       	ld	r24, Z
 92e:	8f 5f       	subi	r24, 0xFF	; 255
 930:	8f 77       	andi	r24, 0x7F	; 127
 932:	80 83       	st	Z, r24
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	08 95       	ret

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
