
cv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000927  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000744  00000000  00000000  00000d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004db  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000182  00000000  00000000  00001e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000201f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  88:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup_GPIO>:
	{
	};
	a = UDR0;
	//USART_send(a);  //echo
	return a;
}
  90:	87 b1       	in	r24, 0x07	; 7
  92:	80 63       	ori	r24, 0x30	; 48
  94:	87 b9       	out	0x07, r24	; 7
  96:	84 b1       	in	r24, 0x04	; 4
  98:	86 60       	ori	r24, 0x06	; 6
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	51 9a       	sbi	0x0a, 1	; 10
  9e:	57 9a       	sbi	0x0a, 7	; 10
  a0:	5a 9a       	sbi	0x0b, 2	; 11
  a2:	55 9a       	sbi	0x0a, 5	; 10
  a4:	56 9a       	sbi	0x0a, 6	; 10
  a6:	57 9a       	sbi	0x0a, 7	; 10
  a8:	5b 98       	cbi	0x0b, 3	; 11
  aa:	5b 98       	cbi	0x0b, 3	; 11
  ac:	29 98       	cbi	0x05, 1	; 5
  ae:	08 95       	ret

000000b0 <setup_T0>:
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	84 bd       	out	0x24, r24	; 36
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	85 bd       	out	0x25, r24	; 37
  b8:	8c e9       	ldi	r24, 0x9C	; 156
  ba:	87 bd       	out	0x27, r24	; 39
  bc:	ee e6       	ldi	r30, 0x6E	; 110
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <setup_USART>:
  c8:	88 e4       	ldi	r24, 0x48	; 72
  ca:	8a b9       	out	0x0a, r24	; 10
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	3a 9a       	sbi	0x07, 2	; 7
  d2:	3b 9a       	sbi	0x07, 3	; 7
  d4:	51 9a       	sbi	0x0a, 1	; 10
  d6:	50 98       	cbi	0x0a, 0	; 10
  d8:	42 98       	cbi	0x08, 2	; 8
  da:	43 98       	cbi	0x08, 3	; 8
  dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  e0:	8b e9       	ldi	r24, 0x9B	; 155
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	e2 ec       	ldi	r30, 0xC2	; 194
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 83       	st	Z, r24
  f0:	e1 ec       	ldi	r30, 0xC1	; 193
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 61       	ori	r24, 0x18	; 24
  f8:	80 83       	st	Z, r24
  fa:	a0 ec       	ldi	r26, 0xC0	; 192
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	8c 91       	ld	r24, X
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8c 93       	st	X, r24
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <USART_send>:
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	95 ff       	sbrs	r25, 5
 114:	fd cf       	rjmp	.-6      	; 0x110 <USART_send+0x4>
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret

0000011e <refresh_LED>:

void refresh_LED()
{
	//Kontrola, ci je kamera LIVE
	if (RX_buffer[1] & CAMERA_MASK)
 11e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <RX_buffer+0x1>
 122:	81 ff       	sbrs	r24, 1
 124:	02 c0       	rjmp	.+4      	; 0x12a <refresh_LED+0xc>
	{
		cbi(PORTD, R_LED);
 126:	5e 98       	cbi	0x0b, 6	; 11
 128:	01 c0       	rjmp	.+2      	; 0x12c <refresh_LED+0xe>
	}
	else
	{
		sbi(PORTD, R_LED);
 12a:	5e 9a       	sbi	0x0b, 6	; 11
	}

	//Kontrola, ci je kamera READY
	if (RX_buffer[2] & CAMERA_MASK)
 12c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RX_buffer+0x2>
 130:	81 ff       	sbrs	r24, 1
 132:	02 c0       	rjmp	.+4      	; 0x138 <refresh_LED+0x1a>
	{
		cbi(PORTD, G_LED);
 134:	5b 98       	cbi	0x0b, 3	; 11
 136:	08 95       	ret
	}
	else
	{
		sbi(PORTD, G_LED);
 138:	5b 9a       	sbi	0x0b, 3	; 11
 13a:	08 95       	ret

0000013c <main>:


int main(void)
{
	//uint8_t a;
	setup_GPIO();
 13c:	0e 94 48 00 	call	0x90	; 0x90 <setup_GPIO>
	setup_USART();
 140:	0e 94 64 00 	call	0xc8	; 0xc8 <setup_USART>
	setup_T0();
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <setup_T0>

	sei();
 148:	78 94       	sei
		else
		{
			cbi(PORTD,R_LED); 
			cbi(PORTD,G_LED);
			
			tbi(PORTB, B_LED);
 14a:	12 e0       	ldi	r17, 0x02	; 2
		{
			//cbi(PORTB,B_LED);
			
			if (new_msg == 1)
			{
				switch (RX_buffer[0]) //delenie cinnosti podla typu spravy
 14c:	ca e0       	ldi	r28, 0x0A	; 10
 14e:	d1 e0       	ldi	r29, 0x01	; 1

	sei();

	while (1)
	{
		if (!watchdog)
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 158:	89 2b       	or	r24, r25
 15a:	e1 f4       	brne	.+56     	; 0x194 <main+0x58>
		{
			//cbi(PORTB,B_LED);
			
			if (new_msg == 1)
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <new_msg>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <new_msg+0x1>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	21 f5       	brne	.+72     	; 0x1b0 <main+0x74>
			{
				switch (RX_buffer[0]) //delenie cinnosti podla typu spravy
 168:	88 81       	ld	r24, Y
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	60 f0       	brcs	.+24     	; 0x186 <main+0x4a>
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	18 f0       	brcs	.+6      	; 0x178 <main+0x3c>
 172:	8d 34       	cpi	r24, 0x4D	; 77
 174:	21 f0       	breq	.+8      	; 0x17e <main+0x42>
 176:	07 c0       	rjmp	.+14     	; 0x186 <main+0x4a>
				{
					//Refresh - zmena stavu kamier
					case 1:
					case 2:
					refresh_LED();
 178:	0e 94 8f 00 	call	0x11e	; 0x11e <refresh_LED>
					break;
 17c:	06 c0       	rjmp	.+12     	; 0x18a <main+0x4e>

					//prisla sprava od rezie
					case 'M':
					USART_send('M');
 17e:	8d e4       	ldi	r24, 0x4D	; 77
 180:	0e 94 86 00 	call	0x10c	; 0x10c <USART_send>
					break;
 184:	02 c0       	rjmp	.+4      	; 0x18a <main+0x4e>

					//ToDo - pripad, co ak prijata sprava  zacina zle...
					default:
					USART_send(RX_buffer[0]);
 186:	0e 94 86 00 	call	0x10c	; 0x10c <USART_send>
				}
				new_msg = 0;
 18a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <new_msg+0x1>
 18e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <new_msg>
 192:	0e c0       	rjmp	.+28     	; 0x1b0 <main+0x74>
			}
		}
		else
		{
			cbi(PORTD,R_LED); 
 194:	5e 98       	cbi	0x0b, 6	; 11
			cbi(PORTD,G_LED);
 196:	5b 98       	cbi	0x0b, 3	; 11
			
			tbi(PORTB, B_LED);
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	81 27       	eor	r24, r17
 19c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f e3       	ldi	r18, 0x3F	; 63
 1a0:	3e e7       	ldi	r19, 0x7E	; 126
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	30 40       	sbci	r19, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x68>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x72>
 1ae:	00 00       	nop
			_delay_ms(150);
		}

		if (system_error)
 1b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <system_error>
 1b4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <system_error+0x1>
 1b8:	89 2b       	or	r24, r25
 1ba:	79 f0       	breq	.+30     	; 0x1da <main+0x9e>
		{
			cli();
 1bc:	f8 94       	cli
			while (1)
			{
				tbi(PORTD, R_LED);
 1be:	90 e4       	ldi	r25, 0x40	; 64
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	89 27       	eor	r24, r25
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	3e e9       	ldi	r19, 0x9E	; 158
 1ca:	84 e2       	ldi	r24, 0x24	; 36
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	30 40       	sbci	r19, 0x00	; 0
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x90>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x9a>
 1d6:	00 00       	nop
 1d8:	f3 cf       	rjmp	.-26     	; 0x1c0 <main+0x84>
 1da:	9f e7       	ldi	r25, 0x7F	; 127
 1dc:	29 ea       	ldi	r18, 0xA9	; 169
 1de:	33 e0       	ldi	r19, 0x03	; 3
 1e0:	91 50       	subi	r25, 0x01	; 1
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	30 40       	sbci	r19, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0xa4>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0xae>
 1ea:	00 00       	nop
 1ec:	b1 cf       	rjmp	.-158    	; 0x150 <main+0x14>

000001ee <__vector_18>:

/********************obsluhy preruseni****************/

//Ukladanie prichadzajucej spravy do zasobnika
ISR(USART_RX_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31

	
	watchdog = 0; // nulovanie chyboveho stavu dispeja
 204:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 208:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	timerx = 0;   // restart casovaca
 20c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timerx+0x1>
 210:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timerx>

	if ((RX_index != USART_BUFFER) && (new_msg == 0))
 214:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RX_index>
 218:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RX_index+0x1>
 21c:	8a 30       	cpi	r24, 0x0A	; 10
 21e:	91 05       	cpc	r25, r1
 220:	f9 f0       	breq	.+62     	; 0x260 <__vector_18+0x72>
 222:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <new_msg>
 226:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <new_msg+0x1>
 22a:	23 2b       	or	r18, r19
 22c:	c9 f4       	brne	.+50     	; 0x260 <__vector_18+0x72>
	{
		RX_buffer[RX_index] = UDR0;
 22e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 232:	fc 01       	movw	r30, r24
 234:	e6 5f       	subi	r30, 0xF6	; 246
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	20 83       	st	Z, r18
		//USART_send(RX_buffer [RX_index]);  //local echo

		if (RX_buffer[RX_index] == USART_END_CHAR) //
 23a:	21 36       	cpi	r18, 0x61	; 97
 23c:	59 f4       	brne	.+22     	; 0x254 <__vector_18+0x66>
		{
			new_msg = 1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <new_msg+0x1>
 246:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <new_msg>
			RX_index = 0;
 24a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <RX_index+0x1>
 24e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <RX_index>
 252:	0c c0       	rjmp	.+24     	; 0x26c <__vector_18+0x7e>
			
		}
		else
		{
			RX_index++;
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RX_index+0x1>
 25a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <RX_index>
 25e:	06 c0       	rjmp	.+12     	; 0x26c <__vector_18+0x7e>
		}
	}
	else
	{
		system_error = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <system_error+0x1>
 268:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <system_error>
	}
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
	if (timerx > 59999)
 292:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timerx>
 296:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timerx+0x1>
 29a:	80 36       	cpi	r24, 0x60	; 96
 29c:	2a ee       	ldi	r18, 0xEA	; 234
 29e:	92 07       	cpc	r25, r18
 2a0:	38 f0       	brcs	.+14     	; 0x2b0 <__vector_14+0x2e>
	timerx = 0; //600 s
	timerx++;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timerx+0x1>
 2aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timerx>
 2ae:	12 c0       	rjmp	.+36     	; 0x2d4 <__vector_14+0x52>
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timerx+0x1>
 2b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timerx>
	if (timerx > 800)
 2ba:	81 32       	cpi	r24, 0x21	; 33
 2bc:	93 40       	sbci	r25, 0x03	; 3
 2be:	50 f0       	brcs	.+20     	; 0x2d4 <__vector_14+0x52>
	{
		watchdog = 1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		timerx = 0;
 2cc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timerx+0x1>
 2d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timerx>
	}
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
