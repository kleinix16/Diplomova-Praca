
cv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00001e46  00001eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040e  0080014c  0080014c  00001f26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002550  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d00  00000000  00000000  000046f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136e  00000000  00000000  000053f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  00006760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000848  00000000  00000000  00006d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159e  00000000  00000000  00007598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00008b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__ctors_end>
       4:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
       8:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
       c:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__vector_3>
      10:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      14:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      18:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      1c:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__vector_7>
      20:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      24:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      28:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      2c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      30:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      34:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      38:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_14>
      3c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      40:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      44:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      48:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_18>
      4c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      50:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      54:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      58:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      5c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      60:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>
      64:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__bad_interrupt>

00000068 <__trampolines_end>:
	...
      70:	00 80       	ld	r0, Z
      72:	c0 e0       	ldi	r28, 0x00	; 0
      74:	f0 f0       	brcs	.+60     	; 0xb2 <__trampolines_end+0x4a>
      76:	f8 f8       	.word	0xf8f8	; ????
      78:	f8 fc       	.word	0xfcf8	; ????
      7a:	fc fc       	.word	0xfcfc	; ????
      7c:	fc fc       	.word	0xfcfc	; ????
      7e:	fc fc       	.word	0xfcfc	; ????
      80:	fc fc       	.word	0xfcfc	; ????
      82:	fc f8       	.word	0xf8fc	; ????
      84:	f8 f8       	.word	0xf8f8	; ????
      86:	f0 f0       	brcs	.+60     	; 0xc4 <__trampolines_end+0x5c>
      88:	e0 c0       	rjmp	.+448    	; 0x24a <__trampolines_end+0x1e2>
      8a:	80 00       	.word	0x0080	; ????
	...
      94:	00 00       	nop
      96:	00 e0       	ldi	r16, 0x00	; 0
      98:	f8 fe       	.word	0xfef8	; ????
      9a:	ff ff       	.word	0xffff	; ????
      9c:	ff ff       	.word	0xffff	; ????
      9e:	ff ff       	.word	0xffff	; ????
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	1f 0f       	add	r17, r31
      a4:	0f 07       	cpc	r16, r31
      a6:	07 07       	cpc	r16, r23
      a8:	07 07       	cpc	r16, r23
      aa:	07 0f       	add	r16, r23
      ac:	0f 1f       	adc	r16, r31
      ae:	7f ff       	.word	0xff7f	; ????
      b0:	ff ff       	.word	0xffff	; ????
      b2:	ff ff       	.word	0xffff	; ????
      b4:	ff ff       	.word	0xffff	; ????
      b6:	fe f8       	.word	0xf8fe	; ????
      b8:	e0 00       	.word	0x00e0	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	ff ff       	.word	0xffff	; ????
      c2:	ff ff       	.word	0xffff	; ????
      c4:	ff ff       	.word	0xffff	; ????
      c6:	ff ff       	.word	0xffff	; ????
      c8:	ff ff       	.word	0xffff	; ????
      ca:	1f 00       	.word	0x001f	; ????
	...
      d8:	80 8f       	std	Z+24, r24	; 0x18
      da:	ff ff       	.word	0xffff	; ????
      dc:	ff ff       	.word	0xffff	; ????
      de:	ff ff       	.word	0xffff	; ????
      e0:	ff ff       	.word	0xffff	; ????
      e2:	ff ff       	.word	0xffff	; ????
      e4:	80 00       	.word	0x0080	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	ff ff       	.word	0xffff	; ????
      ec:	ff ff       	.word	0xffff	; ????
      ee:	ff ff       	.word	0xffff	; ????
      f0:	ff ff       	.word	0xffff	; ????
      f2:	ff ff       	.word	0xffff	; ????
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	80 c0       	rjmp	.+256    	; 0x1fa <__trampolines_end+0x192>
      fa:	e0 e0       	ldi	r30, 0x00	; 0
      fc:	f0 f8       	bld	r15, 0
      fe:	fc fc       	.word	0xfcfc	; ????
     100:	fe ff       	.word	0xfffe	; ????
     102:	7f 3f       	cpi	r23, 0xFF	; 255
     104:	ff ff       	.word	0xffff	; ????
     106:	ff ff       	.word	0xffff	; ????
     108:	ff ff       	.word	0xffff	; ????
     10a:	ff ff       	.word	0xffff	; ????
     10c:	ff ff       	.word	0xffff	; ????
     10e:	ff 00       	.word	0x00ff	; ????
     110:	00 00       	nop
     112:	00 00       	nop
     114:	ff ff       	.word	0xffff	; ????
     116:	ff ff       	.word	0xffff	; ????
     118:	ff ff       	.word	0xffff	; ????
     11a:	ff ff       	.word	0xffff	; ????
     11c:	ff ff       	.word	0xffff	; ????
     11e:	fc fe       	.word	0xfefc	; ????
     120:	ff 7f       	andi	r31, 0xFF	; 255
     122:	3f 1f       	adc	r19, r31
     124:	1f 0f       	add	r17, r31
     126:	07 07       	cpc	r16, r23
     128:	03 01       	movw	r0, r6
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	ff ff       	.word	0xffff	; ????
     130:	ff ff       	.word	0xffff	; ????
     132:	ff ff       	.word	0xffff	; ????
     134:	ff ff       	.word	0xffff	; ????
     136:	ff ff       	.word	0xffff	; ????
     138:	ff 00       	.word	0x00ff	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	7f ff       	.word	0xff7f	; ????
     140:	ff ff       	.word	0xffff	; ????
     142:	ff ff       	.word	0xffff	; ????
     144:	ff ff       	.word	0xffff	; ????
     146:	ff ff       	.word	0xffff	; ????
     148:	fd 00       	.word	0x00fd	; ????
	...
     156:	00 f8       	bld	r0, 0
     158:	ff ff       	.word	0xffff	; ????
     15a:	ff ff       	.word	0xffff	; ????
     15c:	ff ff       	.word	0xffff	; ????
     15e:	ff ff       	.word	0xffff	; ????
     160:	ff 7f       	andi	r31, 0xFF	; 255
     162:	00 00       	nop
     164:	00 00       	nop
     166:	00 00       	nop
     168:	00 03       	mulsu	r16, r16
     16a:	0f 3f       	cpi	r16, 0xFF	; 255
     16c:	7f ff       	.word	0xff7f	; ????
     16e:	ff ff       	.word	0xffff	; ????
     170:	ff ff       	.word	0xffff	; ????
     172:	ff ff       	.word	0xffff	; ????
     174:	fc f8       	.word	0xf8fc	; ????
     176:	f8 f0       	brcs	.+62     	; 0x1b6 <__trampolines_end+0x14e>
     178:	f0 f0       	brcs	.+60     	; 0x1b6 <__trampolines_end+0x14e>
     17a:	f0 f0       	brcs	.+60     	; 0x1b8 <__trampolines_end+0x150>
     17c:	f0 f8       	bld	r15, 0
     17e:	f8 fc       	.word	0xfcf8	; ????
     180:	ff ff       	.word	0xffff	; ????
     182:	ff ff       	.word	0xffff	; ????
     184:	ff ff       	.word	0xffff	; ????
     186:	ff 7f       	andi	r31, 0xFF	; 255
     188:	3f 0f       	add	r19, r31
     18a:	03 00       	.word	0x0003	; ????
	...
     198:	01 03       	mulsu	r16, r17
     19a:	07 07       	cpc	r16, r23
     19c:	0f 0f       	add	r16, r31
     19e:	0f 1f       	adc	r16, r31
     1a0:	1f 1f       	adc	r17, r31
     1a2:	1f 1f       	adc	r17, r31
     1a4:	1f 1f       	adc	r17, r31
     1a6:	1f 1f       	adc	r17, r31
     1a8:	1f 0f       	add	r17, r31
     1aa:	0f 0f       	add	r16, r31
     1ac:	07 07       	cpc	r16, r23
     1ae:	03 01       	movw	r0, r6
	...
     1c8:	00 00       	nop
     1ca:	80 80       	ld	r8, Z
     1cc:	c0 c0       	rjmp	.+384    	; 0x34e <__trampolines_end+0x2e6>
     1ce:	c0 e0       	ldi	r28, 0x00	; 0
     1d0:	e0 e0       	ldi	r30, 0x00	; 0
     1d2:	f0 f0       	brcs	.+60     	; 0x210 <__trampolines_end+0x1a8>
     1d4:	f0 f8       	bld	r15, 0
	...
     1e6:	00 f0       	brcs	.+0      	; 0x1e8 <__trampolines_end+0x180>
     1e8:	f8 f8       	.word	0xf8f8	; ????
     1ea:	f8 fc       	.word	0xfcf8	; ????
     1ec:	fc fc       	.word	0xfcfc	; ????
     1ee:	fe fe       	.word	0xfefe	; ????
     1f0:	fe ff       	.word	0xfffe	; ????
     1f2:	ff ff       	.word	0xffff	; ????
     1f4:	ff ff       	.word	0xffff	; ????
     1f6:	ff ff       	.word	0xffff	; ????
     1f8:	ff ff       	.word	0xffff	; ????
     1fa:	ff ff       	.word	0xffff	; ????
     1fc:	ff ff       	.word	0xffff	; ????
     1fe:	ff ff       	.word	0xffff	; ????
	...
     210:	00 3f       	cpi	r16, 0xF0	; 240
     212:	1f 1f       	adc	r17, r31
     214:	0f 0f       	add	r16, r31
     216:	07 07       	cpc	r16, r23
     218:	07 03       	mulsu	r16, r23
     21a:	03 03       	mulsu	r16, r19
     21c:	01 01       	movw	r0, r2
     21e:	01 ff       	sbrs	r16, 1
     220:	ff ff       	.word	0xffff	; ????
     222:	ff ff       	.word	0xffff	; ????
     224:	ff ff       	.word	0xffff	; ????
     226:	ff ff       	.word	0xffff	; ????
     228:	ff ff       	.word	0xffff	; ????
	...
     246:	00 00       	nop
     248:	00 ff       	sbrs	r16, 0
     24a:	ff ff       	.word	0xffff	; ????
     24c:	ff ff       	.word	0xffff	; ????
     24e:	ff ff       	.word	0xffff	; ????
     250:	ff ff       	.word	0xffff	; ????
     252:	ff ff       	.word	0xffff	; ????
	...
     270:	00 00       	nop
     272:	00 ff       	sbrs	r16, 0
     274:	ff ff       	.word	0xffff	; ????
     276:	ff ff       	.word	0xffff	; ????
     278:	ff ff       	.word	0xffff	; ????
     27a:	ff ff       	.word	0xffff	; ????
     27c:	ff ff       	.word	0xffff	; ????
	...
     29a:	00 00       	nop
     29c:	00 ff       	sbrs	r16, 0
     29e:	ff ff       	.word	0xffff	; ????
     2a0:	ff ff       	.word	0xffff	; ????
     2a2:	ff ff       	.word	0xffff	; ????
     2a4:	ff ff       	.word	0xffff	; ????
     2a6:	ff ff       	.word	0xffff	; ????
	...
     2c4:	00 00       	nop
     2c6:	00 ff       	sbrs	r16, 0
     2c8:	ff ff       	.word	0xffff	; ????
     2ca:	ff ff       	.word	0xffff	; ????
     2cc:	ff ff       	.word	0xffff	; ????
     2ce:	ff ff       	.word	0xffff	; ????
     2d0:	ff ff       	.word	0xffff	; ????
	...
     2ee:	00 00       	nop
     2f0:	00 0f       	add	r16, r16
     2f2:	0f 0f       	add	r16, r31
     2f4:	0f 0f       	add	r16, r31
     2f6:	0f 0f       	add	r16, r31
     2f8:	0f 0f       	add	r16, r31
     2fa:	0f 0f       	add	r16, r31
	...
     30c:	00 00       	nop
     30e:	80 c0       	rjmp	.+256    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     310:	c0 e0       	ldi	r28, 0x00	; 0
     312:	f0 f0       	brcs	.+60     	; 0x350 <__trampolines_end+0x2e8>
     314:	f0 f8       	bld	r15, 0
     316:	f8 f8       	.word	0xf8f8	; ????
     318:	fc fc       	.word	0xfcfc	; ????
     31a:	fc fc       	.word	0xfcfc	; ????
     31c:	fc fc       	.word	0xfcfc	; ????
     31e:	fc fc       	.word	0xfcfc	; ????
     320:	fc fc       	.word	0xfcfc	; ????
     322:	f8 f8       	.word	0xf8f8	; ????
     324:	f8 f0       	brcs	.+62     	; 0x364 <__trampolines_end+0x2fc>
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	e0 c0       	rjmp	.+448    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     32a:	80 00       	.word	0x0080	; ????
     32c:	00 00       	nop
     32e:	00 00       	nop
     330:	00 00       	nop
     332:	00 80       	ld	r0, Z
     334:	e0 f8       	bld	r14, 0
     336:	fe ff       	.word	0xfffe	; ????
     338:	ff ff       	.word	0xffff	; ????
     33a:	ff ff       	.word	0xffff	; ????
     33c:	ff ff       	.word	0xffff	; ????
     33e:	7f 3f       	cpi	r23, 0xFF	; 255
     340:	1f 0f       	add	r17, r31
     342:	07 07       	cpc	r16, r23
     344:	07 07       	cpc	r16, r23
     346:	07 07       	cpc	r16, r23
     348:	07 07       	cpc	r16, r23
     34a:	0f 0f       	add	r16, r31
     34c:	3f 7f       	andi	r19, 0xFF	; 255
     34e:	ff ff       	.word	0xffff	; ????
     350:	ff ff       	.word	0xffff	; ????
     352:	ff ff       	.word	0xffff	; ????
     354:	ff ff       	.word	0xffff	; ????
     356:	fc f0       	brlt	.+62     	; 0x396 <__trampolines_end+0x32e>
     358:	80 00       	.word	0x0080	; ????
     35a:	00 00       	nop
     35c:	00 0f       	add	r16, r16
     35e:	0f 0f       	add	r16, r31
     360:	0f 0f       	add	r16, r31
     362:	0f 0f       	add	r16, r31
     364:	0f 0f       	add	r16, r31
     366:	0f 0f       	add	r16, r31
	...
     374:	00 00       	nop
     376:	00 c0       	rjmp	.+0      	; 0x378 <__trampolines_end+0x310>
     378:	ff ff       	.word	0xffff	; ????
     37a:	ff ff       	.word	0xffff	; ????
     37c:	ff ff       	.word	0xffff	; ????
     37e:	ff ff       	.word	0xffff	; ????
     380:	ff ff       	.word	0xffff	; ????
     382:	3f 00       	.word	0x003f	; ????
	...
     398:	00 00       	nop
     39a:	00 80       	ld	r0, Z
     39c:	c0 e0       	ldi	r28, 0x00	; 0
     39e:	f8 fc       	.word	0xfcf8	; ????
     3a0:	ff ff       	.word	0xffff	; ????
     3a2:	ff ff       	.word	0xffff	; ????
     3a4:	ff ff       	.word	0xffff	; ????
     3a6:	ff ff       	.word	0xffff	; ????
     3a8:	7f 1f       	adc	r23, r31
     3aa:	07 01       	movw	r0, r14
	...
     3bc:	00 00       	nop
     3be:	80 c0       	rjmp	.+256    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     3c0:	e0 f0       	brcs	.+56     	; 0x3fa <__trampolines_end+0x392>
     3c2:	fc fe       	.word	0xfefc	; ????
     3c4:	ff ff       	.word	0xffff	; ????
     3c6:	ff ff       	.word	0xffff	; ????
     3c8:	ff ff       	.word	0xffff	; ????
     3ca:	ff 7f       	andi	r31, 0xFF	; 255
     3cc:	3f 1f       	adc	r19, r31
     3ce:	07 03       	mulsu	r16, r23
     3d0:	01 00       	.word	0x0001	; ????
	...
     3de:	00 00       	nop
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <__trampolines_end+0x37a>
     3e2:	e0 f0       	brcs	.+56     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3e4:	f8 fc       	.word	0xfcf8	; ????
     3e6:	fe ff       	.word	0xfffe	; ????
     3e8:	ff ff       	.word	0xffff	; ????
     3ea:	ff ff       	.word	0xffff	; ????
     3ec:	ff 7f       	andi	r31, 0xFF	; 255
     3ee:	3f 1f       	adc	r19, r31
     3f0:	0f 07       	cpc	r16, r31
     3f2:	03 01       	movw	r0, r6
	...
     404:	00 00       	nop
     406:	f0 f8       	bld	r15, 0
     408:	fc fe       	.word	0xfefc	; ????
     40a:	ff ff       	.word	0xffff	; ????
     40c:	ff ff       	.word	0xffff	; ????
     40e:	ff ff       	.word	0xffff	; ????
     410:	ff ff       	.word	0xffff	; ????
     412:	ff ff       	.word	0xffff	; ????
     414:	fb f9       	.word	0xf9fb	; ????
     416:	f8 f8       	.word	0xf8f8	; ????
     418:	f8 f8       	.word	0xf8f8	; ????
     41a:	f8 f8       	.word	0xf8f8	; ????
     41c:	f8 f8       	.word	0xf8f8	; ????
     41e:	f8 f8       	.word	0xf8f8	; ????
     420:	f8 f8       	.word	0xf8f8	; ????
     422:	f8 f8       	.word	0xf8f8	; ????
     424:	f8 f8       	.word	0xf8f8	; ????
     426:	f8 f8       	.word	0xf8f8	; ????
     428:	f8 f8       	.word	0xf8f8	; ????
     42a:	f8 f8       	.word	0xf8f8	; ????
     42c:	f8 00       	.word	0x00f8	; ????
     42e:	00 00       	nop
     430:	0f 0f       	add	r16, r31
     432:	0f 0f       	add	r16, r31
     434:	0f 0f       	add	r16, r31
     436:	0f 0f       	add	r16, r31
     438:	0f 0f       	add	r16, r31
     43a:	0f 0f       	add	r16, r31
     43c:	0f 0f       	add	r16, r31
     43e:	0f 0f       	add	r16, r31
     440:	0f 0f       	add	r16, r31
     442:	0f 0f       	add	r16, r31
     444:	0f 0f       	add	r16, r31
     446:	0f 0f       	add	r16, r31
     448:	0f 0f       	add	r16, r31
     44a:	0f 0f       	add	r16, r31
     44c:	0f 0f       	add	r16, r31
     44e:	0f 0f       	add	r16, r31
     450:	0f 0f       	add	r16, r31
     452:	0f 0f       	add	r16, r31
     454:	0f 0f       	add	r16, r31
     456:	0f 00       	.word	0x000f	; ????
     458:	00 00       	nop
     45a:	00 00       	nop
     45c:	00 00       	nop
     45e:	00 80       	ld	r0, Z
     460:	c0 e0       	ldi	r28, 0x00	; 0
     462:	e0 f0       	brcs	.+56     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     464:	f0 f8       	bld	r15, 0
     466:	f8 f8       	.word	0xf8f8	; ????
     468:	fc fc       	.word	0xfcfc	; ????
     46a:	fc fc       	.word	0xfcfc	; ????
     46c:	fc fc       	.word	0xfcfc	; ????
     46e:	fc fc       	.word	0xfcfc	; ????
     470:	fc fc       	.word	0xfcfc	; ????
     472:	f8 f8       	.word	0xf8f8	; ????
     474:	f8 f8       	.word	0xf8f8	; ????
     476:	f0 f0       	brcs	.+60     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     478:	e0 e0       	ldi	r30, 0x00	; 0
     47a:	c0 80       	ld	r12, Z
	...
     484:	00 f0       	brcs	.+0      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     486:	fc fe       	.word	0xfefc	; ????
     488:	ff ff       	.word	0xffff	; ????
     48a:	ff ff       	.word	0xffff	; ????
     48c:	ff ff       	.word	0xffff	; ????
     48e:	ff ff       	.word	0xffff	; ????
     490:	3f 1f       	adc	r19, r31
     492:	0f 07       	cpc	r16, r31
     494:	07 07       	cpc	r16, r23
     496:	07 07       	cpc	r16, r23
     498:	07 07       	cpc	r16, r23
     49a:	07 0f       	add	r16, r23
     49c:	0f 1f       	adc	r16, r31
     49e:	7f ff       	.word	0xff7f	; ????
     4a0:	ff ff       	.word	0xffff	; ????
     4a2:	ff ff       	.word	0xffff	; ????
     4a4:	ff ff       	.word	0xffff	; ????
     4a6:	ff fe       	.word	0xfeff	; ????
     4a8:	f8 c0       	rjmp	.+496    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     4aa:	00 00       	nop
     4ac:	00 00       	nop
     4ae:	03 03       	mulsu	r16, r19
     4b0:	03 03       	mulsu	r16, r19
     4b2:	03 03       	mulsu	r16, r19
     4b4:	03 03       	mulsu	r16, r19
     4b6:	03 03       	mulsu	r16, r19
     4b8:	03 00       	.word	0x0003	; ????
	...
     4c6:	00 00       	nop
     4c8:	c0 ff       	sbrs	r28, 0
     4ca:	ff ff       	.word	0xffff	; ????
     4cc:	ff ff       	.word	0xffff	; ????
     4ce:	ff ff       	.word	0xffff	; ????
     4d0:	ff ff       	.word	0xffff	; ????
     4d2:	ff 3f       	cpi	r31, 0xFF	; 255
	...
     4e4:	f8 f8       	.word	0xf8f8	; ????
     4e6:	f8 f8       	.word	0xf8f8	; ????
     4e8:	f8 f8       	.word	0xf8f8	; ????
     4ea:	f8 f8       	.word	0xf8f8	; ????
     4ec:	f8 f8       	.word	0xf8f8	; ????
     4ee:	fc fc       	.word	0xfcfc	; ????
     4f0:	fe ff       	.word	0xfffe	; ????
     4f2:	ff ff       	.word	0xffff	; ????
     4f4:	ff ff       	.word	0xffff	; ????
     4f6:	7f 3f       	cpi	r23, 0xFF	; 255
     4f8:	1f 1f       	adc	r17, r31
     4fa:	0f 03       	fmul	r16, r23
     4fc:	01 00       	.word	0x0001	; ????
	...
     50e:	0f 0f       	add	r16, r31
     510:	0f 0f       	add	r16, r31
     512:	0f 0f       	add	r16, r31
     514:	0f 0f       	add	r16, r31
     516:	0f 0f       	add	r16, r31
     518:	0f 1f       	adc	r16, r31
     51a:	1f 3f       	cpi	r17, 0xFF	; 255
     51c:	7f ff       	.word	0xff7f	; ????
     51e:	ff ff       	.word	0xffff	; ????
     520:	ff ff       	.word	0xffff	; ????
     522:	fe fe       	.word	0xfefe	; ????
     524:	fc f8       	.word	0xf8fc	; ????
     526:	f0 c0       	rjmp	.+480    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     528:	00 00       	nop
     52a:	00 00       	nop
     52c:	e0 e0       	ldi	r30, 0x00	; 0
     52e:	e0 e0       	ldi	r30, 0x00	; 0
     530:	e0 e0       	ldi	r30, 0x00	; 0
     532:	e0 e0       	ldi	r30, 0x00	; 0
     534:	e0 e0       	ldi	r30, 0x00	; 0
     536:	e0 00       	.word	0x00e0	; ????
	...
     544:	00 00       	nop
     546:	00 81       	ld	r16, Z
     548:	ff ff       	.word	0xffff	; ????
     54a:	ff ff       	.word	0xffff	; ????
     54c:	ff ff       	.word	0xffff	; ????
     54e:	ff ff       	.word	0xffff	; ????
     550:	ff ff       	.word	0xffff	; ????
     552:	fe 00       	.word	0x00fe	; ????
     554:	00 00       	nop
     556:	03 0f       	add	r16, r19
     558:	3f 7f       	andi	r19, 0xFF	; 255
     55a:	ff ff       	.word	0xffff	; ????
     55c:	ff ff       	.word	0xffff	; ????
     55e:	ff ff       	.word	0xffff	; ????
     560:	ff ff       	.word	0xffff	; ????
     562:	fc f8       	.word	0xf8fc	; ????
     564:	f8 f0       	brcs	.+62     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     566:	f0 f0       	brcs	.+60     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     568:	f0 f0       	brcs	.+60     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     56a:	f0 f0       	brcs	.+60     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     56c:	f0 f8       	bld	r15, 0
     56e:	f8 fc       	.word	0xfcf8	; ????
     570:	fe ff       	.word	0xfffe	; ????
     572:	ff ff       	.word	0xffff	; ????
     574:	ff ff       	.word	0xffff	; ????
     576:	ff ff       	.word	0xffff	; ????
     578:	7f 3f       	cpi	r23, 0xFF	; 255
     57a:	1f 07       	cpc	r17, r31
	...
     584:	00 01       	movw	r0, r0
     586:	03 03       	mulsu	r16, r19
     588:	07 07       	cpc	r16, r23
     58a:	0f 0f       	add	r16, r31
     58c:	0f 0f       	add	r16, r31
     58e:	1f 1f       	adc	r17, r31
     590:	1f 1f       	adc	r17, r31
     592:	1f 1f       	adc	r17, r31
     594:	1f 1f       	adc	r17, r31
     596:	1f 1f       	adc	r17, r31
     598:	0f 0f       	add	r16, r31
     59a:	0f 0f       	add	r16, r31
     59c:	07 07       	cpc	r16, r23
     59e:	03 03       	mulsu	r16, r19
     5a0:	01 00       	.word	0x0001	; ????
	...
     5ba:	00 00       	nop
     5bc:	00 80       	ld	r0, Z
     5be:	c0 f0       	brcs	.+48     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     5c0:	f8 f8       	.word	0xf8f8	; ????
     5c2:	f8 f8       	.word	0xf8f8	; ????
     5c4:	f8 f8       	.word	0xf8f8	; ????
     5c6:	f8 f8       	.word	0xf8f8	; ????
     5c8:	f8 f8       	.word	0xf8f8	; ????
     5ca:	f8 00       	.word	0x00f8	; ????
	...
     5e0:	00 00       	nop
     5e2:	80 c0       	rjmp	.+256    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     5e4:	f0 f8       	bld	r15, 0
     5e6:	fe ff       	.word	0xfffe	; ????
     5e8:	ff ff       	.word	0xffff	; ????
     5ea:	ff ff       	.word	0xffff	; ????
     5ec:	ff ff       	.word	0xffff	; ????
     5ee:	ff ff       	.word	0xffff	; ????
     5f0:	ff ff       	.word	0xffff	; ????
     5f2:	ff ff       	.word	0xffff	; ????
     5f4:	ff 00       	.word	0x00ff	; ????
	...
     606:	00 80       	ld	r0, Z
     608:	c0 f0       	brcs	.+48     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     60a:	fc fe       	.word	0xfefc	; ????
     60c:	ff ff       	.word	0xffff	; ????
     60e:	ff ff       	.word	0xffff	; ????
     610:	ff 7f       	andi	r31, 0xFF	; 255
     612:	1f 07       	cpc	r17, r31
     614:	ff ff       	.word	0xffff	; ????
     616:	ff ff       	.word	0xffff	; ????
     618:	ff ff       	.word	0xffff	; ????
     61a:	ff ff       	.word	0xffff	; ????
     61c:	ff ff       	.word	0xffff	; ????
     61e:	ff 00       	.word	0x00ff	; ????
	...
     62c:	80 c0       	rjmp	.+256    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
     62e:	f0 fc       	sbrc	r15, 0
     630:	fe ff       	.word	0xfffe	; ????
     632:	ff ff       	.word	0xffff	; ????
     634:	ff ff       	.word	0xffff	; ????
     636:	3f 1f       	adc	r19, r31
     638:	07 03       	mulsu	r16, r23
     63a:	00 00       	nop
     63c:	00 00       	nop
     63e:	ff ff       	.word	0xffff	; ????
     640:	ff ff       	.word	0xffff	; ????
     642:	ff ff       	.word	0xffff	; ????
     644:	ff ff       	.word	0xffff	; ????
     646:	ff ff       	.word	0xffff	; ????
     648:	ff 00       	.word	0x00ff	; ????
     64a:	00 00       	nop
     64c:	00 00       	nop
     64e:	00 00       	nop
     650:	00 80       	ld	r0, Z
     652:	c0 f0       	brcs	.+48     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     654:	fc fe       	.word	0xfefc	; ????
     656:	ff ff       	.word	0xffff	; ????
     658:	ff ff       	.word	0xffff	; ????
     65a:	ff bf       	out	0x3f, r31	; 63
     65c:	9f 87       	std	Y+15, r25	; 0x0f
     65e:	81 80       	ldd	r8, Z+1	; 0x01
     660:	80 80       	ld	r8, Z
     662:	80 80       	ld	r8, Z
     664:	80 80       	ld	r8, Z
     666:	80 80       	ld	r8, Z
     668:	ff ff       	.word	0xffff	; ????
     66a:	ff ff       	.word	0xffff	; ????
     66c:	ff ff       	.word	0xffff	; ????
     66e:	ff ff       	.word	0xffff	; ????
     670:	ff ff       	.word	0xffff	; ????
     672:	ff 80       	ldd	r15, Y+7	; 0x07
     674:	80 80       	ld	r8, Z
     676:	80 80       	ld	r8, Z
     678:	80 80       	ld	r8, Z
     67a:	0e ff       	.word	0xff0e	; ????
     67c:	ff ff       	.word	0xffff	; ????
     67e:	ff ff       	.word	0xffff	; ????
     680:	ff ff       	.word	0xffff	; ????
     682:	ff ff       	.word	0xffff	; ????
     684:	ff ff       	.word	0xffff	; ????
     686:	ff ff       	.word	0xffff	; ????
     688:	ff ff       	.word	0xffff	; ????
     68a:	ff ff       	.word	0xffff	; ????
     68c:	ff ff       	.word	0xffff	; ????
     68e:	ff ff       	.word	0xffff	; ????
     690:	ff ff       	.word	0xffff	; ????
     692:	ff ff       	.word	0xffff	; ????
     694:	ff ff       	.word	0xffff	; ????
     696:	ff ff       	.word	0xffff	; ????
     698:	ff ff       	.word	0xffff	; ????
     69a:	ff ff       	.word	0xffff	; ????
     69c:	ff ff       	.word	0xffff	; ????
     69e:	ff ff       	.word	0xffff	; ????
     6a0:	ff ff       	.word	0xffff	; ????
     6a2:	ff ff       	.word	0xffff	; ????
	...
     6bc:	ff ff       	.word	0xffff	; ????
     6be:	ff ff       	.word	0xffff	; ????
     6c0:	ff ff       	.word	0xffff	; ????
     6c2:	ff ff       	.word	0xffff	; ????
     6c4:	ff ff       	.word	0xffff	; ????
     6c6:	ff 00       	.word	0x00ff	; ????
	...
     6e4:	00 00       	nop
     6e6:	0f 0f       	add	r16, r31
     6e8:	0f 0f       	add	r16, r31
     6ea:	0f 0f       	add	r16, r31
     6ec:	0f 0f       	add	r16, r31
     6ee:	0f 0f       	add	r16, r31
     6f0:	0f 00       	.word	0x000f	; ????
	...
     6fe:	00 f8       	bld	r0, 0
     700:	f8 f8       	.word	0xf8f8	; ????
     702:	f8 f8       	.word	0xf8f8	; ????
     704:	f8 f8       	.word	0xf8f8	; ????
     706:	f8 f8       	.word	0xf8f8	; ????
     708:	f8 f8       	.word	0xf8f8	; ????
     70a:	f8 f8       	.word	0xf8f8	; ????
     70c:	f8 f8       	.word	0xf8f8	; ????
     70e:	f8 f8       	.word	0xf8f8	; ????
     710:	f8 f8       	.word	0xf8f8	; ????
     712:	f8 f8       	.word	0xf8f8	; ????
     714:	f8 f8       	.word	0xf8f8	; ????
     716:	f8 f8       	.word	0xf8f8	; ????
     718:	f8 f8       	.word	0xf8f8	; ????
     71a:	f8 f8       	.word	0xf8f8	; ????
     71c:	f8 f8       	.word	0xf8f8	; ????
     71e:	f8 00       	.word	0x00f8	; ????
	...
     728:	fc ff       	.word	0xfffc	; ????
     72a:	ff ff       	.word	0xffff	; ????
     72c:	ff ff       	.word	0xffff	; ????
     72e:	ff ff       	.word	0xffff	; ????
     730:	ff ff       	.word	0xffff	; ????
     732:	0f 0f       	add	r16, r31
     734:	0f 0f       	add	r16, r31
     736:	0f 0f       	add	r16, r31
     738:	0f 0f       	add	r16, r31
     73a:	0f 0f       	add	r16, r31
     73c:	0f 0f       	add	r16, r31
     73e:	0f 0f       	add	r16, r31
     740:	0f 0f       	add	r16, r31
     742:	0f 0f       	add	r16, r31
     744:	0f 0f       	add	r16, r31
     746:	0f 0f       	add	r16, r31
     748:	0f 00       	.word	0x000f	; ????
     74a:	00 00       	nop
     74c:	00 00       	nop
     74e:	00 00       	nop
     750:	00 f8       	bld	r0, 0
     752:	ff ff       	.word	0xffff	; ????
     754:	ff ff       	.word	0xffff	; ????
     756:	ff ff       	.word	0xffff	; ????
     758:	ff ff       	.word	0xffff	; ????
     75a:	ff 07       	cpc	r31, r31
     75c:	00 00       	nop
     75e:	00 80       	ld	r0, Z
     760:	80 80       	ld	r8, Z
     762:	80 80       	ld	r8, Z
     764:	80 80       	ld	r8, Z
     766:	80 80       	ld	r8, Z
	...
     778:	00 00       	nop
     77a:	e0 ff       	sbrs	r30, 0
     77c:	ff ff       	.word	0xffff	; ????
     77e:	ff ff       	.word	0xffff	; ????
     780:	ff ff       	.word	0xffff	; ????
     782:	ff ff       	.word	0xffff	; ????
     784:	ff fe       	.word	0xfeff	; ????
     786:	fe ff       	.word	0xfffe	; ????
     788:	ff ff       	.word	0xffff	; ????
     78a:	ff ff       	.word	0xffff	; ????
     78c:	ff ff       	.word	0xffff	; ????
     78e:	ff ff       	.word	0xffff	; ????
     790:	ff ff       	.word	0xffff	; ????
     792:	ff ff       	.word	0xffff	; ????
     794:	ff fe       	.word	0xfeff	; ????
     796:	fe fc       	.word	0xfcfe	; ????
     798:	fc f8       	.word	0xf8fc	; ????
     79a:	f0 c0       	rjmp	.+480    	; 0x97c <__stack+0x7d>
     79c:	80 00       	.word	0x0080	; ????
     79e:	00 00       	nop
     7a0:	00 00       	nop
     7a2:	00 00       	nop
     7a4:	01 01       	movw	r0, r2
     7a6:	01 03       	mulsu	r16, r17
     7a8:	03 03       	mulsu	r16, r19
     7aa:	03 07       	cpc	r16, r19
     7ac:	07 03       	mulsu	r16, r23
     7ae:	01 01       	movw	r0, r2
	...
     7b8:	00 01       	movw	r0, r0
     7ba:	03 03       	mulsu	r16, r19
     7bc:	0f 3f       	cpi	r16, 0xFF	; 255
     7be:	ff ff       	.word	0xffff	; ????
     7c0:	ff ff       	.word	0xffff	; ????
     7c2:	ff ff       	.word	0xffff	; ????
     7c4:	ff ff       	.word	0xffff	; ????
     7c6:	ff fc       	.word	0xfcff	; ????
     7c8:	c0 00       	.word	0x00c0	; ????
     7ca:	00 00       	nop
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	e0 e0       	ldi	r30, 0x00	; 0
     7d0:	e0 e0       	ldi	r30, 0x00	; 0
     7d2:	e0 e0       	ldi	r30, 0x00	; 0
     7d4:	e0 e0       	ldi	r30, 0x00	; 0
     7d6:	e0 c0       	rjmp	.+448    	; 0x998 <__stack+0x99>
	...
     7e4:	00 00       	nop
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     7e8:	ff ff       	.word	0xffff	; ????
     7ea:	ff ff       	.word	0xffff	; ????
     7ec:	ff ff       	.word	0xffff	; ????
     7ee:	ff ff       	.word	0xffff	; ????
     7f0:	ff ff       	.word	0xffff	; ????
     7f2:	1f 00       	.word	0x001f	; ????
     7f4:	00 00       	nop
     7f6:	00 03       	mulsu	r16, r16
     7f8:	0f 1f       	adc	r16, r31
     7fa:	7f ff       	.word	0xff7f	; ????
     7fc:	ff ff       	.word	0xffff	; ????
     7fe:	ff ff       	.word	0xffff	; ????
     800:	ff ff       	.word	0xffff	; ????
     802:	fe fc       	.word	0xfcfe	; ????
     804:	f8 f8       	.word	0xf8f8	; ????
     806:	f0 f0       	brcs	.+60     	; 0x844 <__LOCK_REGION_LENGTH__+0x444>
     808:	f0 f0       	brcs	.+60     	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
     80a:	f0 f0       	brcs	.+60     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     80c:	f0 f8       	bld	r15, 0
     80e:	f8 fc       	.word	0xfcf8	; ????
     810:	ff ff       	.word	0xffff	; ????
     812:	ff ff       	.word	0xffff	; ????
     814:	ff ff       	.word	0xffff	; ????
     816:	ff ff       	.word	0xffff	; ????
     818:	7f 3f       	cpi	r23, 0xFF	; 255
     81a:	0f 03       	fmul	r16, r23
	...
     824:	00 00       	nop
     826:	01 01       	movw	r0, r2
     828:	03 07       	cpc	r16, r19
     82a:	07 07       	cpc	r16, r23
     82c:	0f 0f       	add	r16, r31
     82e:	0f 1f       	adc	r16, r31
     830:	1f 1f       	adc	r17, r31
     832:	1f 1f       	adc	r17, r31
     834:	1f 1f       	adc	r17, r31
     836:	1f 1f       	adc	r17, r31
     838:	1f 0f       	add	r17, r31
     83a:	0f 0f       	add	r16, r31
     83c:	07 07       	cpc	r16, r23
     83e:	03 03       	mulsu	r16, r19
     840:	01 00       	.word	0x0001	; ????
	...
     852:	00 00       	nop
     854:	00 80       	ld	r0, Z
     856:	80 c0       	rjmp	.+256    	; 0x958 <__stack+0x59>
     858:	e0 e0       	ldi	r30, 0x00	; 0
     85a:	f0 f0       	brcs	.+60     	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
     85c:	f0 f8       	bld	r15, 0
     85e:	f8 f8       	.word	0xf8f8	; ????
     860:	f8 fc       	.word	0xfcf8	; ????
     862:	fc fc       	.word	0xfcfc	; ????
     864:	fc fc       	.word	0xfcfc	; ????
     866:	fc fc       	.word	0xfcfc	; ????
	...
     878:	80 c0       	rjmp	.+256    	; 0x97a <__stack+0x7b>
     87a:	f0 f8       	bld	r15, 0
     87c:	fc fe       	.word	0xfefc	; ????
     87e:	ff ff       	.word	0xffff	; ????
     880:	ff ff       	.word	0xffff	; ????
     882:	ff ff       	.word	0xffff	; ????
     884:	7f 7f       	andi	r23, 0xFF	; 255
     886:	3f 1f       	adc	r19, r31
     888:	1f 0f       	add	r17, r31
     88a:	0f 0f       	add	r16, r31
     88c:	07 07       	cpc	r16, r23
     88e:	07 07       	cpc	r16, r23
     890:	07 07       	cpc	r16, r23
	...
     89e:	00 80       	ld	r0, Z
     8a0:	f0 fe       	sbrs	r15, 0
     8a2:	ff ff       	.word	0xffff	; ????
     8a4:	ff ff       	.word	0xffff	; ????
     8a6:	ff ff       	.word	0xffff	; ????
     8a8:	ff ff       	.word	0xffff	; ????
     8aa:	3f 07       	cpc	r19, r31
     8ac:	03 00       	.word	0x0003	; ????
     8ae:	00 80       	ld	r0, Z
     8b0:	80 80       	ld	r8, Z
     8b2:	c0 c0       	rjmp	.+384    	; 0xa34 <__stack+0x135>
     8b4:	c0 c0       	rjmp	.+384    	; 0xa36 <__stack+0x137>
     8b6:	c0 c0       	rjmp	.+384    	; 0xa38 <__stack+0x139>
     8b8:	80 80       	ld	r8, Z
     8ba:	80 00       	.word	0x0080	; ????
	...
     8c8:	f0 ff       	sbrs	r31, 0
     8ca:	ff ff       	.word	0xffff	; ????
     8cc:	ff ff       	.word	0xffff	; ????
     8ce:	ff ff       	.word	0xffff	; ????
     8d0:	ff ff       	.word	0xffff	; ????
     8d2:	ff f9       	.word	0xf9ff	; ????
     8d4:	fc fe       	.word	0xfefc	; ????
     8d6:	fe ff       	.word	0xfffe	; ????
     8d8:	7f 7f       	andi	r23, 0xFF	; 255
     8da:	7f 7f       	andi	r23, 0xFF	; 255
     8dc:	7f 7f       	andi	r23, 0xFF	; 255
     8de:	ff ff       	.word	0xffff	; ????
     8e0:	ff ff       	.word	0xffff	; ????
     8e2:	ff ff       	.word	0xffff	; ????
     8e4:	ff ff       	.word	0xffff	; ????
     8e6:	ff fe       	.word	0xfeff	; ????
     8e8:	fc fc       	.word	0xfcfc	; ????
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 00       	.word	0x0080	; ????
     8ee:	00 00       	nop
     8f0:	00 00       	nop
     8f2:	ff ff       	.word	0xffff	; ????
     8f4:	ff ff       	.word	0xffff	; ????
     8f6:	ff ff       	.word	0xffff	; ????
     8f8:	ff ff       	.word	0xffff	; ????
     8fa:	ff ff       	.word	0xffff	; ????
     8fc:	ff 0f       	add	r31, r31
     8fe:	03 01       	movw	r0, r6
	...
     908:	00 00       	nop
     90a:	01 03       	mulsu	r16, r17
     90c:	07 1f       	adc	r16, r23
     90e:	ff ff       	.word	0xffff	; ????
     910:	ff ff       	.word	0xffff	; ????
     912:	ff ff       	.word	0xffff	; ????
     914:	ff ff       	.word	0xffff	; ????
     916:	ff fe       	.word	0xfeff	; ????
     918:	e0 00       	.word	0x00e0	; ????
     91a:	00 00       	nop
     91c:	07 7f       	andi	r16, 0xF7	; 247
     91e:	ff ff       	.word	0xffff	; ????
     920:	ff ff       	.word	0xffff	; ????
     922:	ff ff       	.word	0xffff	; ????
     924:	ff ff       	.word	0xffff	; ????
     926:	ff e0       	ldi	r31, 0x0F	; 15
	...
     934:	00 00       	nop
     936:	00 c0       	rjmp	.+0      	; 0x938 <__stack+0x39>
     938:	ff ff       	.word	0xffff	; ????
     93a:	ff ff       	.word	0xffff	; ????
     93c:	ff ff       	.word	0xffff	; ????
     93e:	ff ff       	.word	0xffff	; ????
     940:	ff ff       	.word	0xffff	; ????
     942:	3f 00       	.word	0x003f	; ????
     944:	00 00       	nop
     946:	00 00       	nop
     948:	03 0f       	add	r16, r19
     94a:	1f 7f       	andi	r17, 0xFF	; 255
     94c:	ff ff       	.word	0xffff	; ????
     94e:	ff ff       	.word	0xffff	; ????
     950:	ff ff       	.word	0xffff	; ????
     952:	ff fe       	.word	0xfeff	; ????
     954:	fc f8       	.word	0xf8fc	; ????
     956:	f0 f0       	brcs	.+60     	; 0x994 <__stack+0x95>
     958:	f0 f0       	brcs	.+60     	; 0x996 <__stack+0x97>
     95a:	f0 f0       	brcs	.+60     	; 0x998 <__stack+0x99>
     95c:	f0 f8       	bld	r15, 0
     95e:	f8 fc       	.word	0xfcf8	; ????
     960:	ff ff       	.word	0xffff	; ????
     962:	ff ff       	.word	0xffff	; ????
     964:	ff ff       	.word	0xffff	; ????
     966:	ff ff       	.word	0xffff	; ????
     968:	7f 1f       	adc	r23, r31
     96a:	0f 01       	movw	r0, r30
	...
     974:	00 00       	nop
     976:	00 01       	movw	r0, r0
     978:	01 03       	mulsu	r16, r17
     97a:	07 07       	cpc	r16, r23
     97c:	0f 0f       	add	r16, r31
     97e:	0f 1f       	adc	r16, r31
     980:	1f 1f       	adc	r17, r31
     982:	1f 1f       	adc	r17, r31
     984:	1f 1f       	adc	r17, r31
     986:	1f 1f       	adc	r17, r31
     988:	1f 0f       	add	r17, r31
     98a:	0f 0f       	add	r16, r31
     98c:	07 07       	cpc	r16, r23
     98e:	03 01       	movw	r0, r6
     990:	01 00       	.word	0x0001	; ????
	...
     a16:	00 00       	nop
     a18:	00 f0       	brcs	.+0      	; 0xa1a <__stack+0x11b>
     a1a:	f0 f0       	brcs	.+60     	; 0xa58 <__stack+0x159>
     a1c:	f0 f0       	brcs	.+60     	; 0xa5a <__stack+0x15b>
     a1e:	f0 f0       	brcs	.+60     	; 0xa5c <__stack+0x15d>
     a20:	f0 f0       	brcs	.+60     	; 0xa5e <__stack+0x15f>
     a22:	f0 f0       	brcs	.+60     	; 0xa60 <__stack+0x161>
     a24:	f0 f0       	brcs	.+60     	; 0xa62 <__stack+0x163>
     a26:	f0 f0       	brcs	.+60     	; 0xa64 <__stack+0x165>
     a28:	f0 f0       	brcs	.+60     	; 0xa66 <__stack+0x167>
     a2a:	f0 f0       	brcs	.+60     	; 0xa68 <__stack+0x169>
     a2c:	f0 f0       	brcs	.+60     	; 0xa6a <__stack+0x16b>
     a2e:	f0 f0       	brcs	.+60     	; 0xa6c <__stack+0x16d>
     a30:	f0 f0       	brcs	.+60     	; 0xa6e <__stack+0x16f>
     a32:	f0 f0       	brcs	.+60     	; 0xa70 <__stack+0x171>
     a34:	f0 f0       	brcs	.+60     	; 0xa72 <__stack+0x173>
     a36:	f0 f0       	brcs	.+60     	; 0xa74 <__stack+0x175>
     a38:	f0 f0       	brcs	.+60     	; 0xa76 <__stack+0x177>
     a3a:	f0 f0       	brcs	.+60     	; 0xa78 <__stack+0x179>
     a3c:	f0 00       	.word	0x00f0	; ????
     a3e:	00 00       	nop
     a40:	00 00       	nop
     a42:	00 0f       	add	r16, r16
     a44:	0f 0f       	add	r16, r31
     a46:	0f 0f       	add	r16, r31
     a48:	0f 0f       	add	r16, r31
     a4a:	0f 0f       	add	r16, r31
     a4c:	0f 0f       	add	r16, r31
     a4e:	0f 0f       	add	r16, r31
     a50:	0f 0f       	add	r16, r31
     a52:	0f 0f       	add	r16, r31
     a54:	0f 0f       	add	r16, r31
     a56:	0f 0f       	add	r16, r31
     a58:	0f 0f       	add	r16, r31
     a5a:	0f 0f       	add	r16, r31
     a5c:	0f 0f       	add	r16, r31
     a5e:	0f 0f       	add	r16, r31
     a60:	0f 0f       	add	r16, r31
     a62:	0f 0f       	add	r16, r31
     a64:	0f 0f       	add	r16, r31
     a66:	0f 00       	.word	0x000f	; ????
	...

00000ae8 <myFont>:
	...
     af0:	00 00 5f 00 00 00 00 00 00 00 07 00 07 00 00 00     .._.............
     b00:	00 14 7f 14 7f 14 00 00 00 24 2a 7f 2a 12 00 00     .........$*.*...
     b10:	00 23 13 08 64 62 00 00 00 36 49 55 22 50 00 00     .#..db...6IU"P..
     b20:	00 00 05 03 00 00 00 00 00 1c 22 41 00 00 00 00     .........."A....
     b30:	00 41 22 1c 00 00 00 00 00 08 2a 1c 2a 08 00 00     .A".......*.*...
     b40:	00 08 08 3e 08 08 00 00 00 a0 60 00 00 00 00 00     ...>......`.....
     b50:	00 08 08 08 08 08 00 00 00 60 60 00 00 00 00 00     .........``.....
     b60:	00 20 10 08 04 02 00 00 00 3e 51 49 45 3e 00 00     . .......>QIE>..
     b70:	00 00 42 7f 40 00 00 00 00 62 51 49 49 46 00 00     ..B.@....bQIIF..
     b80:	00 22 41 49 49 36 00 00 00 18 14 12 7f 10 00 00     ."AII6..........
     b90:	00 27 45 45 45 39 00 00 00 3c 4a 49 49 30 00 00     .'EEE9...<JII0..
     ba0:	00 01 71 09 05 03 00 00 00 36 49 49 49 36 00 00     ..q......6III6..
     bb0:	00 06 49 49 29 1e 00 00 00 00 36 36 00 00 00 00     ..II).....66....
     bc0:	00 00 ac 6c 00 00 00 00 00 08 14 22 41 00 00 00     ...l......."A...
     bd0:	00 14 14 14 14 14 00 00 00 41 22 14 08 00 00 00     .........A".....
     be0:	00 02 01 51 09 06 00 00 00 32 49 79 41 3e 00 00     ...Q.....2IyA>..
     bf0:	00 7e 09 09 09 7e 00 00 00 7f 49 49 49 36 00 00     .~...~....III6..
     c00:	00 3e 41 41 41 22 00 00 00 7f 41 41 22 1c 00 00     .>AAA"....AA"...
     c10:	00 7f 49 49 49 41 00 00 00 7f 09 09 09 01 00 00     ..IIIA..........
     c20:	00 3e 41 41 51 72 00 00 00 7f 08 08 08 7f 00 00     .>AAQr..........
     c30:	00 41 7f 41 00 00 00 00 00 20 40 41 3f 01 00 00     .A.A..... @A?...
     c40:	00 7f 08 14 22 41 00 00 00 7f 40 40 40 40 00 00     ...."A....@@@@..
     c50:	00 7f 02 0c 02 7f 00 00 00 7f 04 08 10 7f 00 00     ................
     c60:	00 3e 41 41 41 3e 00 00 00 7f 09 09 09 06 00 00     .>AAA>..........
     c70:	00 3e 41 51 21 5e 00 00 00 7f 09 19 29 46 00 00     .>AQ!^......)F..
     c80:	00 26 49 49 49 32 00 00 00 01 01 7f 01 01 00 00     .&III2..........
     c90:	00 3f 40 40 40 3f 00 00 00 1f 20 40 20 1f 00 00     .?@@@?.... @ ...
     ca0:	00 3f 40 38 40 3f 00 00 00 63 14 08 14 63 00 00     .?@8@?...c...c..
     cb0:	00 03 04 78 04 03 00 00 00 61 51 49 45 43 00 00     ...x.....aQIEC..
     cc0:	00 7f 41 41 00 00 00 00 00 02 04 08 10 20 00 00     ..AA......... ..
     cd0:	00 41 41 7f 00 00 00 00 00 04 02 01 02 04 00 00     .AA.............
     ce0:	00 80 80 80 80 80 00 00 00 01 02 04 00 00 00 00     ................
     cf0:	00 20 54 54 54 78 00 00 00 7f 48 44 44 38 00 00     . TTTx....HDD8..
     d00:	00 38 44 44 28 00 00 00 00 38 44 44 48 7f 00 00     .8DD(....8DDH...
     d10:	00 38 54 54 54 18 00 00 00 08 7e 09 02 00 00 00     .8TTT.....~.....
     d20:	00 18 a4 a4 a4 7c 00 00 00 7f 08 04 04 78 00 00     .....|.......x..
     d30:	00 00 7d 00 00 00 00 00 00 80 84 7d 00 00 00 00     ..}........}....
     d40:	00 7f 10 28 44 00 00 00 00 41 7f 40 00 00 00 00     ...(D....A.@....
     d50:	00 7c 04 18 04 78 00 00 00 7c 08 04 7c 00 00 00     .|...x...|..|...
     d60:	00 38 44 44 38 00 00 00 00 fc 24 24 18 00 00 00     .8DD8.....$$....
     d70:	00 18 24 24 fc 00 00 00 00 00 7c 08 04 00 00 00     ..$$......|.....
     d80:	00 48 54 54 24 00 00 00 00 04 7f 44 00 00 00 00     .HTT$......D....
     d90:	00 3c 40 40 7c 00 00 00 00 1c 20 40 20 1c 00 00     .<@@|..... @ ...
     da0:	00 3c 40 30 40 3c 00 00 00 44 28 10 28 44 00 00     .<@0@<...D(.(D..
     db0:	00 1c a0 a0 7c 00 00 00 00 44 64 54 4c 44 00 00     ....|....DdTLD..
     dc0:	00 08 36 41 00 00 00 00 00 00 7f 00 00 00 00 00     ..6A............
     dd0:	00 41 36 08 00 00 00 00 00 02 01 01 02 01 00 00     .A6.............
     de0:	00 02 05 05 02 00 00 00                             ........

00000de8 <bigNumbers>:
     de8:	00 00 00 c0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
     df8:	f0 f0 f0 e0 c0 00 00 00 00 00 00 ff ff ff ff 01     ................
	...
     e10:	01 ff ff ff ff 00 00 00 00 00 00 ff ff ff ff 80     ................
	...
     e28:	80 ff ff ff ff 00 00 00 00 00 00 03 07 0f 0f 0f     ................
     e38:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 03 00 00 00     ................
	...
     e54:	00 00 e0 f0 f0 e0 00 00 00 00 00 00 00 00 00 00     ................
	...
     e6c:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     e84:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     e9c:	00 00 03 07 07 03 00 00 00 00 00 00 00 00 00 e0     ................
     eac:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
     ebc:	00 00 00 00 00 00 00 81 c1 c0 c0 c0 c0 c0 c0 c0     ................
     ecc:	c0 c0 c0 e1 ff ff ff ff 00 00 00 00 00 00 00 ff     ................
     edc:	ff ff ff 87 03 03 03 03 03 03 03 03 03 03 83 81     ................
     eec:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
     efc:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
     f0c:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
     f1c:	00 00 00 00 00 00 00 81 c1 c0 c0 c0 c0 c0 c0 c0     ................
     f2c:	c0 c0 c0 e1 ff ff ff 7f 00 00 00 00 00 00 00 81     ................
     f3c:	83 03 03 03 03 03 03 03 03 03 03 87 ff ff ff fe     ................
     f4c:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
     f5c:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
     f6c:	f0 f0 f0 30 00 00 00 00 00 00 00 30 f0 f0 f0 e0     ...0.......0....
     f7c:	00 00 00 00 00 00 00 ff ff ff ff e0 c0 c0 c0 c0     ................
     f8c:	c0 c0 c0 e0 ff ff ff ff 00 00 00 00 00 00 00 01     ................
     f9c:	03 03 03 03 03 03 03 03 03 03 03 07 ff ff ff ff     ................
	...
     fbc:	00 00 00 0c 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
     fcc:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
     fdc:	00 00 00 00 00 00 00 ff ff ff ff e1 c0 c0 c0 c0     ................
     fec:	c0 c0 c0 c0 c0 c0 c1 81 00 00 00 00 00 00 00 81     ................
     ffc:	83 03 03 03 03 03 03 03 03 03 03 87 ff ff ff ff     ................
    100c:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    101c:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
    102c:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
    103c:	00 00 00 00 00 00 00 ff ff ff ff e1 c0 c0 c0 c0     ................
    104c:	c0 c0 c0 c0 c0 c0 c1 81 00 00 00 00 00 00 00 ff     ................
    105c:	ff ff ff 87 03 03 03 03 03 03 03 87 ff ff ff ff     ................
    106c:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    107c:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
    108c:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
    109c:	00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00     ................
    10ac:	00 00 00 01 ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    10c8:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    10d8:	00 00 00 00 00 00 00 0c 0f 0f 0f 07 00 00 00 00     ................
    10e8:	00 00 00 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    10f8:	f0 f0 f0 e0 00 00 00 00 00 00 00 7f ff ff ff e1     ................
    1108:	c0 c0 c0 c0 c0 c0 c0 e1 ff ff ff 3f 00 00 00 00     ...........?....
    1118:	00 00 00 fe ff ff ff 87 03 03 03 03 03 03 03 87     ................
    1128:	ff ff ff fe 00 00 00 00 00 00 00 07 0f 0f 0f 0f     ................
    1138:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
    1148:	00 00 00 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1158:	f0 f0 f0 e0 00 00 00 00 00 00 00 ff ff ff ff e1     ................
    1168:	c0 c0 c0 c0 c0 c0 c0 e1 ff ff ff ff 00 00 00 00     ................
    1178:	00 00 00 01 03 03 03 03 03 03 03 03 03 03 03 07     ................
    1188:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1198:	00 00 00 00 00 00 00 0c 0f 0f 0f 07 00 00 00 00     ................
	...
    11c8:	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 00 00 00     .<~~~~<.........
	...
    11e0:	00 f0 f8 f8 f8 f8 f0 00 00 00 00 00 00 00 00 00     ................
	...
    11f8:	00 00 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................

00001208 <__ctors_end>:
    1208:	11 24       	eor	r1, r1
    120a:	1f be       	out	0x3f, r1	; 63
    120c:	cf ef       	ldi	r28, 0xFF	; 255
    120e:	d8 e0       	ldi	r29, 0x08	; 8
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	cd bf       	out	0x3d, r28	; 61

00001214 <__do_copy_data>:
    1214:	11 e0       	ldi	r17, 0x01	; 1
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	b1 e0       	ldi	r27, 0x01	; 1
    121a:	e6 e4       	ldi	r30, 0x46	; 70
    121c:	fe e1       	ldi	r31, 0x1E	; 30
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <__do_copy_data+0x10>
    1220:	05 90       	lpm	r0, Z+
    1222:	0d 92       	st	X+, r0
    1224:	ac 34       	cpi	r26, 0x4C	; 76
    1226:	b1 07       	cpc	r27, r17
    1228:	d9 f7       	brne	.-10     	; 0x1220 <__do_copy_data+0xc>

0000122a <__do_clear_bss>:
    122a:	25 e0       	ldi	r18, 0x05	; 5
    122c:	ac e4       	ldi	r26, 0x4C	; 76
    122e:	b1 e0       	ldi	r27, 0x01	; 1
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <.do_clear_bss_start>

00001232 <.do_clear_bss_loop>:
    1232:	1d 92       	st	X+, r1

00001234 <.do_clear_bss_start>:
    1234:	aa 35       	cpi	r26, 0x5A	; 90
    1236:	b2 07       	cpc	r27, r18
    1238:	e1 f7       	brne	.-8      	; 0x1232 <.do_clear_bss_loop>
    123a:	0e 94 26 0b 	call	0x164c	; 0x164c <main>
    123e:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <_exit>

00001242 <__bad_interrupt>:
    1242:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001246 <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
    1246:	82 e1       	ldi	r24, 0x12	; 18
    1248:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    124c:	e9 eb       	ldi	r30, 0xB9	; 185
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	8c 7f       	andi	r24, 0xFC	; 252
    1254:	80 83       	st	Z, r24
    1256:	85 e0       	ldi	r24, 0x05	; 5
    1258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    125c:	08 95       	ret

0000125e <I2C_Start>:
    125e:	94 ea       	ldi	r25, 0xA4	; 164
    1260:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1264:	ec eb       	ldi	r30, 0xBC	; 188
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	90 81       	ld	r25, Z
    126a:	99 23       	and	r25, r25
    126c:	ec f7       	brge	.-6      	; 0x1268 <I2C_Start+0xa>
    126e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1272:	98 7f       	andi	r25, 0xF8	; 248
    1274:	98 30       	cpi	r25, 0x08	; 8
    1276:	99 f4       	brne	.+38     	; 0x129e <I2C_Start+0x40>
    1278:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    127c:	84 e8       	ldi	r24, 0x84	; 132
    127e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1282:	ec eb       	ldi	r30, 0xBC	; 188
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	88 23       	and	r24, r24
    128a:	ec f7       	brge	.-6      	; 0x1286 <I2C_Start+0x28>
    128c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1290:	88 7f       	andi	r24, 0xF8	; 248
    1292:	88 31       	cpi	r24, 0x18	; 24
    1294:	31 f0       	breq	.+12     	; 0x12a2 <I2C_Start+0x44>
    1296:	80 32       	cpi	r24, 0x20	; 32
    1298:	31 f0       	breq	.+12     	; 0x12a6 <I2C_Start+0x48>
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	08 95       	ret
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	08 95       	ret
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	08 95       	ret
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	08 95       	ret

000012aa <I2C_Write>:
    12aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    12ae:	84 e8       	ldi	r24, 0x84	; 132
    12b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12b4:	ec eb       	ldi	r30, 0xBC	; 188
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	88 23       	and	r24, r24
    12bc:	ec f7       	brge	.-6      	; 0x12b8 <I2C_Write+0xe>
    12be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12c2:	88 7f       	andi	r24, 0xF8	; 248
    12c4:	88 32       	cpi	r24, 0x28	; 40
    12c6:	21 f0       	breq	.+8      	; 0x12d0 <I2C_Write+0x26>
    12c8:	80 33       	cpi	r24, 0x30	; 48
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <I2C_Write+0x2a>
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	08 95       	ret
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	08 95       	ret
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	08 95       	ret

000012d8 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
    12d8:	84 e9       	ldi	r24, 0x94	; 148
    12da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
    12de:	ec eb       	ldi	r30, 0xBC	; 188
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	84 fd       	sbrc	r24, 4
    12e6:	fd cf       	rjmp	.-6      	; 0x12e2 <I2C_Stop+0xa>
    12e8:	08 95       	ret

000012ea <setup_LED>:
	{
	};
	a = UDR0;
	//USART_send(a);  //echo
	return a;
}
    12ea:	55 9a       	sbi	0x0a, 5	; 10
    12ec:	56 9a       	sbi	0x0a, 6	; 10
    12ee:	53 9a       	sbi	0x0a, 3	; 10
    12f0:	5d 9a       	sbi	0x0b, 5	; 11
    12f2:	5e 9a       	sbi	0x0b, 6	; 11
    12f4:	5b 9a       	sbi	0x0b, 3	; 11
    12f6:	08 95       	ret

000012f8 <setup_BUTTON>:
    12f8:	28 9a       	sbi	0x05, 0	; 5
    12fa:	29 9a       	sbi	0x05, 1	; 5
    12fc:	2a 9a       	sbi	0x05, 2	; 5
    12fe:	20 98       	cbi	0x04, 0	; 4
    1300:	21 98       	cbi	0x04, 1	; 4
    1302:	22 98       	cbi	0x04, 2	; 4
    1304:	e8 e6       	ldi	r30, 0x68	; 104
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	81 60       	ori	r24, 0x01	; 1
    130c:	80 83       	st	Z, r24
    130e:	eb e6       	ldi	r30, 0x6B	; 107
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	81 60       	ori	r24, 0x01	; 1
    1316:	80 83       	st	Z, r24
    1318:	80 81       	ld	r24, Z
    131a:	82 60       	ori	r24, 0x02	; 2
    131c:	80 83       	st	Z, r24
    131e:	80 81       	ld	r24, Z
    1320:	84 60       	ori	r24, 0x04	; 4
    1322:	80 83       	st	Z, r24
    1324:	08 95       	ret

00001326 <setup_T0_WD>:
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	84 bd       	out	0x24, r24	; 36
    132a:	85 e0       	ldi	r24, 0x05	; 5
    132c:	85 bd       	out	0x25, r24	; 37
    132e:	8c e9       	ldi	r24, 0x9C	; 156
    1330:	87 bd       	out	0x27, r24	; 39
    1332:	ee e6       	ldi	r30, 0x6E	; 110
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	82 60       	ori	r24, 0x02	; 2
    133a:	80 83       	st	Z, r24
    133c:	08 95       	ret

0000133e <setup_T1_showedMess>:
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1344:	85 e0       	ldi	r24, 0x05	; 5
    1346:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1350:	e0 e7       	ldi	r30, 0x70	; 112
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	80 83       	st	Z, r24
    135a:	08 95       	ret

0000135c <setup_Display>:
    135c:	0e 94 23 09 	call	0x1246	; 0x1246 <I2C_Init>
    1360:	8f e2       	ldi	r24, 0x2F	; 47
    1362:	95 e7       	ldi	r25, 0x75	; 117
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <setup_Display+0x8>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <setup_Display+0xe>
    136a:	00 00       	nop
    136c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <InitializeDisplay>
    1370:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <clear_display>
    1374:	08 95       	ret

00001376 <setup_USART>:
    1376:	8a b1       	in	r24, 0x0a	; 10
    1378:	84 61       	ori	r24, 0x14	; 20
    137a:	8a b9       	out	0x0a, r24	; 10
    137c:	8b b1       	in	r24, 0x0b	; 11
    137e:	8b 7e       	andi	r24, 0xEB	; 235
    1380:	8b b9       	out	0x0b, r24	; 11
    1382:	51 9a       	sbi	0x0a, 1	; 10
    1384:	50 98       	cbi	0x0a, 0	; 10
    1386:	58 9a       	sbi	0x0b, 0	; 11
    1388:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    138c:	8b e9       	ldi	r24, 0x9B	; 155
    138e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1392:	e1 ec       	ldi	r30, 0xC1	; 193
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	88 60       	ori	r24, 0x08	; 8
    139a:	80 83       	st	Z, r24
    139c:	80 81       	ld	r24, Z
    139e:	80 61       	ori	r24, 0x10	; 16
    13a0:	80 83       	st	Z, r24
    13a2:	80 81       	ld	r24, Z
    13a4:	80 68       	ori	r24, 0x80	; 128
    13a6:	80 83       	st	Z, r24
    13a8:	e2 ec       	ldi	r30, 0xC2	; 194
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	86 60       	ori	r24, 0x06	; 6
    13b0:	80 83       	st	Z, r24
    13b2:	e0 ec       	ldi	r30, 0xC0	; 192
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	82 60       	ori	r24, 0x02	; 2
    13ba:	80 83       	st	Z, r24
    13bc:	08 95       	ret

000013be <USART_send>:
    13be:	e0 ec       	ldi	r30, 0xC0	; 192
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	90 81       	ld	r25, Z
    13c4:	95 ff       	sbrs	r25, 5
    13c6:	fd cf       	rjmp	.-6      	; 0x13c2 <USART_send+0x4>
    13c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret

000013d0 <parseCameraStatus>:

void parseCameraStatus()
{
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <parseCameraStatus+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <parseCameraStatus+0x8>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <parseCameraStatus+0xa>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	int liveCamera;
	getItem(&myQueue, &liveCamera);
    13de:	be 01       	movw	r22, r28
    13e0:	6f 5f       	subi	r22, 0xFF	; 255
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	80 e5       	ldi	r24, 0x50	; 80
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>

	int readyCamera;
	getItem(&myQueue, &readyCamera);
    13ec:	be 01       	movw	r22, r28
    13ee:	6d 5f       	subi	r22, 0xFD	; 253
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	80 e5       	ldi	r24, 0x50	; 80
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>

	// Ako prve skontrolujem stav tejto kamery - LIVE rezim
	if (!(liveCamera & CAMERA_MASK))
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	81 fd       	sbrc	r24, 1
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <parseCameraStatus+0x38>
	{
		CAM_LIVE = CAMERA;
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <CAM_LIVE>
    1406:	20 c0       	rjmp	.+64     	; 0x1448 <parseCameraStatus+0x78>
	}
	else if (!(liveCamera & 0x01))
    1408:	80 fd       	sbrc	r24, 0
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <parseCameraStatus+0x44>
	{
		CAM_LIVE = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <CAM_LIVE>
    1412:	1a c0       	rjmp	.+52     	; 0x1448 <parseCameraStatus+0x78>
	}
	else if (!(liveCamera & 0x02))
	{
		CAM_LIVE = 2;
	}
	else if (!(liveCamera & 0x04))
    1414:	82 fd       	sbrc	r24, 2
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <parseCameraStatus+0x50>
	{
		CAM_LIVE = 3;
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <CAM_LIVE>
    141e:	14 c0       	rjmp	.+40     	; 0x1448 <parseCameraStatus+0x78>
	}
	else if (!(liveCamera & 0x08))
    1420:	83 fd       	sbrc	r24, 3
    1422:	04 c0       	rjmp	.+8      	; 0x142c <parseCameraStatus+0x5c>
	{
		CAM_LIVE = 4;
    1424:	84 e0       	ldi	r24, 0x04	; 4
    1426:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <CAM_LIVE>
    142a:	0e c0       	rjmp	.+28     	; 0x1448 <parseCameraStatus+0x78>
	}
	else if (!(liveCamera & 0x10))
    142c:	84 fd       	sbrc	r24, 4
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <parseCameraStatus+0x68>
	{
		CAM_LIVE = 5;
    1430:	85 e0       	ldi	r24, 0x05	; 5
    1432:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <CAM_LIVE>
    1436:	08 c0       	rjmp	.+16     	; 0x1448 <parseCameraStatus+0x78>
	}
	else if (!(liveCamera & 0x20))
    1438:	85 fd       	sbrc	r24, 5
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <parseCameraStatus+0x74>
	{
		CAM_LIVE = 6;
    143c:	86 e0       	ldi	r24, 0x06	; 6
    143e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <CAM_LIVE>
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <parseCameraStatus+0x78>
	}
	else
	{
		CAM_LIVE = 0;
    1444:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <CAM_LIVE>
	}

	// Ako prve skontrolujem stav tejto kamery - READY rezim
	if (!(readyCamera & CAMERA_MASK))
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 fd       	sbrc	r24, 1
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <parseCameraStatus+0x86>
	{
		CAM_READY = CAMERA;
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CAM_READY>
    1454:	20 c0       	rjmp	.+64     	; 0x1496 <parseCameraStatus+0xc6>
	}
	else if (!(readyCamera & 0x01))
    1456:	80 fd       	sbrc	r24, 0
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <parseCameraStatus+0x92>
	{
		CAM_READY = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CAM_READY>
    1460:	1a c0       	rjmp	.+52     	; 0x1496 <parseCameraStatus+0xc6>
	}
	else if (!(readyCamera & 0x02))
	{
		CAM_READY = 2;
	}
	else if (!(readyCamera & 0x04))
    1462:	82 fd       	sbrc	r24, 2
    1464:	04 c0       	rjmp	.+8      	; 0x146e <parseCameraStatus+0x9e>
	{
		CAM_READY = 3;
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CAM_READY>
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <parseCameraStatus+0xc6>
	}
	else if (!(readyCamera & 0x08))
    146e:	83 fd       	sbrc	r24, 3
    1470:	04 c0       	rjmp	.+8      	; 0x147a <parseCameraStatus+0xaa>
	{
		CAM_READY = 4;
    1472:	84 e0       	ldi	r24, 0x04	; 4
    1474:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CAM_READY>
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <parseCameraStatus+0xc6>
	}
	else if (!(readyCamera & 0x10))
    147a:	84 fd       	sbrc	r24, 4
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <parseCameraStatus+0xb6>
	{
		CAM_READY = 5;
    147e:	85 e0       	ldi	r24, 0x05	; 5
    1480:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CAM_READY>
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <parseCameraStatus+0xc6>
	}
	else if (!(readyCamera & 0x20))
    1486:	85 fd       	sbrc	r24, 5
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <parseCameraStatus+0xc2>
	{
		CAM_READY = 6;
    148a:	86 e0       	ldi	r24, 0x06	; 6
    148c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CAM_READY>
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <parseCameraStatus+0xc6>
	}
	else
	{
		CAM_READY = 0;
    1492:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <CAM_READY>
	}

	int pomChar;
	getItem(&myQueue, &pomChar); //Nacitanie koncoveho znaku USART
    1496:	be 01       	movw	r22, r28
    1498:	6b 5f       	subi	r22, 0xFB	; 251
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	80 e5       	ldi	r24, 0x50	; 80
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>
}
    14a4:	26 96       	adiw	r28, 0x06	; 6
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <refresh_LED>:

void refresh_LED()
{
	//Kontrola, ci je kamera LIVE
	if (CAM_LIVE == CAMERA) //Aplikovanie masky pre zistenie stavu kamerz
    14b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <CAM_LIVE>
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	11 f4       	brne	.+4      	; 0x14c2 <refresh_LED+0xc>
	{
		sbi(LED_PORT, R_LED); //Rozsvietenie cervenej LED
    14be:	5e 9a       	sbi	0x0b, 6	; 11
    14c0:	08 95       	ret
	}
	else
	{
		cbi(LED_PORT, R_LED); //Zhsnutie cervenej LED
    14c2:	5e 98       	cbi	0x0b, 6	; 11

		//Kontrola, ci je kamera READY
		if (CAM_READY == CAMERA)
    14c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <CAM_READY>
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <refresh_LED+0x1a>
		{
			sbi(LED_PORT, G_LED); //Rozsvietenie zelenej
    14cc:	5d 9a       	sbi	0x0b, 5	; 11
    14ce:	08 95       	ret
		}
		else
		{
			cbi(LED_PORT, G_LED); //Zhasnutie zelenej
    14d0:	5d 98       	cbi	0x0b, 5	; 11
    14d2:	08 95       	ret

000014d4 <statusDisplay>:
	}
}

void statusDisplay()
{
	printTallyNumber(CAM_LIVE, 0, 0); //Velke cislo pre kameru, ktora je von
    14d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <CAM_LIVE>
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <printTallyNumber>
	printBigNumber(CAM_READY, 0, 6);  //mensie cislo pre kameru, ktora je von
    14e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <CAM_READY>
    14ea:	46 e0       	ldi	r20, 0x06	; 6
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <printBigNumber>
	printBigNumber(CAMERA, 4, 13);  //mensie cislo pre kameru, ktora je von
    14f8:	4d e0       	ldi	r20, 0x0D	; 13
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	64 e0       	ldi	r22, 0x04	; 4
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <printBigNumber>
    1508:	08 95       	ret

0000150a <printPrepairedMessage>:
}

void printPrepairedMessage()
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	00 d0       	rcall	.+0      	; 0x1510 <printPrepairedMessage+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <printPrepairedMessage+0x8>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <printPrepairedMessage+0xa>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	int ktoraKamera;
	int indexSpravy;
	int poslednyZnak;

	getItem(&myQueue, &ktoraKamera);
    1518:	be 01       	movw	r22, r28
    151a:	6f 5f       	subi	r22, 0xFF	; 255
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	80 e5       	ldi	r24, 0x50	; 80
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>
	getItem(&myQueue, &indexSpravy);
    1526:	be 01       	movw	r22, r28
    1528:	6d 5f       	subi	r22, 0xFD	; 253
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	80 e5       	ldi	r24, 0x50	; 80
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>
	getItem(&myQueue, &poslednyZnak);
    1534:	be 01       	movw	r22, r28
    1536:	6b 5f       	subi	r22, 0xFB	; 251
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	80 e5       	ldi	r24, 0x50	; 80
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>

	if (ktoraKamera & CAMERA_MASK)
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	81 ff       	sbrs	r24, 1
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <printPrepairedMessage+0x46>
	{
		messCamera(indexSpravy);
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	0e 94 ae 0c 	call	0x195c	; 0x195c <messCamera>
	}
}
    1550:	26 96       	adiw	r28, 0x06	; 6
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret

00001562 <printRecievedMessage>:

void printRecievedMessage()
{
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	00 d0       	rcall	.+0      	; 0x156c <printRecievedMessage+0xa>
    156c:	00 d0       	rcall	.+0      	; 0x156e <printRecievedMessage+0xc>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
	int ktoraKamera;
	getItem(&myQueue, &ktoraKamera);
    1572:	be 01       	movw	r22, r28
    1574:	6f 5f       	subi	r22, 0xFF	; 255
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	80 e5       	ldi	r24, 0x50	; 80
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>

	int pomChar;
	getItem(&myQueue, &pomChar);
    1580:	be 01       	movw	r22, r28
    1582:	6d 5f       	subi	r22, 0xFD	; 253
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	80 e5       	ldi	r24, 0x50	; 80
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>

	if (ktoraKamera & CAMERA_MASK)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	81 fd       	sbrc	r24, 1
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <printRecievedMessage+0x3e>

		displayOn();
	}
	else
	{
		while (pomChar != USART_END_CHAR)
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	81 36       	cpi	r24, 0x61	; 97
    159a:	91 05       	cpc	r25, r1
    159c:	61 f5       	brne	.+88     	; 0x15f6 <printRecievedMessage+0x94>
    159e:	37 c0       	rjmp	.+110    	; 0x160e <printRecievedMessage+0xac>
	int pomChar;
	getItem(&myQueue, &pomChar);

	if (ktoraKamera & CAMERA_MASK)
	{
		displayOff();
    15a0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <displayOff>
		clear_display();
    15a4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <clear_display>

		uint8_t posX = 0;
		setXY(posX, 0);
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>

		uint8_t dispalyCharIndex = 0;

		while (pomChar != USART_END_CHAR)
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	81 36       	cpi	r24, 0x61	; 97
    15b6:	91 05       	cpc	r25, r1
    15b8:	49 f4       	brne	.+18     	; 0x15cc <printRecievedMessage+0x6a>
    15ba:	1a c0       	rjmp	.+52     	; 0x15f0 <printRecievedMessage+0x8e>
		{
			if (!(dispalyCharIndex < 15))
    15bc:	1f 30       	cpi	r17, 0x0F	; 15
    15be:	40 f0       	brcs	.+16     	; 0x15d0 <printRecievedMessage+0x6e>
			{
				posX++;
    15c0:	0f 5f       	subi	r16, 0xFF	; 255
				setXY(posX, 0);
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	80 2f       	mov	r24, r16
    15c6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <printRecievedMessage+0x6e>
		uint8_t posX = 0;
		setXY(posX, 0);

		uint8_t dispalyCharIndex = 0;

		while (pomChar != USART_END_CHAR)
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	00 e0       	ldi	r16, 0x00	; 0
			{
				posX++;
				setXY(posX, 0);
			}

			getItem(&myQueue, &pomChar);
    15d0:	be 01       	movw	r22, r28
    15d2:	6d 5f       	subi	r22, 0xFD	; 253
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	80 e5       	ldi	r24, 0x50	; 80
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>
			sendCharTOMAS(pomChar);
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <sendCharTOMAS>
			dispalyCharIndex++;
    15e4:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t posX = 0;
		setXY(posX, 0);

		uint8_t dispalyCharIndex = 0;

		while (pomChar != USART_END_CHAR)
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	81 36       	cpi	r24, 0x61	; 97
    15ec:	91 05       	cpc	r25, r1
    15ee:	31 f7       	brne	.-52     	; 0x15bc <printRecievedMessage+0x5a>
			getItem(&myQueue, &pomChar);
			sendCharTOMAS(pomChar);
			dispalyCharIndex++;
		}

		displayOn();
    15f0:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <displayOn>
    15f4:	0c c0       	rjmp	.+24     	; 0x160e <printRecievedMessage+0xac>
	}
	else
	{
		while (pomChar != USART_END_CHAR)
		{
			getItem(&myQueue, &pomChar);
    15f6:	be 01       	movw	r22, r28
    15f8:	6d 5f       	subi	r22, 0xFD	; 253
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255
    15fc:	80 e5       	ldi	r24, 0x50	; 80
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>

		displayOn();
	}
	else
	{
		while (pomChar != USART_END_CHAR)
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	81 36       	cpi	r24, 0x61	; 97
    160a:	91 05       	cpc	r25, r1
    160c:	a1 f7       	brne	.-24     	; 0x15f6 <printRecievedMessage+0x94>
		{
			getItem(&myQueue, &pomChar);
		}
	}
}
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	08 95       	ret

00001620 <unknowMessenge>:

void unknowMessenge()
{
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	00 d0       	rcall	.+0      	; 0x1626 <unknowMessenge+0x6>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62

	int pomChar;

	do
	{
		getItem(&myQueue, &pomChar);
    162a:	be 01       	movw	r22, r28
    162c:	6f 5f       	subi	r22, 0xFF	; 255
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	80 e5       	ldi	r24, 0x50	; 80
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>
		//USART_send(pomChar); //vypisovanie buffra
	} while (pomChar != USART_END_CHAR);
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	81 36       	cpi	r24, 0x61	; 97
    163e:	91 05       	cpc	r25, r1
    1640:	a1 f7       	brne	.-24     	; 0x162a <unknowMessenge+0xa>

	//USART_send(USART_END_CHAR);
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <main>:

int main(void)
{
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	00 d0       	rcall	.+0      	; 0x1652 <main+0x6>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62

	setup_Display();
    1656:	0e 94 ae 09 	call	0x135c	; 0x135c <setup_Display>

	statusDisplay();
    165a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <statusDisplay>

	setup_LED();
    165e:	0e 94 75 09 	call	0x12ea	; 0x12ea <setup_LED>
	setup_USART();
    1662:	0e 94 bb 09 	call	0x1376	; 0x1376 <setup_USART>
	
	setup_BUTTON();
    1666:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <setup_BUTTON>

	setup_T0_WD();
    166a:	0e 94 93 09 	call	0x1326	; 0x1326 <setup_T0_WD>
	setup_T1_showedMess();
    166e:	0e 94 9f 09 	call	0x133e	; 0x133e <setup_T1_showedMess>

	sei(); //Povoleni preruseni
    1672:	78 94       	sei
		{
			//ToDo - pekny efekt by bol, keby sa zoslabovala
			cbi(LED_PORT, R_LED);
			cbi(LED_PORT, G_LED);

			tbi(LED_PORT, B_LED);
    1674:	08 e0       	ldi	r16, 0x08	; 8

					break;

				case MESSAGE_BASIC: //Sprava s informaciou od rezie - predpripravena
					printPrepairedMessage();
					zobrazenaSprava = true;
    1676:	11 e0       	ldi	r17, 0x01	; 1

	int temp;

	while (1)
	{
		if (watchdog == false)
    1678:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <watchdog>
    167c:	81 11       	cpse	r24, r1
    167e:	40 c0       	rjmp	.+128    	; 0x1700 <main+0xb4>
		{
			if (new_msg != 0)
    1680:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <new_msg>
    1684:	88 23       	and	r24, r24
    1686:	09 f4       	brne	.+2      	; 0x168a <main+0x3e>
    1688:	49 c0       	rjmp	.+146    	; 0x171c <main+0xd0>
			{
				cbi(LED_PORT, B_LED); //vypnutie modej LED, pripad kekz sprava pride pocas svietenia
    168a:	5b 98       	cbi	0x0b, 3	; 11

				getItem(&myQueue, &temp);
    168c:	be 01       	movw	r22, r28
    168e:	6f 5f       	subi	r22, 0xFF	; 255
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	80 e5       	ldi	r24, 0x50	; 80
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <getItem>

				switch (temp) //Prvz znak spravz nesie priznak akz typ spravy je prenasany
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	81 34       	cpi	r24, 0x41	; 65
    16a0:	91 05       	cpc	r25, r1
    16a2:	a1 f0       	breq	.+40     	; 0x16cc <main+0x80>
    16a4:	24 f4       	brge	.+8      	; 0x16ae <main+0x62>
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	02 97       	sbiw	r24, 0x02	; 2
    16aa:	28 f0       	brcs	.+10     	; 0x16b6 <main+0x6a>
    16ac:	21 c0       	rjmp	.+66     	; 0x16f0 <main+0xa4>
    16ae:	86 34       	cpi	r24, 0x46	; 70
    16b0:	91 05       	cpc	r25, r1
    16b2:	a9 f0       	breq	.+42     	; 0x16de <main+0x92>
    16b4:	1d c0       	rjmp	.+58     	; 0x16f0 <main+0xa4>
				{

				case REFRESH: //Refresh / Change - zmena stavu kamier

				case CHANGED:
					parseCameraStatus();
    16b6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <parseCameraStatus>
					refresh_LED(); //Nastavenie LED podla prijatych dat
    16ba:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <refresh_LED>
					if (zobrazenaSprava == false)
    16be:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    16c2:	81 11       	cpse	r24, r1
    16c4:	17 c0       	rjmp	.+46     	; 0x16f4 <main+0xa8>
					{
						statusDisplay();
    16c6:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <statusDisplay>
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <main+0xa8>
					}

					break;

				case MESSAGE_BASIC: //Sprava s informaciou od rezie - predpripravena
					printPrepairedMessage();
    16cc:	0e 94 85 0a 	call	0x150a	; 0x150a <printPrepairedMessage>
					zobrazenaSprava = true;
    16d0:	10 93 4c 01 	sts	0x014C, r17	; 0x80014c <__data_end>
					timerx_T2 = 0;
    16d4:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timerx_T2+0x1>
    16d8:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <timerx_T2>

					break;
    16dc:	0b c0       	rjmp	.+22     	; 0x16f4 <main+0xa8>

				case MESSAGE_ADVANCE: //Sprava s informaciou od rezie - pisana
					printRecievedMessage();
    16de:	0e 94 b1 0a 	call	0x1562	; 0x1562 <printRecievedMessage>
					zobrazenaSprava = true;
    16e2:	10 93 4c 01 	sts	0x014C, r17	; 0x80014c <__data_end>
					timerx_T2 = 0;
    16e6:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timerx_T2+0x1>
    16ea:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <timerx_T2>

					break;
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <main+0xa8>

				case RESPONSE: //Sprava s informaciou do rezie od kameramanov
					
				default: //sendBackeUnknowMessenge();
					unknowMessenge();
    16f0:	0e 94 10 0b 	call	0x1620	; 0x1620 <unknowMessenge>
					break;
				}
				new_msg--; //Nulovanie priznaku novej spravy
    16f4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <new_msg>
    16f8:	81 50       	subi	r24, 0x01	; 1
    16fa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <new_msg>
    16fe:	0e c0       	rjmp	.+28     	; 0x171c <main+0xd0>
			}
		}
		else //V pripade ze Watchdog zaznamena chybu spusti sa blikanie modrej LED
		{
			//ToDo - pekny efekt by bol, keby sa zoslabovala
			cbi(LED_PORT, R_LED);
    1700:	5e 98       	cbi	0x0b, 6	; 11
			cbi(LED_PORT, G_LED);
    1702:	5d 98       	cbi	0x0b, 5	; 11

			tbi(LED_PORT, B_LED);
    1704:	8b b1       	in	r24, 0x0b	; 11
    1706:	80 27       	eor	r24, r16
    1708:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    170a:	2f e3       	ldi	r18, 0x3F	; 63
    170c:	3e e7       	ldi	r19, 0x7E	; 126
    170e:	85 e0       	ldi	r24, 0x05	; 5
    1710:	21 50       	subi	r18, 0x01	; 1
    1712:	30 40       	sbci	r19, 0x00	; 0
    1714:	80 40       	sbci	r24, 0x00	; 0
    1716:	e1 f7       	brne	.-8      	; 0x1710 <main+0xc4>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <main+0xce>
    171a:	00 00       	nop
			_delay_ms(WATCHDOG_ERROR);
		}

		if (system_error == true) //V pripade neocakavaneho stavu zariadenia sa vyhlasi chynby stav bez moznosti navratu - nutny restart
    171c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <system_error>
    1720:	88 23       	and	r24, r24
    1722:	79 f0       	breq	.+30     	; 0x1742 <main+0xf6>
		{
			cli(); //Zakazanie preruseni
    1724:	f8 94       	cli
			while (1)
			{
				tbi(LED_PORT, R_LED); // Blikanie Cervenej Farby
    1726:	90 e4       	ldi	r25, 0x40	; 64
    1728:	8b b1       	in	r24, 0x0b	; 11
    172a:	89 27       	eor	r24, r25
    172c:	8b b9       	out	0x0b, r24	; 11
    172e:	2f ef       	ldi	r18, 0xFF	; 255
    1730:	3e e9       	ldi	r19, 0x9E	; 158
    1732:	84 e2       	ldi	r24, 0x24	; 36
    1734:	21 50       	subi	r18, 0x01	; 1
    1736:	30 40       	sbci	r19, 0x00	; 0
    1738:	80 40       	sbci	r24, 0x00	; 0
    173a:	e1 f7       	brne	.-8      	; 0x1734 <main+0xe8>
    173c:	00 c0       	rjmp	.+0      	; 0x173e <main+0xf2>
    173e:	00 00       	nop
    1740:	f3 cf       	rjmp	.-26     	; 0x1728 <main+0xdc>
    1742:	9f e7       	ldi	r25, 0x7F	; 127
    1744:	29 ea       	ldi	r18, 0xA9	; 169
    1746:	33 e0       	ldi	r19, 0x03	; 3
    1748:	91 50       	subi	r25, 0x01	; 1
    174a:	20 40       	sbci	r18, 0x00	; 0
    174c:	30 40       	sbci	r19, 0x00	; 0
    174e:	e1 f7       	brne	.-8      	; 0x1748 <main+0xfc>
    1750:	00 c0       	rjmp	.+0      	; 0x1752 <main+0x106>
    1752:	00 00       	nop
    1754:	91 cf       	rjmp	.-222    	; 0x1678 <main+0x2c>

00001756 <__vector_18>:

/********************obsluhy preruseni****************/

//Ukladanie prichadzajucej spravy do zasobnika
ISR(USART_RX_vect)
{
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
	watchdog = false; // nulovanie chyboveho stavu dispeja
    1778:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <watchdog>
	timerx_T0 = 0;	// restart casovaca - watchdog
    177c:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <timerx_T0+0x1>
    1780:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <timerx_T0>

	uint8_t receivedChar = UDR0;
    1784:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	//USART_send(receivedChar);  //local echo

	if (receivedChar == USART_END_CHAR)
    1788:	61 36       	cpi	r22, 0x61	; 97
    178a:	29 f4       	brne	.+10     	; 0x1796 <__vector_18+0x40>
	{
		new_msg++;
    178c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <new_msg>
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <new_msg>
	}

	putItem(&myQueue, receivedChar);
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	80 e5       	ldi	r24, 0x50	; 80
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <putItem>
}
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	bf 91       	pop	r27
    17a6:	af 91       	pop	r26
    17a8:	9f 91       	pop	r25
    17aa:	8f 91       	pop	r24
    17ac:	7f 91       	pop	r23
    17ae:	6f 91       	pop	r22
    17b0:	5f 91       	pop	r21
    17b2:	4f 91       	pop	r20
    17b4:	3f 91       	pop	r19
    17b6:	2f 91       	pop	r18
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	8f 93       	push	r24
    17d0:	9f 93       	push	r25
	timerx_T0++;
    17d2:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <timerx_T0>
    17d6:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <timerx_T0+0x1>
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <timerx_T0+0x1>
    17e0:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <timerx_T0>
	if (timerx_T0 > WATCHDOG_ISR_CNT)
    17e4:	81 32       	cpi	r24, 0x21	; 33
    17e6:	93 40       	sbci	r25, 0x03	; 3
    17e8:	38 f0       	brcs	.+14     	; 0x17f8 <__vector_14+0x36>
	{
		watchdog = true;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <watchdog>
		timerx_T0 = 0;
    17f0:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <timerx_T0+0x1>
    17f4:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <timerx_T0>
	}
}
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	2f 91       	pop	r18
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	0f 90       	pop	r0
    1804:	1f 90       	pop	r1
    1806:	18 95       	reti

00001808 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
    1808:	1f 92       	push	r1
    180a:	0f 92       	push	r0
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	0f 92       	push	r0
    1810:	11 24       	eor	r1, r1
    1812:	2f 93       	push	r18
    1814:	3f 93       	push	r19
    1816:	4f 93       	push	r20
    1818:	5f 93       	push	r21
    181a:	6f 93       	push	r22
    181c:	7f 93       	push	r23
    181e:	8f 93       	push	r24
    1820:	9f 93       	push	r25
    1822:	af 93       	push	r26
    1824:	bf 93       	push	r27
    1826:	ef 93       	push	r30
    1828:	ff 93       	push	r31
	if (zobrazenaSprava == true)
    182a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    182e:	88 23       	and	r24, r24
    1830:	b1 f0       	breq	.+44     	; 0x185e <__vector_7+0x56>
	{
		timerx_T2++;
    1832:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <timerx_T2>
    1836:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <timerx_T2+0x1>
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <timerx_T2+0x1>
    1840:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <timerx_T2>
		if (timerx_T2 > SHOWMESSENGE_ISR_CNT)
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	90 41       	sbci	r25, 0x10	; 16
    1848:	50 f0       	brcs	.+20     	; 0x185e <__vector_7+0x56>
		{
			zobrazenaSprava = false;
    184a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
			timerx_T2 = 0;
    184e:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timerx_T2+0x1>
    1852:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <timerx_T2>
			clear_display();
    1856:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <clear_display>
			statusDisplay();			
    185a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <statusDisplay>
		}
	}
}
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <__vector_3>:

ISR(PCINT0_vect) 
{
    1880:	1f 92       	push	r1
    1882:	0f 92       	push	r0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
	uint8_t changedbits;
	uint8_t intreading = BUTTON_PIN & 0x7;
    18a2:	83 b1       	in	r24, 0x03	; 3
    18a4:	87 70       	andi	r24, 0x07	; 7
	changedbits = intreading ^ portbhistory;
    18a6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <portbhistory>
	portbhistory = intreading;
    18aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <portbhistory>
	
	switch(changedbits){
    18ae:	89 27       	eor	r24, r25
    18b0:	84 30       	cpi	r24, 0x04	; 4
    18b2:	59 f1       	breq	.+86     	; 0x190a <__vector_3+0x8a>
    18b4:	28 f4       	brcc	.+10     	; 0x18c0 <__vector_3+0x40>
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	41 f0       	breq	.+16     	; 0x18ca <__vector_3+0x4a>
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	b9 f0       	breq	.+46     	; 0x18ec <__vector_3+0x6c>
    18be:	3d c0       	rjmp	.+122    	; 0x193a <__vector_3+0xba>
    18c0:	85 30       	cpi	r24, 0x05	; 5
    18c2:	a1 f1       	breq	.+104    	; 0x192c <__vector_3+0xac>
    18c4:	86 30       	cpi	r24, 0x06	; 6
    18c6:	b1 f1       	breq	.+108    	; 0x1934 <__vector_3+0xb4>
    18c8:	38 c0       	rjmp	.+112    	; 0x193a <__vector_3+0xba>

		case 0: //nothing changed
		break;

		case 1: //pcint0 changed
			if(portbhistory & 0x01)
    18ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <portbhistory>
    18ce:	80 ff       	sbrs	r24, 0
    18d0:	34 c0       	rjmp	.+104    	; 0x193a <__vector_3+0xba>
			{
				USART_send(RESPONSE);
    18d2:	88 e0       	ldi	r24, 0x08	; 8
    18d4:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
				USART_send(CAMERA_MASK);
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
				USART_send(YES);
    18de:	8f e0       	ldi	r24, 0x0F	; 15
    18e0:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
				USART_send(USART_END_CHAR);
    18e4:	81 e6       	ldi	r24, 0x61	; 97
    18e6:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
    18ea:	27 c0       	rjmp	.+78     	; 0x193a <__vector_3+0xba>
			
		
		break;

		case 2: //pcint1 changed
		if(portbhistory & 0x02)
    18ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <portbhistory>
    18f0:	81 ff       	sbrs	r24, 1
    18f2:	23 c0       	rjmp	.+70     	; 0x193a <__vector_3+0xba>
		{
			zobrazenaSprava = false;
    18f4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
			timerx_T2 = 0;
    18f8:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timerx_T2+0x1>
    18fc:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <timerx_T2>
			clear_display();
    1900:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <clear_display>
			statusDisplay();
    1904:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <statusDisplay>
    1908:	18 c0       	rjmp	.+48     	; 0x193a <__vector_3+0xba>
		case 3: //0+1 changed
	
		break;

		case 4:  //pcint2 changed
		if(portbhistory & 0x04)
    190a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <portbhistory>
    190e:	82 ff       	sbrs	r24, 2
    1910:	14 c0       	rjmp	.+40     	; 0x193a <__vector_3+0xba>
		{
		USART_send(RESPONSE);
    1912:	88 e0       	ldi	r24, 0x08	; 8
    1914:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
		USART_send(CAMERA_MASK);
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
		USART_send(NO);
    191e:	80 ef       	ldi	r24, 0xF0	; 240
    1920:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
		USART_send(USART_END_CHAR);
    1924:	81 e6       	ldi	r24, 0x61	; 97
    1926:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
    192a:	07 c0       	rjmp	.+14     	; 0x193a <__vector_3+0xba>
		}
		
		break;

		case 5: //2+0 changed
		USART_send(0x05);
    192c:	85 e0       	ldi	r24, 0x05	; 5
    192e:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
		break;
    1932:	03 c0       	rjmp	.+6      	; 0x193a <__vector_3+0xba>

		case 6: //2+1
		USART_send(0x06);
    1934:	86 e0       	ldi	r24, 0x06	; 6
    1936:	0e 94 df 09 	call	0x13be	; 0x13be <USART_send>
		case 7: //all changed

		break;
}

    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	bf 91       	pop	r27
    1940:	af 91       	pop	r26
    1942:	9f 91       	pop	r25
    1944:	8f 91       	pop	r24
    1946:	7f 91       	pop	r23
    1948:	6f 91       	pop	r22
    194a:	5f 91       	pop	r21
    194c:	4f 91       	pop	r20
    194e:	3f 91       	pop	r19
    1950:	2f 91       	pop	r18
    1952:	0f 90       	pop	r0
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	0f 90       	pop	r0
    1958:	1f 90       	pop	r1
    195a:	18 95       	reti

0000195c <messCamera>:

#include "printMessenge.h"
#include "ssd1306.h"

void messCamera(int typeOfError)
{
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	ec 01       	movw	r28, r24
	displayOff();
    1962:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <displayOff>
	clear_display();
    1966:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <clear_display>

	switch (typeOfError)
    196a:	c2 30       	cpi	r28, 0x02	; 2
    196c:	d1 05       	cpc	r29, r1
    196e:	f9 f0       	breq	.+62     	; 0x19ae <messCamera+0x52>
    1970:	c3 30       	cpi	r28, 0x03	; 3
    1972:	d1 05       	cpc	r29, r1
    1974:	a9 f1       	breq	.+106    	; 0x19e0 <messCamera+0x84>
    1976:	21 97       	sbiw	r28, 0x01	; 1
    1978:	09 f0       	breq	.+2      	; 0x197c <messCamera+0x20>
    197a:	4b c0       	rjmp	.+150    	; 0x1a12 <messCamera+0xb6>
	{
	case 1:
		setXY(1, 5);
    197c:	65 e0       	ldi	r22, 0x05	; 5
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("BLIKA");
    1984:	84 e0       	ldi	r24, 0x04	; 4
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(3, 7);
    198c:	67 e0       	ldi	r22, 0x07	; 7
    198e:	83 e0       	ldi	r24, 0x03	; 3
    1990:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("TI");
    1994:	8a e0       	ldi	r24, 0x0A	; 10
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(5, 5);
    199c:	65 e0       	ldi	r22, 0x05	; 5
    199e:	85 e0       	ldi	r24, 0x05	; 5
    19a0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("KAMERA");
    19a4:	8d e0       	ldi	r24, 0x0D	; 13
    19a6:	91 e0       	ldi	r25, 0x01	; 1
    19a8:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		break;
    19ac:	52 c0       	rjmp	.+164    	; 0x1a52 <messCamera+0xf6>
		
	case 2:
		setXY(1, 3);
    19ae:	63 e0       	ldi	r22, 0x03	; 3
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("NEZAOSTRUJE");
    19b6:	84 e1       	ldi	r24, 0x14	; 20
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(3, 7);
    19be:	67 e0       	ldi	r22, 0x07	; 7
    19c0:	83 e0       	ldi	r24, 0x03	; 3
    19c2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("TI");
    19c6:	8a e0       	ldi	r24, 0x0A	; 10
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(5, 5);
    19ce:	65 e0       	ldi	r22, 0x05	; 5
    19d0:	85 e0       	ldi	r24, 0x05	; 5
    19d2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("KAMERA");
    19d6:	8d e0       	ldi	r24, 0x0D	; 13
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		break;
    19de:	39 c0       	rjmp	.+114    	; 0x1a52 <messCamera+0xf6>
	case 3:
		setXY(1, 2);
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("PRIBLIZUJE");
    19e8:	80 e2       	ldi	r24, 0x20	; 32
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(3, 7);
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("TI");
    19f8:	8a e0       	ldi	r24, 0x0A	; 10
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(5, 5);
    1a00:	65 e0       	ldi	r22, 0x05	; 5
    1a02:	85 e0       	ldi	r24, 0x05	; 5
    1a04:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("KAMERA");
    1a08:	8d e0       	ldi	r24, 0x0D	; 13
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		break;
    1a10:	20 c0       	rjmp	.+64     	; 0x1a52 <messCamera+0xf6>
		
	default:
		setXY(1, 4);
    1a12:	64 e0       	ldi	r22, 0x04	; 4
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("TOTO  MA");
    1a1a:	8b e2       	ldi	r24, 0x2B	; 43
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(3, 6);
    1a22:	66 e0       	ldi	r22, 0x06	; 6
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("ESTE");
    1a2a:	84 e3       	ldi	r24, 0x34	; 52
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(5, 4);
    1a32:	64 e0       	ldi	r22, 0x04	; 4
    1a34:	85 e0       	ldi	r24, 0x05	; 5
    1a36:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("NENAUCIL");
    1a3a:	89 e3       	ldi	r24, 0x39	; 57
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		setXY(7, 4);
    1a42:	64 e0       	ldi	r22, 0x04	; 4
    1a44:	87 e0       	ldi	r24, 0x07	; 7
    1a46:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
		sendStr("ZOBRAZIT");
    1a4a:	82 e4       	ldi	r24, 0x42	; 66
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sendStr>
		break;

	}

	displayOn();
    1a52:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <displayOn>
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <putItem>:
	else
	return(0);
}

int putItem(circularQueue_t *theQueue, int theItemValue)
{
    1a5c:	fc 01       	movw	r30, r24
	if(theQueue->validItems>=MAX_ITEMS)
    1a5e:	84 81       	ldd	r24, Z+4	; 0x04
    1a60:	95 81       	ldd	r25, Z+5	; 0x05
    1a62:	81 15       	cp	r24, r1
    1a64:	22 e0       	ldi	r18, 0x02	; 2
    1a66:	92 07       	cpc	r25, r18
    1a68:	1c f0       	brlt	.+6      	; 0x1a70 <putItem+0x14>
	{
		return(-1);
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	08 95       	ret
	}
	else
	{
		theQueue->validItems++;
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	95 83       	std	Z+5, r25	; 0x05
    1a74:	84 83       	std	Z+4, r24	; 0x04
		theQueue->data[theQueue->last] = theItemValue;
    1a76:	22 81       	ldd	r18, Z+2	; 0x02
    1a78:	33 81       	ldd	r19, Z+3	; 0x03
    1a7a:	d9 01       	movw	r26, r18
    1a7c:	13 96       	adiw	r26, 0x03	; 3
    1a7e:	aa 0f       	add	r26, r26
    1a80:	bb 1f       	adc	r27, r27
    1a82:	ae 0f       	add	r26, r30
    1a84:	bf 1f       	adc	r27, r31
    1a86:	6d 93       	st	X+, r22
    1a88:	7c 93       	st	X, r23
		theQueue->last = (theQueue->last+1)%MAX_ITEMS;
    1a8a:	2f 5f       	subi	r18, 0xFF	; 255
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	31 78       	andi	r19, 0x81	; 129
    1a90:	33 23       	and	r19, r19
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <putItem+0x42>
    1a94:	21 50       	subi	r18, 0x01	; 1
    1a96:	31 09       	sbc	r19, r1
    1a98:	3e 6f       	ori	r19, 0xFE	; 254
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	33 83       	std	Z+3, r19	; 0x03
    1aa0:	22 83       	std	Z+2, r18	; 0x02
	}
}
    1aa2:	08 95       	ret

00001aa4 <getItem>:

int getItem(circularQueue_t *theQueue, int *theItemValue)
{
    1aa4:	fc 01       	movw	r30, r24
	if(isEmpty(theQueue))
    1aa6:	84 81       	ldd	r24, Z+4	; 0x04
    1aa8:	95 81       	ldd	r25, Z+5	; 0x05
    1aaa:	89 2b       	or	r24, r25
    1aac:	11 f1       	breq	.+68     	; 0x1af2 <getItem+0x4e>
	{
		return(-1);
	}
	else
	{
		*theItemValue=theQueue->data[theQueue->first];
    1aae:	a0 81       	ld	r26, Z
    1ab0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ab2:	13 96       	adiw	r26, 0x03	; 3
    1ab4:	aa 0f       	add	r26, r26
    1ab6:	bb 1f       	adc	r27, r27
    1ab8:	ae 0f       	add	r26, r30
    1aba:	bf 1f       	adc	r27, r31
    1abc:	8d 91       	ld	r24, X+
    1abe:	9c 91       	ld	r25, X
    1ac0:	db 01       	movw	r26, r22
    1ac2:	8d 93       	st	X+, r24
    1ac4:	9c 93       	st	X, r25
		theQueue->first=(theQueue->first+1)%MAX_ITEMS;
    1ac6:	20 81       	ld	r18, Z
    1ac8:	31 81       	ldd	r19, Z+1	; 0x01
    1aca:	2f 5f       	subi	r18, 0xFF	; 255
    1acc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ace:	31 78       	andi	r19, 0x81	; 129
    1ad0:	33 23       	and	r19, r19
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <getItem+0x3a>
    1ad4:	21 50       	subi	r18, 0x01	; 1
    1ad6:	31 09       	sbc	r19, r1
    1ad8:	3e 6f       	ori	r19, 0xFE	; 254
    1ada:	2f 5f       	subi	r18, 0xFF	; 255
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	31 83       	std	Z+1, r19	; 0x01
    1ae0:	20 83       	st	Z, r18
		theQueue->validItems--;
    1ae2:	84 81       	ldd	r24, Z+4	; 0x04
    1ae4:	95 81       	ldd	r25, Z+5	; 0x05
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	95 83       	std	Z+5, r25	; 0x05
    1aea:	84 83       	std	Z+4, r24	; 0x04
		return(0);
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	08 95       	ret

int getItem(circularQueue_t *theQueue, int *theItemValue)
{
	if(isEmpty(theQueue))
	{
		return(-1);
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	9f ef       	ldi	r25, 0xFF	; 255
		*theItemValue=theQueue->data[theQueue->first];
		theQueue->first=(theQueue->first+1)%MAX_ITEMS;
		theQueue->validItems--;
		return(0);
	}
}
    1af6:	08 95       	ret

00001af8 <ssd1306_command>:
		{
			SendChar(pgm_read_byte(myFont[*string - 0x20] + i));
		}
		string++;
	}
}
    1af8:	cf 93       	push	r28
    1afa:	c8 2f       	mov	r28, r24
    1afc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_i2c_address>
    1b00:	0e 94 2f 09 	call	0x125e	; 0x125e <I2C_Start>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	0e 94 55 09 	call	0x12aa	; 0x12aa <I2C_Write>
    1b0a:	8c 2f       	mov	r24, r28
    1b0c:	0e 94 55 09 	call	0x12aa	; 0x12aa <I2C_Write>
    1b10:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <I2C_Stop>
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <InitializeDisplay>:
    1b18:	5c 9a       	sbi	0x0b, 4	; 11
    1b1a:	54 9a       	sbi	0x0a, 4	; 10
    1b1c:	2f ef       	ldi	r18, 0xFF	; 255
    1b1e:	36 e7       	ldi	r19, 0x76	; 118
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	21 50       	subi	r18, 0x01	; 1
    1b24:	30 40       	sbci	r19, 0x00	; 0
    1b26:	80 40       	sbci	r24, 0x00	; 0
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <InitializeDisplay+0xa>
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <InitializeDisplay+0x14>
    1b2c:	00 00       	nop
    1b2e:	9b b1       	in	r25, 0x0b	; 11
    1b30:	80 e1       	ldi	r24, 0x10	; 16
    1b32:	98 27       	eor	r25, r24
    1b34:	9b b9       	out	0x0b, r25	; 11
    1b36:	9f ef       	ldi	r25, 0xFF	; 255
    1b38:	26 e7       	ldi	r18, 0x76	; 118
    1b3a:	31 e0       	ldi	r19, 0x01	; 1
    1b3c:	91 50       	subi	r25, 0x01	; 1
    1b3e:	20 40       	sbci	r18, 0x00	; 0
    1b40:	30 40       	sbci	r19, 0x00	; 0
    1b42:	e1 f7       	brne	.-8      	; 0x1b3c <InitializeDisplay+0x24>
    1b44:	00 c0       	rjmp	.+0      	; 0x1b46 <InitializeDisplay+0x2e>
    1b46:	00 00       	nop
    1b48:	9b b1       	in	r25, 0x0b	; 11
    1b4a:	89 27       	eor	r24, r25
    1b4c:	8b b9       	out	0x0b, r24	; 11
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	96 e7       	ldi	r25, 0x76	; 118
    1b52:	21 e0       	ldi	r18, 0x01	; 1
    1b54:	81 50       	subi	r24, 0x01	; 1
    1b56:	90 40       	sbci	r25, 0x00	; 0
    1b58:	20 40       	sbci	r18, 0x00	; 0
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <InitializeDisplay+0x3c>
    1b5c:	00 c0       	rjmp	.+0      	; 0x1b5e <InitializeDisplay+0x46>
    1b5e:	00 00       	nop
    1b60:	8e ea       	ldi	r24, 0xAE	; 174
    1b62:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b66:	85 ed       	ldi	r24, 0xD5	; 213
    1b68:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b6c:	80 e8       	ldi	r24, 0x80	; 128
    1b6e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b72:	88 ea       	ldi	r24, 0xA8	; 168
    1b74:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b78:	8f e3       	ldi	r24, 0x3F	; 63
    1b7a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b7e:	83 ed       	ldi	r24, 0xD3	; 211
    1b80:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b8a:	80 e4       	ldi	r24, 0x40	; 64
    1b8c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b90:	8d e8       	ldi	r24, 0x8D	; 141
    1b92:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b96:	84 e1       	ldi	r24, 0x14	; 20
    1b98:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1b9c:	81 ea       	ldi	r24, 0xA1	; 161
    1b9e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1ba2:	88 ec       	ldi	r24, 0xC8	; 200
    1ba4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1ba8:	8a ed       	ldi	r24, 0xDA	; 218
    1baa:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bae:	82 e1       	ldi	r24, 0x12	; 18
    1bb0:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bb4:	81 e8       	ldi	r24, 0x81	; 129
    1bb6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bba:	8f ec       	ldi	r24, 0xCF	; 207
    1bbc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bc0:	89 ed       	ldi	r24, 0xD9	; 217
    1bc2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bc6:	81 ef       	ldi	r24, 0xF1	; 241
    1bc8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bcc:	8b ed       	ldi	r24, 0xDB	; 219
    1bce:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bd2:	80 e4       	ldi	r24, 0x40	; 64
    1bd4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bd8:	84 ea       	ldi	r24, 0xA4	; 164
    1bda:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bde:	86 ea       	ldi	r24, 0xA6	; 166
    1be0:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1be4:	8f ea       	ldi	r24, 0xAF	; 175
    1be6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bea:	08 95       	ret

00001bec <displayOn>:
    1bec:	8f ea       	ldi	r24, 0xAF	; 175
    1bee:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bf2:	08 95       	ret

00001bf4 <displayOff>:
    1bf4:	8e ea       	ldi	r24, 0xAE	; 174
    1bf6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1bfa:	08 95       	ret

00001bfc <SendChar>:
    1bfc:	cf 93       	push	r28
    1bfe:	c8 2f       	mov	r28, r24
    1c00:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_i2c_address>
    1c04:	0e 94 2f 09 	call	0x125e	; 0x125e <I2C_Start>
    1c08:	80 e4       	ldi	r24, 0x40	; 64
    1c0a:	0e 94 55 09 	call	0x12aa	; 0x12aa <I2C_Write>
    1c0e:	8c 2f       	mov	r24, r28
    1c10:	0e 94 55 09 	call	0x12aa	; 0x12aa <I2C_Write>
    1c14:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <I2C_Stop>
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <setXY>:
    1c1c:	cf 93       	push	r28
    1c1e:	c6 2f       	mov	r28, r22
    1c20:	80 55       	subi	r24, 0x50	; 80
    1c22:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1c26:	8c 2f       	mov	r24, r28
    1c28:	88 0f       	add	r24, r24
    1c2a:	88 0f       	add	r24, r24
    1c2c:	88 0f       	add	r24, r24
    1c2e:	88 70       	andi	r24, 0x08	; 8
    1c30:	8e 5f       	subi	r24, 0xFE	; 254
    1c32:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1c36:	8c 2f       	mov	r24, r28
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	8f 70       	andi	r24, 0x0F	; 15
    1c40:	80 5f       	subi	r24, 0xF0	; 240
    1c42:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_command>
    1c46:	cf 91       	pop	r28
    1c48:	08 95       	ret

00001c4a <clear_display>:
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	d0 e0       	ldi	r29, 0x00	; 0
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	8d 2f       	mov	r24, r29
    1c54:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
    1c58:	c1 e8       	ldi	r28, 0x81	; 129
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SendChar>
    1c60:	c1 50       	subi	r28, 0x01	; 1
    1c62:	d9 f7       	brne	.-10     	; 0x1c5a <clear_display+0x10>
    1c64:	df 5f       	subi	r29, 0xFF	; 255
    1c66:	d8 30       	cpi	r29, 0x08	; 8
    1c68:	99 f7       	brne	.-26     	; 0x1c50 <clear_display+0x6>
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <printBigNumber>:
    1c70:	7f 92       	push	r7
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	7c 01       	movw	r14, r24
    1c8c:	4b 01       	movw	r8, r22
    1c8e:	74 2e       	mov	r7, r20
    1c90:	64 2f       	mov	r22, r20
    1c92:	88 2d       	mov	r24, r8
    1c94:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
    1c98:	c8 ea       	ldi	r28, 0xA8	; 168
    1c9a:	d1 e1       	ldi	r29, 0x11	; 17
    1c9c:	0f 2e       	mov	r0, r31
    1c9e:	f8 e0       	ldi	r31, 0x08	; 8
    1ca0:	cf 2e       	mov	r12, r31
    1ca2:	f2 e1       	ldi	r31, 0x12	; 18
    1ca4:	df 2e       	mov	r13, r31
    1ca6:	f0 2d       	mov	r31, r0
    1ca8:	80 e6       	ldi	r24, 0x60	; 96
    1caa:	8e 9d       	mul	r24, r14
    1cac:	50 01       	movw	r10, r0
    1cae:	8f 9d       	mul	r24, r15
    1cb0:	b0 0c       	add	r11, r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	00 e0       	ldi	r16, 0x00	; 0
    1cb6:	10 e0       	ldi	r17, 0x00	; 0
    1cb8:	80 ec       	ldi	r24, 0xC0	; 192
    1cba:	a8 1a       	sub	r10, r24
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	b8 0a       	sbc	r11, r24
    1cc0:	ea e0       	ldi	r30, 0x0A	; 10
    1cc2:	ee 16       	cp	r14, r30
    1cc4:	f1 04       	cpc	r15, r1
    1cc6:	2c f0       	brlt	.+10     	; 0x1cd2 <printBigNumber+0x62>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	84 91       	lpm	r24, Z
    1ccc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SendChar>
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <printBigNumber+0x6e>
    1cd2:	f5 01       	movw	r30, r10
    1cd4:	ec 0f       	add	r30, r28
    1cd6:	fd 1f       	adc	r31, r29
    1cd8:	84 91       	lpm	r24, Z
    1cda:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SendChar>
    1cde:	07 31       	cpi	r16, 0x17	; 23
    1ce0:	11 05       	cpc	r17, r1
    1ce2:	51 f4       	brne	.+20     	; 0x1cf8 <printBigNumber+0x88>
    1ce4:	ff ef       	ldi	r31, 0xFF	; 255
    1ce6:	8f 1a       	sub	r8, r31
    1ce8:	9f 0a       	sbc	r9, r31
    1cea:	67 2d       	mov	r22, r7
    1cec:	88 2d       	mov	r24, r8
    1cee:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
    1cf2:	00 e0       	ldi	r16, 0x00	; 0
    1cf4:	10 e0       	ldi	r17, 0x00	; 0
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <printBigNumber+0x8c>
    1cf8:	0f 5f       	subi	r16, 0xFF	; 255
    1cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfc:	21 96       	adiw	r28, 0x01	; 1
    1cfe:	cc 15       	cp	r28, r12
    1d00:	dd 05       	cpc	r29, r13
    1d02:	f1 f6       	brne	.-68     	; 0x1cc0 <printBigNumber+0x50>
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	df 90       	pop	r13
    1d12:	cf 90       	pop	r12
    1d14:	bf 90       	pop	r11
    1d16:	af 90       	pop	r10
    1d18:	9f 90       	pop	r9
    1d1a:	8f 90       	pop	r8
    1d1c:	7f 90       	pop	r7
    1d1e:	08 95       	ret

00001d20 <sendStr>:
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	8c 01       	movw	r16, r24
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	8c 91       	ld	r24, X
    1d2e:	81 11       	cpse	r24, r1
    1d30:	1b c0       	rjmp	.+54     	; 0x1d68 <sendStr+0x48>
    1d32:	1d c0       	rjmp	.+58     	; 0x1d6e <sendStr+0x4e>
    1d34:	d8 01       	movw	r26, r16
    1d36:	ec 91       	ld	r30, X
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
    1d3e:	ee 0f       	add	r30, r30
    1d40:	ff 1f       	adc	r31, r31
    1d42:	ee 0f       	add	r30, r30
    1d44:	ff 1f       	adc	r31, r31
    1d46:	e8 51       	subi	r30, 0x18	; 24
    1d48:	f6 4f       	sbci	r31, 0xF6	; 246
    1d4a:	ec 0f       	add	r30, r28
    1d4c:	fd 1f       	adc	r31, r29
    1d4e:	84 91       	lpm	r24, Z
    1d50:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SendChar>
    1d54:	21 96       	adiw	r28, 0x01	; 1
    1d56:	c8 30       	cpi	r28, 0x08	; 8
    1d58:	d1 05       	cpc	r29, r1
    1d5a:	61 f7       	brne	.-40     	; 0x1d34 <sendStr+0x14>
    1d5c:	0f 5f       	subi	r16, 0xFF	; 255
    1d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d60:	f8 01       	movw	r30, r16
    1d62:	80 81       	ld	r24, Z
    1d64:	88 23       	and	r24, r24
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <sendStr+0x4e>
    1d68:	c0 e0       	ldi	r28, 0x00	; 0
    1d6a:	d0 e0       	ldi	r29, 0x00	; 0
    1d6c:	e3 cf       	rjmp	.-58     	; 0x1d34 <sendStr+0x14>
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <printTallyNumber>:


//Metoda vysviecujuca velke Tally cisla - 42 x 64
void printTallyNumber(int camera, int X, int Y)
{
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	d4 2e       	mov	r13, r20
	int cam_print = camera;
	if(camera > 6)
    1d88:	87 30       	cpi	r24, 0x07	; 7
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	14 f0       	brlt	.+4      	; 0x1d92 <printTallyNumber+0x1a>
	{
		cam_print = 7;
    1d8e:	87 e0       	ldi	r24, 0x07	; 7
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	f6 2e       	mov	r15, r22
    1d94:	20 e5       	ldi	r18, 0x50	; 80
    1d96:	31 e0       	ldi	r19, 0x01	; 1
    1d98:	82 9f       	mul	r24, r18
    1d9a:	e0 01       	movw	r28, r0
    1d9c:	83 9f       	mul	r24, r19
    1d9e:	d0 0d       	add	r29, r0
    1da0:	92 9f       	mul	r25, r18
    1da2:	d0 0d       	add	r29, r0
    1da4:	11 24       	eor	r1, r1
    1da6:	c8 59       	subi	r28, 0x98	; 152
    1da8:	df 4f       	sbci	r29, 0xFF	; 255
    1daa:	68 94       	set
    1dac:	ee 24       	eor	r14, r14
    1dae:	e3 f8       	bld	r14, 3
    1db0:	e6 0e       	add	r14, r22
	}
	for (int j = 0; j < 8; j++)
	{
		setXY(X, Y);
    1db2:	6d 2d       	mov	r22, r13
    1db4:	8f 2d       	mov	r24, r15
    1db6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <setXY>
    1dba:	8e 01       	movw	r16, r28
    1dbc:	06 5d       	subi	r16, 0xD6	; 214
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
		for (int i = 0; i < wightTallyFont; i++)
		{
			SendChar(pgm_read_byte(tallyNumbers[cam_print] + (i + j * wightTallyFont)));
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	84 91       	lpm	r24, Z
    1dc4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SendChar>
    1dc8:	21 96       	adiw	r28, 0x01	; 1
		cam_print = 7;
	}
	for (int j = 0; j < 8; j++)
	{
		setXY(X, Y);
		for (int i = 0; i < wightTallyFont; i++)
    1dca:	c0 17       	cp	r28, r16
    1dcc:	d1 07       	cpc	r29, r17
    1dce:	c1 f7       	brne	.-16     	; 0x1dc0 <printTallyNumber+0x48>
    1dd0:	f3 94       	inc	r15
    1dd2:	e8 01       	movw	r28, r16
	int cam_print = camera;
	if(camera > 6)
	{
		cam_print = 7;
	}
	for (int j = 0; j < 8; j++)
    1dd4:	fe 10       	cpse	r15, r14
    1dd6:	ed cf       	rjmp	.-38     	; 0x1db2 <printTallyNumber+0x3a>
		{
			SendChar(pgm_read_byte(tallyNumbers[cam_print] + (i + j * wightTallyFont)));
		}
		X++;
	}
}
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	08 95       	ret

00001de8 <sendCharTOMAS>:

void sendCharTOMAS(unsigned char data)
{
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	08 2f       	mov	r16, r24
	I2C_Start(_i2c_address); // begin transmitting
    1df2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_i2c_address>
    1df6:	0e 94 2f 09 	call	0x125e	; 0x125e <I2C_Start>
	I2C_Write(0x40);		 //data mode
    1dfa:	80 e4       	ldi	r24, 0x40	; 64
    1dfc:	0e 94 55 09 	call	0x12aa	; 0x12aa <I2C_Write>
    1e00:	10 e0       	ldi	r17, 0x00	; 0
    1e02:	e8 01       	movw	r28, r16
    1e04:	cc 0f       	add	r28, r28
    1e06:	dd 1f       	adc	r29, r29
    1e08:	cc 0f       	add	r28, r28
    1e0a:	dd 1f       	adc	r29, r29
    1e0c:	cc 0f       	add	r28, r28
    1e0e:	dd 1f       	adc	r29, r29
    1e10:	c8 51       	subi	r28, 0x18	; 24
    1e12:	d6 4f       	sbci	r29, 0xF6	; 246
    1e14:	00 0f       	add	r16, r16
    1e16:	11 1f       	adc	r17, r17
    1e18:	00 0f       	add	r16, r16
    1e1a:	11 1f       	adc	r17, r17
    1e1c:	00 0f       	add	r16, r16
    1e1e:	11 1f       	adc	r17, r17
    1e20:	00 51       	subi	r16, 0x10	; 16
    1e22:	16 4f       	sbci	r17, 0xF6	; 246

	for (int i = 0; i < 8; i++)
		I2C_Write(pgm_read_byte(myFont[data - 0x20] + i));
    1e24:	fe 01       	movw	r30, r28
    1e26:	84 91       	lpm	r24, Z
    1e28:	0e 94 55 09 	call	0x12aa	; 0x12aa <I2C_Write>
    1e2c:	21 96       	adiw	r28, 0x01	; 1
void sendCharTOMAS(unsigned char data)
{
	I2C_Start(_i2c_address); // begin transmitting
	I2C_Write(0x40);		 //data mode

	for (int i = 0; i < 8; i++)
    1e2e:	c0 17       	cp	r28, r16
    1e30:	d1 07       	cpc	r29, r17
    1e32:	c1 f7       	brne	.-16     	; 0x1e24 <sendCharTOMAS+0x3c>
		I2C_Write(pgm_read_byte(myFont[data - 0x20] + i));

	I2C_Stop(); // stop transmitting
    1e34:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <I2C_Stop>
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	08 95       	ret

00001e42 <_exit>:
    1e42:	f8 94       	cli

00001e44 <__stop_program>:
    1e44:	ff cf       	rjmp	.-2      	; 0x1e44 <__stop_program>
