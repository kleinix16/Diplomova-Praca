
cv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  00000318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000958  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000744  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004eb  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000175  00000000  00000000  00001eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  88:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup_LED>:
	{
	};
	a = UDR0;
	//USART_send(a);  //echo
	return a;
}
  90:	53 9a       	sbi	0x0a, 3	; 10
  92:	56 9a       	sbi	0x0a, 6	; 10
  94:	5b 98       	cbi	0x0b, 3	; 11
  96:	5e 98       	cbi	0x0b, 6	; 11
  98:	21 9a       	sbi	0x04, 1	; 4
  9a:	29 98       	cbi	0x05, 1	; 5
  9c:	08 95       	ret

0000009e <setup_T0_WD>:
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	84 bd       	out	0x24, r24	; 36
  a2:	85 e0       	ldi	r24, 0x05	; 5
  a4:	85 bd       	out	0x25, r24	; 37
  a6:	8c e9       	ldi	r24, 0x9C	; 156
  a8:	87 bd       	out	0x27, r24	; 39
  aa:	ee e6       	ldi	r30, 0x6E	; 110
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <setup_USART>:
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	8c 60       	ori	r24, 0x0C	; 12
  ba:	87 b9       	out	0x07, r24	; 7
  bc:	88 b1       	in	r24, 0x08	; 8
  be:	83 7f       	andi	r24, 0xF3	; 243
  c0:	88 b9       	out	0x08, r24	; 8
  c2:	51 9a       	sbi	0x0a, 1	; 10
  c4:	50 98       	cbi	0x0a, 0	; 10
  c6:	58 9a       	sbi	0x0b, 0	; 11
  c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  cc:	8b e9       	ldi	r24, 0x9B	; 155
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d2:	e1 ec       	ldi	r30, 0xC1	; 193
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
  e8:	e2 ec       	ldi	r30, 0xC2	; 194
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	80 83       	st	Z, r24
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <USART_send>:
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	95 ff       	sbrs	r25, 5
 106:	fd cf       	rjmp	.-6      	; 0x102 <USART_send+0x4>
 108:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret

00000110 <refresh_LED>:

void refresh_LED()
{
	//Kontrola, ci je kamera LIVE
	if (RX_buffer[1] & CAMERA_MASK)			//Aplikovanie masky pre zistenie stavu kamerz
 110:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <RX_buffer+0x1>
 114:	81 ff       	sbrs	r24, 1
 116:	02 c0       	rjmp	.+4      	; 0x11c <refresh_LED+0xc>
	{
		cbi(LED_PORT, R_LED);					//Rozsvietenie cervenej LED
 118:	5e 98       	cbi	0x0b, 6	; 11
 11a:	08 95       	ret
	}
	else
	{
		sbi(LED_PORT, R_LED);					//Zhsnutie cervenej LED
 11c:	5e 9a       	sbi	0x0b, 6	; 11
		
		//Kontrola, ci je kamera READY
		if (RX_buffer[2] & CAMERA_MASK)
 11e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <RX_buffer+0x2>
 122:	81 ff       	sbrs	r24, 1
 124:	02 c0       	rjmp	.+4      	; 0x12a <refresh_LED+0x1a>
		{
			cbi(LED_PORT, G_LED);				//Rozsvietenie zelenej
 126:	5b 98       	cbi	0x0b, 3	; 11
 128:	08 95       	ret
		}
		else
		{
			sbi(LED_PORT, G_LED);				//Zhasnutie zelenej
 12a:	5b 9a       	sbi	0x0b, 3	; 11
 12c:	08 95       	ret

0000012e <main>:
}


int main(void)
{
	setup_LED();
 12e:	0e 94 48 00 	call	0x90	; 0x90 <setup_LED>
	setup_USART();
 132:	0e 94 5b 00 	call	0xb6	; 0xb6 <setup_USART>
	setup_T0_WD();
 136:	0e 94 4f 00 	call	0x9e	; 0x9e <setup_T0_WD>

	sei();			//Povoleni preruseni
 13a:	78 94       	sei
		{
			//ToDo - pekny efekt by bol, keby sa zoslabovala
			cbi(LED_PORT,R_LED); 
			cbi(LED_PORT,G_LED);
			
			tbi(PORTB, B_LED);
 13c:	12 e0       	ldi	r17, 0x02	; 2
		{
			cbi(PORTB,B_LED);					//vypnutie modej LED, pripad kekz sprava pride pocas svietenia 
			
			if (new_msg == true)
			{
				switch (RX_buffer[0])			//Prvz znak spravz nesie priznak akz typ spravy je prenasany
 13e:	c7 e0       	ldi	r28, 0x07	; 7
 140:	d1 e0       	ldi	r29, 0x01	; 1

	sei();			//Povoleni preruseni

	while (1)
	{
		if (watchdog == false)
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 146:	81 11       	cpse	r24, r1
 148:	21 c0       	rjmp	.+66     	; 0x18c <main+0x5e>
		{
			cbi(PORTB,B_LED);					//vypnutie modej LED, pripad kekz sprava pride pocas svietenia 
 14a:	29 98       	cbi	0x05, 1	; 5
			
			if (new_msg == true)
 14c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <new_msg>
 150:	88 23       	and	r24, r24
 152:	51 f1       	breq	.+84     	; 0x1a8 <main+0x7a>
			{
				switch (RX_buffer[0])			//Prvz znak spravz nesie priznak akz typ spravy je prenasany
 154:	88 81       	ld	r24, Y
 156:	84 30       	cpi	r24, 0x04	; 4
 158:	61 f0       	breq	.+24     	; 0x172 <main+0x44>
 15a:	28 f4       	brcc	.+10     	; 0x166 <main+0x38>
 15c:	9f ef       	ldi	r25, 0xFF	; 255
 15e:	98 0f       	add	r25, r24
 160:	92 30       	cpi	r25, 0x02	; 2
 162:	20 f0       	brcs	.+8      	; 0x16c <main+0x3e>
 164:	0e c0       	rjmp	.+28     	; 0x182 <main+0x54>
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	41 f0       	breq	.+16     	; 0x17a <main+0x4c>
 16a:	0b c0       	rjmp	.+22     	; 0x182 <main+0x54>
				{
					//Refresh / Change - zmena stavu kamier
					case REFRESH:
					
					case CHANGED:
							refresh_LED();		//Nastavenie LED podla prijatych dat
 16c:	0e 94 88 00 	call	0x110	; 0x110 <refresh_LED>
							break;
 170:	0a c0       	rjmp	.+20     	; 0x186 <main+0x58>

					//Sprava s informaciou od rezie
					case MESSAGE:
							USART_send('M');
 172:	8d e4       	ldi	r24, 0x4D	; 77
 174:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_send>
							break;
 178:	06 c0       	rjmp	.+12     	; 0x186 <main+0x58>
							
					//Sprava s informaciou od rezie
					case RESPONSE:
							USART_send('R');
 17a:	82 e5       	ldi	r24, 0x52	; 82
 17c:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_send>
							break;
 180:	02 c0       	rjmp	.+4      	; 0x186 <main+0x58>

						//ToDo - pripad, co ak prijata sprava  zacina zle...
					default:
							USART_send(RX_buffer[0]);
 182:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_send>
							break;
				}
				new_msg = false;					//Nulovanie priznaku novej spravy
 186:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <new_msg>
 18a:	0e c0       	rjmp	.+28     	; 0x1a8 <main+0x7a>
			}
		}
		else									//V pripade ze Watchdog zaznamena chybu spusti sa blikanie modrej LED
		{
			//ToDo - pekny efekt by bol, keby sa zoslabovala
			cbi(LED_PORT,R_LED); 
 18c:	5e 98       	cbi	0x0b, 6	; 11
			cbi(LED_PORT,G_LED);
 18e:	5b 98       	cbi	0x0b, 3	; 11
			
			tbi(PORTB, B_LED);
 190:	85 b1       	in	r24, 0x05	; 5
 192:	81 27       	eor	r24, r17
 194:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	2f e3       	ldi	r18, 0x3F	; 63
 198:	3e e7       	ldi	r19, 0x7E	; 126
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	30 40       	sbci	r19, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x6e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x78>
 1a6:	00 00       	nop
			_delay_ms(WATCHDOG_ERROR);
		}

		if (system_error == true)		//V pripade neocakavaneho stavu zariadenia sa vyhlasi chynby stav bez moznosti navratu - nutny restart
 1a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <system_error>
 1ac:	88 23       	and	r24, r24
 1ae:	79 f0       	breq	.+30     	; 0x1ce <main+0xa0>
		{
			cli();						//Zakazanie preruseni
 1b0:	f8 94       	cli
			while (1)
			{
				tbi(LED_PORT, R_LED);		// Blikanie Cervenej Farby
 1b2:	90 e4       	ldi	r25, 0x40	; 64
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	89 27       	eor	r24, r25
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	3e e9       	ldi	r19, 0x9E	; 158
 1be:	84 e2       	ldi	r24, 0x24	; 36
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	30 40       	sbci	r19, 0x00	; 0
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x92>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x9c>
 1ca:	00 00       	nop
 1cc:	f3 cf       	rjmp	.-26     	; 0x1b4 <main+0x86>
 1ce:	9f e7       	ldi	r25, 0x7F	; 127
 1d0:	29 ea       	ldi	r18, 0xA9	; 169
 1d2:	33 e0       	ldi	r19, 0x03	; 3
 1d4:	91 50       	subi	r25, 0x01	; 1
 1d6:	20 40       	sbci	r18, 0x00	; 0
 1d8:	30 40       	sbci	r19, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0xa6>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0xb0>
 1de:	00 00       	nop
 1e0:	b0 cf       	rjmp	.-160    	; 0x142 <main+0x14>

000001e2 <__vector_18>:

/********************obsluhy preruseni****************/

//Ukladanie prichadzajucej spravy do zasobnika
ISR(USART_RX_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	watchdog = false;	// nulovanie chyboveho stavu dispeja
 1f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	timerx = 0;			// restart casovaca - watchdog
 1fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timerx+0x1>
 1fe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timerx>

	if (new_msg == false)
 202:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <new_msg>
 206:	81 11       	cpse	r24, r1
 208:	1e c0       	rjmp	.+60     	; 0x246 <__vector_18+0x64>
	{
		RX_buffer[RX_index] = UDR0;
 20a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <RX_index>
 20e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <RX_index+0x1>
 212:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 216:	fc 01       	movw	r30, r24
 218:	e9 5f       	subi	r30, 0xF9	; 249
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	20 83       	st	Z, r18
		//USART_send(RX_buffer [RX_index]);  //local echo

		if (RX_buffer[RX_index] == USART_END_CHAR) //Kontrola na koncovi znak spravy
 21e:	21 36       	cpi	r18, 0x61	; 97
 220:	41 f4       	brne	.+16     	; 0x232 <__vector_18+0x50>
		{
			new_msg = true;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <new_msg>
			RX_index = 0;
 228:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <RX_index+0x1>
 22c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <RX_index>
 230:	0a c0       	rjmp	.+20     	; 0x246 <__vector_18+0x64>
		}
		else
		{
			RX_index++; 
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <RX_index+0x1>
 238:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <RX_index>
		
			if (RX_index >= USART_BUFFER)   // kontrola na pretecenie zasobnika
 23c:	0a 97       	sbiw	r24, 0x0a	; 10
 23e:	1c f0       	brlt	.+6      	; 0x246 <__vector_18+0x64>
			{ 
				system_error = true;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <system_error>
			}
		}
	}
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
	timerx++;
 26a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timerx>
 26e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timerx+0x1>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timerx+0x1>
 278:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timerx>
	if (timerx > WATCHDOG_ISR_CNT)
 27c:	81 32       	cpi	r24, 0x21	; 33
 27e:	93 40       	sbci	r25, 0x03	; 3
 280:	38 f0       	brcs	.+14     	; 0x290 <__vector_14+0x36>
	{
		watchdog = true;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		timerx = 0;
 288:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timerx+0x1>
 28c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timerx>
	}
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
