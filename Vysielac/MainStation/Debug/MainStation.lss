
MainStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000670  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00802000  00802000  000006e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005683  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c8a  00000000  00000000  00005f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e54  00000000  00000000  00008c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00009a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ebb  00000000  00000000  00009f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b34  00000000  00000000  0000cdc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000d8fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_14>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_20>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_25>
  68:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_26>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_58>
  ec:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_59>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a3 32       	cpi	r26, 0x23	; 35
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 a4 01 	call	0x348	; 0x348 <main>
 228:	0c 94 36 03 	jmp	0x66c	; 0x66c <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <setUp_RFM_USART>:
{
    while (*text)
    {
        sendChar(*text++);
    }
}
 230:	e0 e4       	ldi	r30, 0x40	; 64
 232:	f6 e0       	ldi	r31, 0x06	; 6
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	81 83       	std	Z+1, r24	; 0x01
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	81 83       	std	Z+1, r24	; 0x01
 240:	86 83       	std	Z+6, r24	; 0x06
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	81 83       	std	Z+1, r24	; 0x01
 246:	86 83       	std	Z+6, r24	; 0x06
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	60 ea       	ldi	r22, 0xA0	; 160
 24c:	78 e0       	ldi	r23, 0x08	; 8
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	90 e2       	ldi	r25, 0x20	; 32
 252:	0e 94 fe 02 	call	0x5fc	; 0x5fc <USART_InterruptDriver_Initialize>
 256:	e0 ea       	ldi	r30, 0xA0	; 160
 258:	f8 e0       	ldi	r31, 0x08	; 8
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	85 83       	std	Z+5, r24	; 0x05
 25e:	83 81       	ldd	r24, Z+3	; 0x03
 260:	8f 7c       	andi	r24, 0xCF	; 207
 262:	80 61       	ori	r24, 0x10	; 16
 264:	83 83       	std	Z+3, r24	; 0x03
 266:	8c e0       	ldi	r24, 0x0C	; 12
 268:	86 83       	std	Z+6, r24	; 0x06
 26a:	17 82       	std	Z+7, r1	; 0x07
 26c:	84 81       	ldd	r24, Z+4	; 0x04
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	84 83       	std	Z+4, r24	; 0x04
 272:	84 81       	ldd	r24, Z+4	; 0x04
 274:	88 60       	ori	r24, 0x08	; 8
 276:	84 83       	std	Z+4, r24	; 0x04
 278:	08 95       	ret

0000027a <setUp_PC_USART>:
 27a:	e0 e8       	ldi	r30, 0x80	; 128
 27c:	f6 e0       	ldi	r31, 0x06	; 6
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	81 83       	std	Z+1, r24	; 0x01
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	82 83       	std	Z+2, r24	; 0x02
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	60 ea       	ldi	r22, 0xA0	; 160
 28a:	7a e0       	ldi	r23, 0x0A	; 10
 28c:	84 e1       	ldi	r24, 0x14	; 20
 28e:	90 e2       	ldi	r25, 0x20	; 32
 290:	0e 94 fe 02 	call	0x5fc	; 0x5fc <USART_InterruptDriver_Initialize>
 294:	e0 ea       	ldi	r30, 0xA0	; 160
 296:	fa e0       	ldi	r31, 0x0A	; 10
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	85 83       	std	Z+5, r24	; 0x05
 29c:	83 81       	ldd	r24, Z+3	; 0x03
 29e:	8f 7c       	andi	r24, 0xCF	; 207
 2a0:	80 61       	ori	r24, 0x10	; 16
 2a2:	83 83       	std	Z+3, r24	; 0x03
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	86 83       	std	Z+6, r24	; 0x06
 2a8:	17 82       	std	Z+7, r1	; 0x07
 2aa:	84 81       	ldd	r24, Z+4	; 0x04
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	84 83       	std	Z+4, r24	; 0x04
 2b0:	84 81       	ldd	r24, Z+4	; 0x04
 2b2:	88 60       	ori	r24, 0x08	; 8
 2b4:	84 83       	std	Z+4, r24	; 0x04
 2b6:	08 95       	ret

000002b8 <setTimer_Beacon>:
 2b8:	80 e1       	ldi	r24, 0x10	; 16
 2ba:	97 e2       	ldi	r25, 0x27	; 39
 2bc:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 2c0:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	98 e0       	ldi	r25, 0x08	; 8
 2ca:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <TC0_SetOverflowIntLevel>
 2ce:	67 e0       	ldi	r22, 0x07	; 7
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	98 e0       	ldi	r25, 0x08	; 8
 2d4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <TC0_ConfigClockSource>
 2d8:	08 95       	ret

000002da <setTimer_Tally>:
 2da:	80 e9       	ldi	r24, 0x90	; 144
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
 2e2:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	80 e4       	ldi	r24, 0x40	; 64
 2ea:	98 e0       	ldi	r25, 0x08	; 8
 2ec:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <TC1_SetOverflowIntLevel>
 2f0:	67 e0       	ldi	r22, 0x07	; 7
 2f2:	80 e4       	ldi	r24, 0x40	; 64
 2f4:	98 e0       	ldi	r25, 0x08	; 8
 2f6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <TC1_ConfigClockSource>
 2fa:	08 95       	ret

000002fc <sendStatus_RFM>:
 2fc:	e1 ea       	ldi	r30, 0xA1	; 161
 2fe:	f8 e0       	ldi	r31, 0x08	; 8
 300:	80 81       	ld	r24, Z
 302:	85 ff       	sbrs	r24, 5
 304:	fd cf       	rjmp	.-6      	; 0x300 <sendStatus_RFM+0x4>
 306:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <STATE>
 30a:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 30e:	e1 ea       	ldi	r30, 0xA1	; 161
 310:	f8 e0       	ldi	r31, 0x08	; 8
 312:	80 81       	ld	r24, Z
 314:	85 ff       	sbrs	r24, 5
 316:	fd cf       	rjmp	.-6      	; 0x312 <sendStatus_RFM+0x16>
 318:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 31c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 320:	e1 ea       	ldi	r30, 0xA1	; 161
 322:	f8 e0       	ldi	r31, 0x08	; 8
 324:	80 81       	ld	r24, Z
 326:	85 ff       	sbrs	r24, 5
 328:	fd cf       	rjmp	.-6      	; 0x324 <sendStatus_RFM+0x28>
 32a:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <CAM_READY>
 32e:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 332:	e1 ea       	ldi	r30, 0xA1	; 161
 334:	f8 e0       	ldi	r31, 0x08	; 8
 336:	80 81       	ld	r24, Z
 338:	85 ff       	sbrs	r24, 5
 33a:	fd cf       	rjmp	.-6      	; 0x336 <sendStatus_RFM+0x3a>
 33c:	81 e6       	ldi	r24, 0x61	; 97
 33e:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 342:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <STATE>
 346:	08 95       	ret

00000348 <main>:

int main(void)
{
    setUp_RFM_USART();
 348:	0e 94 18 01 	call	0x230	; 0x230 <setUp_RFM_USART>

    setUp_PC_USART();
 34c:	0e 94 3d 01 	call	0x27a	; 0x27a <setUp_PC_USART>

    setTimer_Beacon();
 350:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <setTimer_Beacon>
	
	setTimer_Tally();
 354:	0e 94 6d 01 	call	0x2da	; 0x2da <setTimer_Tally>



    // Enable all interrupt levels in PMIC and enable global interrupts.
    PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 358:	e0 ea       	ldi	r30, 0xA0	; 160
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	82 81       	ldd	r24, Z+2	; 0x02
 35e:	87 60       	ori	r24, 0x07	; 7
 360:	82 83       	std	Z+2, r24	; 0x02
    sei();
 362:	78 94       	sei

    while (1)
    {
        if (STATE == 1 || STATE == 2)
 364:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <STATE>
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	21 f0       	breq	.+8      	; 0x374 <main+0x2c>
 36c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <STATE>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	11 f4       	brne	.+4      	; 0x378 <main+0x30>
        {
            sendStatus_RFM();
 374:	0e 94 7e 01 	call	0x2fc	; 0x2fc <sendStatus_RFM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 378:	8f e0       	ldi	r24, 0x0F	; 15
 37a:	97 e2       	ldi	r25, 0x27	; 39
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <main+0x34>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x3a>
 382:	00 00       	nop
 384:	ef cf       	rjmp	.-34     	; 0x364 <main+0x1c>

00000386 <__vector_25>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	08 b6       	in	r0, 0x38	; 56
 392:	0f 92       	push	r0
 394:	18 be       	out	0x38, r1	; 56
 396:	09 b6       	in	r0, 0x39	; 57
 398:	0f 92       	push	r0
 39a:	19 be       	out	0x39, r1	; 57
 39c:	0b b6       	in	r0, 0x3b	; 59
 39e:	0f 92       	push	r0
 3a0:	1b be       	out	0x3b, r1	; 59
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
    USART_RXComplete(&USART_data_RFM);
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	90 e2       	ldi	r25, 0x20	; 32
 3be:	0e 94 07 03 	call	0x60e	; 0x60e <USART_RXComplete>
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0b be       	out	0x3b, r0	; 59
 3de:	0f 90       	pop	r0
 3e0:	09 be       	out	0x39, r0	; 57
 3e2:	0f 90       	pop	r0
 3e4:	08 be       	out	0x38, r0	; 56
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_58>:

ISR(USARTE0_RXC_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	08 b6       	in	r0, 0x38	; 56
 3fc:	0f 92       	push	r0
 3fe:	18 be       	out	0x38, r1	; 56
 400:	09 b6       	in	r0, 0x39	; 57
 402:	0f 92       	push	r0
 404:	19 be       	out	0x39, r1	; 57
 406:	0b b6       	in	r0, 0x3b	; 59
 408:	0f 92       	push	r0
 40a:	1b be       	out	0x3b, r1	; 59
 40c:	2f 93       	push	r18
 40e:	3f 93       	push	r19
 410:	4f 93       	push	r20
 412:	5f 93       	push	r21
 414:	6f 93       	push	r22
 416:	7f 93       	push	r23
 418:	8f 93       	push	r24
 41a:	9f 93       	push	r25
 41c:	af 93       	push	r26
 41e:	bf 93       	push	r27
 420:	ef 93       	push	r30
 422:	ff 93       	push	r31
    USART_RXComplete(&USART_data_PC);
 424:	84 e1       	ldi	r24, 0x14	; 20
 426:	90 e2       	ldi	r25, 0x20	; 32
 428:	0e 94 07 03 	call	0x60e	; 0x60e <USART_RXComplete>
}
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	0f 90       	pop	r0
 44a:	09 be       	out	0x39, r0	; 57
 44c:	0f 90       	pop	r0
 44e:	08 be       	out	0x38, r0	; 56
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <__vector_26>:

ISR(USARTC0_DRE_vect)
{
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	08 b6       	in	r0, 0x38	; 56
 466:	0f 92       	push	r0
 468:	18 be       	out	0x38, r1	; 56
 46a:	09 b6       	in	r0, 0x39	; 57
 46c:	0f 92       	push	r0
 46e:	19 be       	out	0x39, r1	; 57
 470:	0b b6       	in	r0, 0x3b	; 59
 472:	0f 92       	push	r0
 474:	1b be       	out	0x3b, r1	; 59
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
    USART_DataRegEmpty(&USART_data_RFM);
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	90 e2       	ldi	r25, 0x20	; 32
 492:	0e 94 1c 03 	call	0x638	; 0x638 <USART_DataRegEmpty>
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0b be       	out	0x3b, r0	; 59
 4b2:	0f 90       	pop	r0
 4b4:	09 be       	out	0x39, r0	; 57
 4b6:	0f 90       	pop	r0
 4b8:	08 be       	out	0x38, r0	; 56
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_59>:

ISR(USARTE0_DRE_vect)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	08 b6       	in	r0, 0x38	; 56
 4d0:	0f 92       	push	r0
 4d2:	18 be       	out	0x38, r1	; 56
 4d4:	09 b6       	in	r0, 0x39	; 57
 4d6:	0f 92       	push	r0
 4d8:	19 be       	out	0x39, r1	; 57
 4da:	0b b6       	in	r0, 0x3b	; 59
 4dc:	0f 92       	push	r0
 4de:	1b be       	out	0x3b, r1	; 59
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
    USART_DataRegEmpty(&USART_data_PC);
 4f8:	84 e1       	ldi	r24, 0x14	; 20
 4fa:	90 e2       	ldi	r25, 0x20	; 32
 4fc:	0e 94 1c 03 	call	0x638	; 0x638 <USART_DataRegEmpty>
}
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0b be       	out	0x3b, r0	; 59
 51c:	0f 90       	pop	r0
 51e:	09 be       	out	0x39, r0	; 57
 520:	0f 90       	pop	r0
 522:	08 be       	out	0x38, r0	; 56
 524:	0f 90       	pop	r0
 526:	0f be       	out	0x3f, r0	; 63
 528:	0f 90       	pop	r0
 52a:	1f 90       	pop	r1
 52c:	18 95       	reti

0000052e <__vector_20>:

// Tell compiler to associate this interrupt handler with the TCC0_OVF_vect vector.
ISR(TCC1_OVF_vect) // TALLY
{
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	08 b6       	in	r0, 0x38	; 56
 53a:	0f 92       	push	r0
 53c:	18 be       	out	0x38, r1	; 56
 53e:	2f 93       	push	r18
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
    uint8_t port_A_temp = PORT_GetPortValue(&PORTA);
 544:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    uint8_t port_B_temp = PORT_GetPortValue(&PORTB);
 548:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>

    if (port_A_temp != port_A || port_B_temp != port_B)
 54c:	20 91 13 20 	lds	r18, 0x2013	; 0x802013 <port_A>
 550:	82 13       	cpse	r24, r18
 552:	04 c0       	rjmp	.+8      	; 0x55c <__vector_20+0x2e>
 554:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <port_B>
 558:	92 17       	cp	r25, r18
 55a:	d1 f0       	breq	.+52     	; 0x590 <__vector_20+0x62>
    {
        port_A = port_A_temp;
 55c:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <port_A>
        port_B = port_B_temp;
 560:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <port_B>

        CAM_LIVE = ((port_A & 0xC0) >> 2) + port_B;
 564:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <port_A>
 568:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <port_B>
 56c:	80 7c       	andi	r24, 0xC0	; 192
 56e:	86 95       	lsr	r24
 570:	86 95       	lsr	r24
 572:	89 0f       	add	r24, r25
 574:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
        CAM_READY = port_A >> 2;
 578:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <port_A>
 57c:	86 95       	lsr	r24
 57e:	86 95       	lsr	r24
 580:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <CAM_READY>

        STATE = 2; //Odoslanie dat pri zmene na portoch
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <STATE>
		TC_Restart( &TCC0 );
 58a:	88 e0       	ldi	r24, 0x08	; 8
 58c:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    }
}
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	2f 91       	pop	r18
 596:	0f 90       	pop	r0
 598:	08 be       	out	0x38, r0	; 56
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
 5a0:	1f 90       	pop	r1
 5a2:	18 95       	reti

000005a4 <__vector_14>:

ISR(TCC0_OVF_vect) // BEACON 
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	08 b6       	in	r0, 0x38	; 56
 5b0:	0f 92       	push	r0
 5b2:	18 be       	out	0x38, r1	; 56
 5b4:	8f 93       	push	r24
    STATE = 1; //Pravidelne zasielanie dat
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <STATE>
 5bc:	8f 91       	pop	r24
 5be:	0f 90       	pop	r0
 5c0:	08 be       	out	0x38, r0	; 56
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
 5cc:	fc 01       	movw	r30, r24
 5ce:	90 81       	ld	r25, Z
 5d0:	90 7f       	andi	r25, 0xF0	; 240
 5d2:	69 2b       	or	r22, r25
 5d4:	60 83       	st	Z, r22
 5d6:	08 95       	ret

000005d8 <TC1_ConfigClockSource>:
 5d8:	fc 01       	movw	r30, r24
 5da:	90 81       	ld	r25, Z
 5dc:	90 7f       	andi	r25, 0xF0	; 240
 5de:	69 2b       	or	r22, r25
 5e0:	60 83       	st	Z, r22
 5e2:	08 95       	ret

000005e4 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
 5e4:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
 5e6:	96 81       	ldd	r25, Z+6	; 0x06
 5e8:	9c 7f       	andi	r25, 0xFC	; 252
 5ea:	69 2b       	or	r22, r25
 5ec:	66 83       	std	Z+6, r22	; 0x06
 5ee:	08 95       	ret

000005f0 <TC1_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
 5f0:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
 5f2:	96 81       	ldd	r25, Z+6	; 0x06
 5f4:	9c 7f       	andi	r25, 0xFC	; 252
 5f6:	69 2b       	or	r22, r25
 5f8:	66 83       	std	Z+6, r22	; 0x06
 5fa:	08 95       	ret

000005fc <USART_InterruptDriver_Initialize>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;

	return ans;
}
 5fc:	fc 01       	movw	r30, r24
 5fe:	60 83       	st	Z, r22
 600:	71 83       	std	Z+1, r23	; 0x01
 602:	42 83       	std	Z+2, r20	; 0x02
 604:	14 86       	std	Z+12, r1	; 0x0c
 606:	13 86       	std	Z+11, r1	; 0x0b
 608:	16 86       	std	Z+14, r1	; 0x0e
 60a:	15 86       	std	Z+13, r1	; 0x0d
 60c:	08 95       	ret

0000060e <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 60e:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 610:	93 85       	ldd	r25, Z+11	; 0x0b
 612:	9f 5f       	subi	r25, 0xFF	; 255
 614:	93 70       	andi	r25, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 616:	84 85       	ldd	r24, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 618:	a0 81       	ld	r26, Z
 61a:	b1 81       	ldd	r27, Z+1	; 0x01
 61c:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 61e:	98 17       	cp	r25, r24
 620:	49 f0       	breq	.+18     	; 0x634 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 622:	83 85       	ldd	r24, Z+11	; 0x0b
 624:	df 01       	movw	r26, r30
 626:	a8 0f       	add	r26, r24
 628:	b1 1d       	adc	r27, r1
 62a:	13 96       	adiw	r26, 0x03	; 3
 62c:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 62e:	93 87       	std	Z+11, r25	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 634:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 636:	08 95       	ret

00000638 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 638:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 63a:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 63c:	85 85       	ldd	r24, Z+13	; 0x0d
 63e:	98 13       	cpse	r25, r24
 640:	07 c0       	rjmp	.+14     	; 0x650 <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 642:	01 90       	ld	r0, Z+
 644:	f0 81       	ld	r31, Z
 646:	e0 2d       	mov	r30, r0
 648:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 64a:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 64c:	83 83       	std	Z+3, r24	; 0x03
 64e:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 650:	86 85       	ldd	r24, Z+14	; 0x0e
 652:	df 01       	movw	r26, r30
 654:	a8 0f       	add	r26, r24
 656:	b1 1d       	adc	r27, r1
 658:	17 96       	adiw	r26, 0x07	; 7
 65a:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 65c:	a0 81       	ld	r26, Z
 65e:	b1 81       	ldd	r27, Z+1	; 0x01
 660:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 662:	86 85       	ldd	r24, Z+14	; 0x0e
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	83 70       	andi	r24, 0x03	; 3
 668:	86 87       	std	Z+14, r24	; 0x0e
 66a:	08 95       	ret

0000066c <_exit>:
 66c:	f8 94       	cli

0000066e <__stop_program>:
 66e:	ff cf       	rjmp	.-2      	; 0x66e <__stop_program>
